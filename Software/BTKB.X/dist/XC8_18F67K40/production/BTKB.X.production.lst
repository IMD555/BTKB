

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Feb 23 14:31:29 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18LF67K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 2.00
    90                           ; Generated 27/05/2018 GMT
    91                           ; 
    92                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18LF67K40 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	idataCOMRAM
   125  012A40                     __pidataCOMRAM:
   126                           	opt stack 0
   127                           
   128                           ;initializer for _lastPush
   129  012A40  FF                 	db	255
   130                           
   131                           ;initializer for _firstPush
   132  012A41  FF                 	db	255
   133                           
   134                           ;initializer for _mouseSpeed
   135  012A42  05                 	db	5
   136                           
   137                           	psect	idataBANK0
   138  0129EA                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _keyMapList
   142  0129EA  23                 	db	low _keyMap1
   143  0129EB  FF                 	db	high _keyMap1
   144  0129EC  63                 	db	low _keyMap1Fn
   145  0129ED  FE                 	db	high _keyMap1Fn
   146  0129EE  A3                 	db	low _keyMap2
   147  0129EF  FD                 	db	high _keyMap2
   148  0129F0  E3                 	db	low _keyMap2Fn
   149  0129F1  FC                 	db	high _keyMap2Fn
   150  0129F2  23                 	db	low _keyMap3
   151  0129F3  FC                 	db	high _keyMap3
   152  0129F4  63                 	db	low _keyMap3Fn
   153  0129F5  FB                 	db	high _keyMap3Fn
   154                           
   155                           ;initializer for _volt
   156  0129F6  FFFF               	dw	65535
   157                           
   158                           	psect	mediumconst
   159  00F932                     __pmediumconst:
   160                           	opt stack 0
   161  00F932  00                 	db	0
   162  00F933                     _bitOrderSwap:
   163                           	opt stack 0
   164  00F933  00                 	db	0
   165  00F934  80                 	db	128
   166  00F935  40                 	db	64
   167  00F936  C0                 	db	192
   168  00F937  20                 	db	32
   169  00F938  A0                 	db	160
   170  00F939  60                 	db	96
   171  00F93A  E0                 	db	224
   172  00F93B  10                 	db	16
   173  00F93C  90                 	db	144
   174  00F93D  50                 	db	80
   175  00F93E  D0                 	db	208
   176  00F93F  30                 	db	48
   177  00F940  B0                 	db	176
   178  00F941  70                 	db	112
   179  00F942  F0                 	db	240
   180  00F943  08                 	db	8
   181  00F944  88                 	db	136
   182  00F945  48                 	db	72
   183  00F946  C8                 	db	200
   184  00F947  28                 	db	40
   185  00F948  A8                 	db	168
   186  00F949  68                 	db	104
   187  00F94A  E8                 	db	232
   188  00F94B  18                 	db	24
   189  00F94C  98                 	db	152
   190  00F94D  58                 	db	88
   191  00F94E  D8                 	db	216
   192  00F94F  38                 	db	56
   193  00F950  B8                 	db	184
   194  00F951  78                 	db	120
   195  00F952  F8                 	db	248
   196  00F953  04                 	db	4
   197  00F954  84                 	db	132
   198  00F955  44                 	db	68
   199  00F956  C4                 	db	196
   200  00F957  24                 	db	36
   201  00F958  A4                 	db	164
   202  00F959  64                 	db	100
   203  00F95A  E4                 	db	228
   204  00F95B  14                 	db	20
   205  00F95C  94                 	db	148
   206  00F95D  54                 	db	84
   207  00F95E  D4                 	db	212
   208  00F95F  34                 	db	52
   209  00F960  B4                 	db	180
   210  00F961  74                 	db	116
   211  00F962  F4                 	db	244
   212  00F963  0C                 	db	12
   213  00F964  8C                 	db	140
   214  00F965  4C                 	db	76
   215  00F966  CC                 	db	204
   216  00F967  2C                 	db	44
   217  00F968  AC                 	db	172
   218  00F969  6C                 	db	108
   219  00F96A  EC                 	db	236
   220  00F96B  1C                 	db	28
   221  00F96C  9C                 	db	156
   222  00F96D  5C                 	db	92
   223  00F96E  DC                 	db	220
   224  00F96F  3C                 	db	60
   225  00F970  BC                 	db	188
   226  00F971  7C                 	db	124
   227  00F972  FC                 	db	252
   228  00F973  02                 	db	2
   229  00F974  82                 	db	130
   230  00F975  42                 	db	66
   231  00F976  C2                 	db	194
   232  00F977  22                 	db	34
   233  00F978  A2                 	db	162
   234  00F979  62                 	db	98
   235  00F97A  E2                 	db	226
   236  00F97B  12                 	db	18
   237  00F97C  92                 	db	146
   238  00F97D  52                 	db	82
   239  00F97E  D2                 	db	210
   240  00F97F  32                 	db	50
   241  00F980  B2                 	db	178
   242  00F981  72                 	db	114
   243  00F982  F2                 	db	242
   244  00F983  0A                 	db	10
   245  00F984  8A                 	db	138
   246  00F985  4A                 	db	74
   247  00F986  CA                 	db	202
   248  00F987  2A                 	db	42
   249  00F988  AA                 	db	170
   250  00F989  6A                 	db	106
   251  00F98A  EA                 	db	234
   252  00F98B  1A                 	db	26
   253  00F98C  9A                 	db	154
   254  00F98D  5A                 	db	90
   255  00F98E  DA                 	db	218
   256  00F98F  3A                 	db	58
   257  00F990  BA                 	db	186
   258  00F991  7A                 	db	122
   259  00F992  FA                 	db	250
   260  00F993  06                 	db	6
   261  00F994  86                 	db	134
   262  00F995  46                 	db	70
   263  00F996  C6                 	db	198
   264  00F997  26                 	db	38
   265  00F998  A6                 	db	166
   266  00F999  66                 	db	102
   267  00F99A  E6                 	db	230
   268  00F99B  16                 	db	22
   269  00F99C  96                 	db	150
   270  00F99D  56                 	db	86
   271  00F99E  D6                 	db	214
   272  00F99F  36                 	db	54
   273  00F9A0  B6                 	db	182
   274  00F9A1  76                 	db	118
   275  00F9A2  F6                 	db	246
   276  00F9A3  0E                 	db	14
   277  00F9A4  8E                 	db	142
   278  00F9A5  4E                 	db	78
   279  00F9A6  CE                 	db	206
   280  00F9A7  2E                 	db	46
   281  00F9A8  AE                 	db	174
   282  00F9A9  6E                 	db	110
   283  00F9AA  EE                 	db	238
   284  00F9AB  1E                 	db	30
   285  00F9AC  9E                 	db	158
   286  00F9AD  5E                 	db	94
   287  00F9AE  DE                 	db	222
   288  00F9AF  3E                 	db	62
   289  00F9B0  BE                 	db	190
   290  00F9B1  7E                 	db	126
   291  00F9B2  FE                 	db	254
   292  00F9B3  01                 	db	1
   293  00F9B4  81                 	db	129
   294  00F9B5  41                 	db	65
   295  00F9B6  C1                 	db	193
   296  00F9B7  21                 	db	33
   297  00F9B8  A1                 	db	161
   298  00F9B9  61                 	db	97
   299  00F9BA  E1                 	db	225
   300  00F9BB  11                 	db	17
   301  00F9BC  91                 	db	145
   302  00F9BD  51                 	db	81
   303  00F9BE  D1                 	db	209
   304  00F9BF  31                 	db	49
   305  00F9C0  B1                 	db	177
   306  00F9C1  71                 	db	113
   307  00F9C2  F1                 	db	241
   308  00F9C3  09                 	db	9
   309  00F9C4  89                 	db	137
   310  00F9C5  49                 	db	73
   311  00F9C6  C9                 	db	201
   312  00F9C7  29                 	db	41
   313  00F9C8  A9                 	db	169
   314  00F9C9  69                 	db	105
   315  00F9CA  E9                 	db	233
   316  00F9CB  19                 	db	25
   317  00F9CC  99                 	db	153
   318  00F9CD  59                 	db	89
   319  00F9CE  D9                 	db	217
   320  00F9CF  39                 	db	57
   321  00F9D0  B9                 	db	185
   322  00F9D1  79                 	db	121
   323  00F9D2  F9                 	db	249
   324  00F9D3  05                 	db	5
   325  00F9D4  85                 	db	133
   326  00F9D5  45                 	db	69
   327  00F9D6  C5                 	db	197
   328  00F9D7  25                 	db	37
   329  00F9D8  A5                 	db	165
   330  00F9D9  65                 	db	101
   331  00F9DA  E5                 	db	229
   332  00F9DB  15                 	db	21
   333  00F9DC  95                 	db	149
   334  00F9DD  55                 	db	85
   335  00F9DE  D5                 	db	213
   336  00F9DF  35                 	db	53
   337  00F9E0  B5                 	db	181
   338  00F9E1  75                 	db	117
   339  00F9E2  F5                 	db	245
   340  00F9E3  0D                 	db	13
   341  00F9E4  8D                 	db	141
   342  00F9E5  4D                 	db	77
   343  00F9E6  CD                 	db	205
   344  00F9E7  2D                 	db	45
   345  00F9E8  AD                 	db	173
   346  00F9E9  6D                 	db	109
   347  00F9EA  ED                 	db	237
   348  00F9EB  1D                 	db	29
   349  00F9EC  9D                 	db	157
   350  00F9ED  5D                 	db	93
   351  00F9EE  DD                 	db	221
   352  00F9EF  3D                 	db	61
   353  00F9F0  BD                 	db	189
   354  00F9F1  7D                 	db	125
   355  00F9F2  FD                 	db	253
   356  00F9F3  03                 	db	3
   357  00F9F4  83                 	db	131
   358  00F9F5  43                 	db	67
   359  00F9F6  C3                 	db	195
   360  00F9F7  23                 	db	35
   361  00F9F8  A3                 	db	163
   362  00F9F9  63                 	db	99
   363  00F9FA  E3                 	db	227
   364  00F9FB  13                 	db	19
   365  00F9FC  93                 	db	147
   366  00F9FD  53                 	db	83
   367  00F9FE  D3                 	db	211
   368  00F9FF  33                 	db	51
   369  00FA00  B3                 	db	179
   370  00FA01  73                 	db	115
   371  00FA02  F3                 	db	243
   372  00FA03  0B                 	db	11
   373  00FA04  8B                 	db	139
   374  00FA05  4B                 	db	75
   375  00FA06  CB                 	db	203
   376  00FA07  2B                 	db	43
   377  00FA08  AB                 	db	171
   378  00FA09  6B                 	db	107
   379  00FA0A  EB                 	db	235
   380  00FA0B  1B                 	db	27
   381  00FA0C  9B                 	db	155
   382  00FA0D  5B                 	db	91
   383  00FA0E  DB                 	db	219
   384  00FA0F  3B                 	db	59
   385  00FA10  BB                 	db	187
   386  00FA11  7B                 	db	123
   387  00FA12  FB                 	db	251
   388  00FA13  07                 	db	7
   389  00FA14  87                 	db	135
   390  00FA15  47                 	db	71
   391  00FA16  C7                 	db	199
   392  00FA17  27                 	db	39
   393  00FA18  A7                 	db	167
   394  00FA19  67                 	db	103
   395  00FA1A  E7                 	db	231
   396  00FA1B  17                 	db	23
   397  00FA1C  97                 	db	151
   398  00FA1D  57                 	db	87
   399  00FA1E  D7                 	db	215
   400  00FA1F  37                 	db	55
   401  00FA20  B7                 	db	183
   402  00FA21  77                 	db	119
   403  00FA22  F7                 	db	247
   404  00FA23  0F                 	db	15
   405  00FA24  8F                 	db	143
   406  00FA25  4F                 	db	79
   407  00FA26  CF                 	db	207
   408  00FA27  2F                 	db	47
   409  00FA28  AF                 	db	175
   410  00FA29  6F                 	db	111
   411  00FA2A  EF                 	db	239
   412  00FA2B  1F                 	db	31
   413  00FA2C  9F                 	db	159
   414  00FA2D  5F                 	db	95
   415  00FA2E  DF                 	db	223
   416  00FA2F  3F                 	db	63
   417  00FA30  BF                 	db	191
   418  00FA31  7F                 	db	127
   419  00FA32  FF                 	db	255
   420  00FA33                     __end_of_bitOrderSwap:
   421                           	opt stack 0
   422  00FA33  00                 	db	0
   423  00FA34  01                 	db	1
   424  00FA35  01                 	db	1
   425  00FA36  02                 	db	2
   426  00FA37  01                 	db	1
   427  00FA38  02                 	db	2
   428  00FA39  02                 	db	2
   429  00FA3A  03                 	db	3
   430  00FA3B  01                 	db	1
   431  00FA3C  02                 	db	2
   432  00FA3D  02                 	db	2
   433  00FA3E  03                 	db	3
   434  00FA3F  02                 	db	2
   435  00FA40  03                 	db	3
   436  00FA41  03                 	db	3
   437  00FA42  04                 	db	4
   438  00FA43  01                 	db	1
   439  00FA44  02                 	db	2
   440  00FA45  02                 	db	2
   441  00FA46  03                 	db	3
   442  00FA47  02                 	db	2
   443  00FA48  03                 	db	3
   444  00FA49  03                 	db	3
   445  00FA4A  04                 	db	4
   446  00FA4B  02                 	db	2
   447  00FA4C  03                 	db	3
   448  00FA4D  03                 	db	3
   449  00FA4E  04                 	db	4
   450  00FA4F  03                 	db	3
   451  00FA50  04                 	db	4
   452  00FA51  04                 	db	4
   453  00FA52  05                 	db	5
   454  00FA53  01                 	db	1
   455  00FA54  02                 	db	2
   456  00FA55  02                 	db	2
   457  00FA56  03                 	db	3
   458  00FA57  02                 	db	2
   459  00FA58  03                 	db	3
   460  00FA59  03                 	db	3
   461  00FA5A  04                 	db	4
   462  00FA5B  02                 	db	2
   463  00FA5C  03                 	db	3
   464  00FA5D  03                 	db	3
   465  00FA5E  04                 	db	4
   466  00FA5F  03                 	db	3
   467  00FA60  04                 	db	4
   468  00FA61  04                 	db	4
   469  00FA62  05                 	db	5
   470  00FA63  02                 	db	2
   471  00FA64  03                 	db	3
   472  00FA65  03                 	db	3
   473  00FA66  04                 	db	4
   474  00FA67  03                 	db	3
   475  00FA68  04                 	db	4
   476  00FA69  04                 	db	4
   477  00FA6A  05                 	db	5
   478  00FA6B  03                 	db	3
   479  00FA6C  04                 	db	4
   480  00FA6D  04                 	db	4
   481  00FA6E  05                 	db	5
   482  00FA6F  04                 	db	4
   483  00FA70  05                 	db	5
   484  00FA71  05                 	db	5
   485  00FA72  06                 	db	6
   486  00FA73  01                 	db	1
   487  00FA74  02                 	db	2
   488  00FA75  02                 	db	2
   489  00FA76  03                 	db	3
   490  00FA77  02                 	db	2
   491  00FA78  03                 	db	3
   492  00FA79  03                 	db	3
   493  00FA7A  04                 	db	4
   494  00FA7B  02                 	db	2
   495  00FA7C  03                 	db	3
   496  00FA7D  03                 	db	3
   497  00FA7E  04                 	db	4
   498  00FA7F  03                 	db	3
   499  00FA80  04                 	db	4
   500  00FA81  04                 	db	4
   501  00FA82  05                 	db	5
   502  00FA83  02                 	db	2
   503  00FA84  03                 	db	3
   504  00FA85  03                 	db	3
   505  00FA86  04                 	db	4
   506  00FA87  03                 	db	3
   507  00FA88  04                 	db	4
   508  00FA89  04                 	db	4
   509  00FA8A  05                 	db	5
   510  00FA8B  03                 	db	3
   511  00FA8C  04                 	db	4
   512  00FA8D  04                 	db	4
   513  00FA8E  05                 	db	5
   514  00FA8F  04                 	db	4
   515  00FA90  05                 	db	5
   516  00FA91  05                 	db	5
   517  00FA92  06                 	db	6
   518  00FA93  02                 	db	2
   519  00FA94  03                 	db	3
   520  00FA95  03                 	db	3
   521  00FA96  04                 	db	4
   522  00FA97  03                 	db	3
   523  00FA98  04                 	db	4
   524  00FA99  04                 	db	4
   525  00FA9A  05                 	db	5
   526  00FA9B  03                 	db	3
   527  00FA9C  04                 	db	4
   528  00FA9D  04                 	db	4
   529  00FA9E  05                 	db	5
   530  00FA9F  04                 	db	4
   531  00FAA0  05                 	db	5
   532  00FAA1  05                 	db	5
   533  00FAA2  06                 	db	6
   534  00FAA3  03                 	db	3
   535  00FAA4  04                 	db	4
   536  00FAA5  04                 	db	4
   537  00FAA6  05                 	db	5
   538  00FAA7  04                 	db	4
   539  00FAA8  05                 	db	5
   540  00FAA9  05                 	db	5
   541  00FAAA  06                 	db	6
   542  00FAAB  04                 	db	4
   543  00FAAC  05                 	db	5
   544  00FAAD  05                 	db	5
   545  00FAAE  06                 	db	6
   546  00FAAF  05                 	db	5
   547  00FAB0  06                 	db	6
   548  00FAB1  06                 	db	6
   549  00FAB2  07                 	db	7
   550  00FAB3  01                 	db	1
   551  00FAB4  02                 	db	2
   552  00FAB5  02                 	db	2
   553  00FAB6  03                 	db	3
   554  00FAB7  02                 	db	2
   555  00FAB8  03                 	db	3
   556  00FAB9  03                 	db	3
   557  00FABA  04                 	db	4
   558  00FABB  02                 	db	2
   559  00FABC  03                 	db	3
   560  00FABD  03                 	db	3
   561  00FABE  04                 	db	4
   562  00FABF  03                 	db	3
   563  00FAC0  04                 	db	4
   564  00FAC1  04                 	db	4
   565  00FAC2  05                 	db	5
   566  00FAC3  02                 	db	2
   567  00FAC4  03                 	db	3
   568  00FAC5  03                 	db	3
   569  00FAC6  04                 	db	4
   570  00FAC7  03                 	db	3
   571  00FAC8  04                 	db	4
   572  00FAC9  04                 	db	4
   573  00FACA  05                 	db	5
   574  00FACB  03                 	db	3
   575  00FACC  04                 	db	4
   576  00FACD  04                 	db	4
   577  00FACE  05                 	db	5
   578  00FACF  04                 	db	4
   579  00FAD0  05                 	db	5
   580  00FAD1  05                 	db	5
   581  00FAD2  06                 	db	6
   582  00FAD3  02                 	db	2
   583  00FAD4  03                 	db	3
   584  00FAD5  03                 	db	3
   585  00FAD6  04                 	db	4
   586  00FAD7  03                 	db	3
   587  00FAD8  04                 	db	4
   588  00FAD9  04                 	db	4
   589  00FADA  05                 	db	5
   590  00FADB  03                 	db	3
   591  00FADC  04                 	db	4
   592  00FADD  04                 	db	4
   593  00FADE  05                 	db	5
   594  00FADF  04                 	db	4
   595  00FAE0  05                 	db	5
   596  00FAE1  05                 	db	5
   597  00FAE2  06                 	db	6
   598  00FAE3  03                 	db	3
   599  00FAE4  04                 	db	4
   600  00FAE5  04                 	db	4
   601  00FAE6  05                 	db	5
   602  00FAE7  04                 	db	4
   603  00FAE8  05                 	db	5
   604  00FAE9  05                 	db	5
   605  00FAEA  06                 	db	6
   606  00FAEB  04                 	db	4
   607  00FAEC  05                 	db	5
   608  00FAED  05                 	db	5
   609  00FAEE  06                 	db	6
   610  00FAEF  05                 	db	5
   611  00FAF0  06                 	db	6
   612  00FAF1  06                 	db	6
   613  00FAF2  07                 	db	7
   614  00FAF3  02                 	db	2
   615  00FAF4  03                 	db	3
   616  00FAF5  03                 	db	3
   617  00FAF6  04                 	db	4
   618  00FAF7  03                 	db	3
   619  00FAF8  04                 	db	4
   620  00FAF9  04                 	db	4
   621  00FAFA  05                 	db	5
   622  00FAFB  03                 	db	3
   623  00FAFC  04                 	db	4
   624  00FAFD  04                 	db	4
   625  00FAFE  05                 	db	5
   626  00FAFF  04                 	db	4
   627  00FB00  05                 	db	5
   628  00FB01  05                 	db	5
   629  00FB02  06                 	db	6
   630  00FB03  03                 	db	3
   631  00FB04  04                 	db	4
   632  00FB05  04                 	db	4
   633  00FB06  05                 	db	5
   634  00FB07  04                 	db	4
   635  00FB08  05                 	db	5
   636  00FB09  05                 	db	5
   637  00FB0A  06                 	db	6
   638  00FB0B  04                 	db	4
   639  00FB0C  05                 	db	5
   640  00FB0D  05                 	db	5
   641  00FB0E  06                 	db	6
   642  00FB0F  05                 	db	5
   643  00FB10  06                 	db	6
   644  00FB11  06                 	db	6
   645  00FB12  07                 	db	7
   646  00FB13  03                 	db	3
   647  00FB14  04                 	db	4
   648  00FB15  04                 	db	4
   649  00FB16  05                 	db	5
   650  00FB17  04                 	db	4
   651  00FB18  05                 	db	5
   652  00FB19  05                 	db	5
   653  00FB1A  06                 	db	6
   654  00FB1B  04                 	db	4
   655  00FB1C  05                 	db	5
   656  00FB1D  05                 	db	5
   657  00FB1E  06                 	db	6
   658  00FB1F  05                 	db	5
   659  00FB20  06                 	db	6
   660  00FB21  06                 	db	6
   661  00FB22  07                 	db	7
   662  00FB23  04                 	db	4
   663  00FB24  05                 	db	5
   664  00FB25  05                 	db	5
   665  00FB26  06                 	db	6
   666  00FB27  05                 	db	5
   667  00FB28  06                 	db	6
   668  00FB29  06                 	db	6
   669  00FB2A  07                 	db	7
   670  00FB2B  05                 	db	5
   671  00FB2C  06                 	db	6
   672  00FB2D  06                 	db	6
   673  00FB2E  07                 	db	7
   674  00FB2F  06                 	db	6
   675  00FB30  07                 	db	7
   676  00FB31  07                 	db	7
   677  00FB32  08                 	db	8
   678  00FB33                     __end_of_popCount8bits:
   679                           	opt stack 0
   680  00FB33                     _hex:
   681                           	opt stack 0
   682  00FB33  30                 	db	48
   683  00FB34  31                 	db	49
   684  00FB35  32                 	db	50
   685  00FB36  33                 	db	51
   686  00FB37  34                 	db	52
   687  00FB38  35                 	db	53
   688  00FB39  36                 	db	54
   689  00FB3A  37                 	db	55
   690  00FB3B  38                 	db	56
   691  00FB3C  39                 	db	57
   692  00FB3D  41                 	db	65
   693  00FB3E  42                 	db	66
   694  00FB3F  43                 	db	67
   695  00FB40  44                 	db	68
   696  00FB41  45                 	db	69
   697  00FB42  46                 	db	70
   698  00FB43                     __end_of_hex:
   699                           	opt stack 0
   700  00FB43                     _ledCathodeTable:
   701                           	opt stack 0
   702  00FB43  01                 	db	1
   703  00FB44  08                 	db	8
   704  00FB45  08                 	db	8
   705  00FB46  02                 	db	2
   706  00FB47  04                 	db	4
   707  00FB48  01                 	db	1
   708  00FB49  08                 	db	8
   709  00FB4A  02                 	db	2
   710  00FB4B  02                 	db	2
   711  00FB4C  01                 	db	1
   712  00FB4D  04                 	db	4
   713  00FB4E  04                 	db	4
   714  00FB4F                     __end_of_ledCathodeTable:
   715                           	opt stack 0
   716  00FB4F                     _ledAnodeTable:
   717                           	opt stack 0
   718  00FB4F  08                 	db	8
   719  00FB50  01                 	db	1
   720  00FB51  04                 	db	4
   721  00FB52  08                 	db	8
   722  00FB53  02                 	db	2
   723  00FB54  02                 	db	2
   724  00FB55  02                 	db	2
   725  00FB56  01                 	db	1
   726  00FB57  04                 	db	4
   727  00FB58  04                 	db	4
   728  00FB59  01                 	db	1
   729  00FB5A  08                 	db	8
   730  00FB5B                     __end_of_ledAnodeTable:
   731                           	opt stack 0
   732  00FB5B                     _rowTable:
   733                           	opt stack 0
   734  00FB5B  FE                 	db	254
   735  00FB5C  FD                 	db	253
   736  00FB5D  BF                 	db	191
   737  00FB5E  7F                 	db	127
   738  00FB5F  FB                 	db	251
   739  00FB60  F7                 	db	247
   740  00FB61  EF                 	db	239
   741  00FB62  DF                 	db	223
   742  00FB63                     __end_of_rowTable:
   743                           	opt stack 0
   744  00FB63                     _keyMap3Fn:
   745                           	opt stack 0
   746  00FB63  0450               	dw	1104
   747  00FB65  0450               	dw	1104
   748  00FB67  0450               	dw	1104
   749  00FB69  0450               	dw	1104
   750  00FB6B  3004               	dw	12292
   751  00FB6D  3004               	dw	12292
   752  00FB6F  3004               	dw	12292
   753  00FB71  3004               	dw	12292
   754  00FB73  044F               	dw	1103
   755  00FB75  044F               	dw	1103
   756  00FB77  044F               	dw	1103
   757  00FB79  044F               	dw	1103
   758  00FB7B  0000               	dw	0
   759  00FB7D  0000               	dw	0
   760  00FB7F  0000               	dw	0
   761  00FB81  0000               	dw	0
   762  00FB83  0450               	dw	1104
   763  00FB85  0450               	dw	1104
   764  00FB87  0450               	dw	1104
   765  00FB89  0450               	dw	1104
   766  00FB8B  3004               	dw	12292
   767  00FB8D  3004               	dw	12292
   768  00FB8F  3004               	dw	12292
   769  00FB91  3004               	dw	12292
   770  00FB93  044F               	dw	1103
   771  00FB95  044F               	dw	1103
   772  00FB97  044F               	dw	1103
   773  00FB99  044F               	dw	1103
   774  00FB9B  0000               	dw	0
   775  00FB9D  0000               	dw	0
   776  00FB9F  0000               	dw	0
   777  00FBA1  0000               	dw	0
   778  00FBA3  0450               	dw	1104
   779  00FBA5  0450               	dw	1104
   780  00FBA7  0450               	dw	1104
   781  00FBA9  0450               	dw	1104
   782  00FBAB  002C               	dw	44
   783  00FBAD  002C               	dw	44
   784  00FBAF  002C               	dw	44
   785  00FBB1  002C               	dw	44
   786  00FBB3  044F               	dw	1103
   787  00FBB5  044F               	dw	1103
   788  00FBB7  044F               	dw	1103
   789  00FBB9  044F               	dw	1103
   790  00FBBB  0000               	dw	0
   791  00FBBD  0000               	dw	0
   792  00FBBF  0000               	dw	0
   793  00FBC1  0000               	dw	0
   794  00FBC3  0450               	dw	1104
   795  00FBC5  0450               	dw	1104
   796  00FBC7  0450               	dw	1104
   797  00FBC9  0450               	dw	1104
   798  00FBCB  002C               	dw	44
   799  00FBCD  002C               	dw	44
   800  00FBCF  002C               	dw	44
   801  00FBD1  002C               	dw	44
   802  00FBD3  044F               	dw	1103
   803  00FBD5  044F               	dw	1103
   804  00FBD7  044F               	dw	1103
   805  00FBD9  044F               	dw	1103
   806  00FBDB  0000               	dw	0
   807  00FBDD  0000               	dw	0
   808  00FBDF  0000               	dw	0
   809  00FBE1  0000               	dw	0
   810  00FBE3  0450               	dw	1104
   811  00FBE5  0450               	dw	1104
   812  00FBE7  0450               	dw	1104
   813  00FBE9  0450               	dw	1104
   814  00FBEB  3005               	dw	12293
   815  00FBED  3005               	dw	12293
   816  00FBEF  3005               	dw	12293
   817  00FBF1  3005               	dw	12293
   818  00FBF3  F003               	dw	61443
   819  00FBF5  044F               	dw	1103
   820  00FBF7  044F               	dw	1103
   821  00FBF9  044F               	dw	1103
   822  00FBFB  0000               	dw	0
   823  00FBFD  0000               	dw	0
   824  00FBFF  0000               	dw	0
   825  00FC01  0000               	dw	0
   826  00FC03  F020               	dw	61472
   827  00FC05  F022               	dw	61474
   828  00FC07  0450               	dw	1104
   829  00FC09  0450               	dw	1104
   830  00FC0B  3005               	dw	12293
   831  00FC0D  3005               	dw	12293
   832  00FC0F  3005               	dw	12293
   833  00FC11  F010               	dw	61456
   834  00FC13  F011               	dw	61457
   835  00FC15  F012               	dw	61458
   836  00FC17  3005               	dw	12293
   837  00FC19  3004               	dw	12292
   838  00FC1B  0000               	dw	0
   839  00FC1D  0000               	dw	0
   840  00FC1F  0000               	dw	0
   841  00FC21  0000               	dw	0
   842  00FC23                     __end_of_keyMap3Fn:
   843                           	opt stack 0
   844  00FC23                     _keyMap3:
   845                           	opt stack 0
   846  00FC23  3009               	dw	12297
   847  00FC25  3009               	dw	12297
   848  00FC27  3009               	dw	12297
   849  00FC29  3009               	dw	12297
   850  00FC2B  3004               	dw	12292
   851  00FC2D  3004               	dw	12292
   852  00FC2F  3004               	dw	12292
   853  00FC31  3004               	dw	12292
   854  00FC33  3008               	dw	12296
   855  00FC35  3008               	dw	12296
   856  00FC37  3008               	dw	12296
   857  00FC39  3008               	dw	12296
   858  00FC3B  0000               	dw	0
   859  00FC3D  0000               	dw	0
   860  00FC3F  0000               	dw	0
   861  00FC41  0000               	dw	0
   862  00FC43  3009               	dw	12297
   863  00FC45  3009               	dw	12297
   864  00FC47  3009               	dw	12297
   865  00FC49  3009               	dw	12297
   866  00FC4B  3004               	dw	12292
   867  00FC4D  3004               	dw	12292
   868  00FC4F  3004               	dw	12292
   869  00FC51  3004               	dw	12292
   870  00FC53  3008               	dw	12296
   871  00FC55  3008               	dw	12296
   872  00FC57  3008               	dw	12296
   873  00FC59  3008               	dw	12296
   874  00FC5B  0000               	dw	0
   875  00FC5D  0000               	dw	0
   876  00FC5F  0000               	dw	0
   877  00FC61  0000               	dw	0
   878  00FC63  3009               	dw	12297
   879  00FC65  3009               	dw	12297
   880  00FC67  3009               	dw	12297
   881  00FC69  3009               	dw	12297
   882  00FC6B  3007               	dw	12295
   883  00FC6D  3007               	dw	12295
   884  00FC6F  3007               	dw	12295
   885  00FC71  3007               	dw	12295
   886  00FC73  3008               	dw	12296
   887  00FC75  3008               	dw	12296
   888  00FC77  3008               	dw	12296
   889  00FC79  3008               	dw	12296
   890  00FC7B  0000               	dw	0
   891  00FC7D  0000               	dw	0
   892  00FC7F  0000               	dw	0
   893  00FC81  0000               	dw	0
   894  00FC83  3009               	dw	12297
   895  00FC85  3009               	dw	12297
   896  00FC87  3009               	dw	12297
   897  00FC89  3009               	dw	12297
   898  00FC8B  3007               	dw	12295
   899  00FC8D  3007               	dw	12295
   900  00FC8F  3007               	dw	12295
   901  00FC91  3007               	dw	12295
   902  00FC93  3008               	dw	12296
   903  00FC95  3008               	dw	12296
   904  00FC97  3008               	dw	12296
   905  00FC99  3008               	dw	12296
   906  00FC9B  0000               	dw	0
   907  00FC9D  0000               	dw	0
   908  00FC9F  0000               	dw	0
   909  00FCA1  0000               	dw	0
   910  00FCA3  3009               	dw	12297
   911  00FCA5  3009               	dw	12297
   912  00FCA7  3009               	dw	12297
   913  00FCA9  3009               	dw	12297
   914  00FCAB  3005               	dw	12293
   915  00FCAD  3005               	dw	12293
   916  00FCAF  3005               	dw	12293
   917  00FCB1  3005               	dw	12293
   918  00FCB3  F003               	dw	61443
   919  00FCB5  3008               	dw	12296
   920  00FCB7  3008               	dw	12296
   921  00FCB9  3008               	dw	12296
   922  00FCBB  0000               	dw	0
   923  00FCBD  0000               	dw	0
   924  00FCBF  0000               	dw	0
   925  00FCC1  0000               	dw	0
   926  00FCC3  0000               	dw	0
   927  00FCC5  0000               	dw	0
   928  00FCC7  3009               	dw	12297
   929  00FCC9  3009               	dw	12297
   930  00FCCB  3005               	dw	12293
   931  00FCCD  3005               	dw	12293
   932  00FCCF  3005               	dw	12293
   933  00FCD1  3005               	dw	12293
   934  00FCD3  0000               	dw	0
   935  00FCD5  0000               	dw	0
   936  00FCD7  3005               	dw	12293
   937  00FCD9  3004               	dw	12292
   938  00FCDB  0000               	dw	0
   939  00FCDD  0000               	dw	0
   940  00FCDF  0000               	dw	0
   941  00FCE1  0000               	dw	0
   942  00FCE3                     __end_of_keyMap3:
   943                           	opt stack 0
   944  00FCE3                     _keyMap2Fn:
   945                           	opt stack 0
   946  00FCE3  0050               	dw	80
   947  00FCE5  0050               	dw	80
   948  00FCE7  0050               	dw	80
   949  00FCE9  0050               	dw	80
   950  00FCEB  F024               	dw	61476
   951  00FCED  F024               	dw	61476
   952  00FCEF  F024               	dw	61476
   953  00FCF1  F024               	dw	61476
   954  00FCF3  004F               	dw	79
   955  00FCF5  004F               	dw	79
   956  00FCF7  004F               	dw	79
   957  00FCF9  004F               	dw	79
   958  00FCFB  0000               	dw	0
   959  00FCFD  0000               	dw	0
   960  00FCFF  0000               	dw	0
   961  00FD01  0000               	dw	0
   962  00FD03  0050               	dw	80
   963  00FD05  0050               	dw	80
   964  00FD07  0050               	dw	80
   965  00FD09  0050               	dw	80
   966  00FD0B  F024               	dw	61476
   967  00FD0D  F024               	dw	61476
   968  00FD0F  F024               	dw	61476
   969  00FD11  F024               	dw	61476
   970  00FD13  004F               	dw	79
   971  00FD15  004F               	dw	79
   972  00FD17  004F               	dw	79
   973  00FD19  004F               	dw	79
   974  00FD1B  0000               	dw	0
   975  00FD1D  0000               	dw	0
   976  00FD1F  0000               	dw	0
   977  00FD21  0000               	dw	0
   978  00FD23  0050               	dw	80
   979  00FD25  0050               	dw	80
   980  00FD27  0050               	dw	80
   981  00FD29  0050               	dw	80
   982  00FD2B  F024               	dw	61476
   983  00FD2D  F024               	dw	61476
   984  00FD2F  F024               	dw	61476
   985  00FD31  F024               	dw	61476
   986  00FD33  004F               	dw	79
   987  00FD35  004F               	dw	79
   988  00FD37  004F               	dw	79
   989  00FD39  004F               	dw	79
   990  00FD3B  0000               	dw	0
   991  00FD3D  0000               	dw	0
   992  00FD3F  0000               	dw	0
   993  00FD41  0000               	dw	0
   994  00FD43  0050               	dw	80
   995  00FD45  0050               	dw	80
   996  00FD47  0050               	dw	80
   997  00FD49  0050               	dw	80
   998  00FD4B  F024               	dw	61476
   999  00FD4D  F024               	dw	61476
  1000  00FD4F  F024               	dw	61476
  1001  00FD51  F024               	dw	61476
  1002  00FD53  004F               	dw	79
  1003  00FD55  004F               	dw	79
  1004  00FD57  004F               	dw	79
  1005  00FD59  004F               	dw	79
  1006  00FD5B  0000               	dw	0
  1007  00FD5D  0000               	dw	0
  1008  00FD5F  0000               	dw	0
  1009  00FD61  0000               	dw	0
  1010  00FD63  0000               	dw	0
  1011  00FD65  0000               	dw	0
  1012  00FD67  0000               	dw	0
  1013  00FD69  0000               	dw	0
  1014  00FD6B  0000               	dw	0
  1015  00FD6D  0000               	dw	0
  1016  00FD6F  0000               	dw	0
  1017  00FD71  0000               	dw	0
  1018  00FD73  F003               	dw	61443
  1019  00FD75  0000               	dw	0
  1020  00FD77  0000               	dw	0
  1021  00FD79  0000               	dw	0
  1022  00FD7B  0000               	dw	0
  1023  00FD7D  0000               	dw	0
  1024  00FD7F  0000               	dw	0
  1025  00FD81  0000               	dw	0
  1026  00FD83  F020               	dw	61472
  1027  00FD85  F022               	dw	61474
  1028  00FD87  5005               	dw	20485
  1029  00FD89  5004               	dw	20484
  1030  00FD8B  0000               	dw	0
  1031  00FD8D  0000               	dw	0
  1032  00FD8F  0000               	dw	0
  1033  00FD91  F010               	dw	61456
  1034  00FD93  F011               	dw	61457
  1035  00FD95  F012               	dw	61458
  1036  00FD97  3005               	dw	12293
  1037  00FD99  3004               	dw	12292
  1038  00FD9B  0000               	dw	0
  1039  00FD9D  0000               	dw	0
  1040  00FD9F  0000               	dw	0
  1041  00FDA1  0000               	dw	0
  1042  00FDA3                     __end_of_keyMap2Fn:
  1043                           	opt stack 0
  1044  00FDA3                     _keyMap2:
  1045                           	opt stack 0
  1046  00FDA3  0000               	dw	0
  1047  00FDA5  4011               	dw	16401
  1048  00FDA7  4010               	dw	16400
  1049  00FDA9  4010               	dw	16400
  1050  00FDAB  4010               	dw	16400
  1051  00FDAD  4017               	dw	16407
  1052  00FDAF  0000               	dw	0
  1053  00FDB1  5001               	dw	20481
  1054  00FDB3  5001               	dw	20481
  1055  00FDB5  5001               	dw	20481
  1056  00FDB7  5003               	dw	20483
  1057  00FDB9  5003               	dw	20483
  1058  00FDBB  0000               	dw	0
  1059  00FDBD  0000               	dw	0
  1060  00FDBF  0000               	dw	0
  1061  00FDC1  0000               	dw	0
  1062  00FDC3  0000               	dw	0
  1063  00FDC5  4012               	dw	16402
  1064  00FDC7  4001               	dw	16385
  1065  00FDC9  4000               	dw	16384
  1066  00FDCB  4007               	dw	16391
  1067  00FDCD  4016               	dw	16406
  1068  00FDCF  0000               	dw	0
  1069  00FDD1  5001               	dw	20481
  1070  00FDD3  5001               	dw	20481
  1071  00FDD5  5001               	dw	20481
  1072  00FDD7  5003               	dw	20483
  1073  00FDD9  5003               	dw	20483
  1074  00FDDB  0000               	dw	0
  1075  00FDDD  0000               	dw	0
  1076  00FDDF  0000               	dw	0
  1077  00FDE1  0000               	dw	0
  1078  00FDE3  0000               	dw	0
  1079  00FDE5  4012               	dw	16402
  1080  00FDE7  4002               	dw	16386
  1081  00FDE9  0000               	dw	0
  1082  00FDEB  4006               	dw	16390
  1083  00FDED  4016               	dw	16406
  1084  00FDEF  0000               	dw	0
  1085  00FDF1  5001               	dw	20481
  1086  00FDF3  5001               	dw	20481
  1087  00FDF5  5001               	dw	20481
  1088  00FDF7  5003               	dw	20483
  1089  00FDF9  5003               	dw	20483
  1090  00FDFB  0000               	dw	0
  1091  00FDFD  0000               	dw	0
  1092  00FDFF  0000               	dw	0
  1093  00FE01  0000               	dw	0
  1094  00FE03  0000               	dw	0
  1095  00FE05  4012               	dw	16402
  1096  00FE07  4003               	dw	16387
  1097  00FE09  4004               	dw	16388
  1098  00FE0B  4005               	dw	16389
  1099  00FE0D  4016               	dw	16406
  1100  00FE0F  0000               	dw	0
  1101  00FE11  0000               	dw	0
  1102  00FE13  0000               	dw	0
  1103  00FE15  0000               	dw	0
  1104  00FE17  5002               	dw	20482
  1105  00FE19  5002               	dw	20482
  1106  00FE1B  0000               	dw	0
  1107  00FE1D  0000               	dw	0
  1108  00FE1F  0000               	dw	0
  1109  00FE21  0000               	dw	0
  1110  00FE23  0000               	dw	0
  1111  00FE25  4013               	dw	16403
  1112  00FE27  4014               	dw	16404
  1113  00FE29  4014               	dw	16404
  1114  00FE2B  4014               	dw	16404
  1115  00FE2D  4015               	dw	16405
  1116  00FE2F  0000               	dw	0
  1117  00FE31  40F0               	dw	16624
  1118  00FE33  F003               	dw	61443
  1119  00FE35  0000               	dw	0
  1120  00FE37  5002               	dw	20482
  1121  00FE39  5002               	dw	20482
  1122  00FE3B  0000               	dw	0
  1123  00FE3D  0000               	dw	0
  1124  00FE3F  0000               	dw	0
  1125  00FE41  0000               	dw	0
  1126  00FE43  40F0               	dw	16624
  1127  00FE45  40F1               	dw	16625
  1128  00FE47  0000               	dw	0
  1129  00FE49  0000               	dw	0
  1130  00FE4B  0000               	dw	0
  1131  00FE4D  0000               	dw	0
  1132  00FE4F  0000               	dw	0
  1133  00FE51  40F1               	dw	16625
  1134  00FE53  0000               	dw	0
  1135  00FE55  0000               	dw	0
  1136  00FE57  40F1               	dw	16625
  1137  00FE59  40F0               	dw	16624
  1138  00FE5B  0000               	dw	0
  1139  00FE5D  0000               	dw	0
  1140  00FE5F  0000               	dw	0
  1141  00FE61  0000               	dw	0
  1142  00FE63                     __end_of_keyMap2:
  1143                           	opt stack 0
  1144  00FE63                     _keyMap1Fn:
  1145                           	opt stack 0
  1146  00FE63  003A               	dw	58
  1147  00FE65  003B               	dw	59
  1148  00FE67  003C               	dw	60
  1149  00FE69  003D               	dw	61
  1150  00FE6B  003E               	dw	62
  1151  00FE6D  003F               	dw	63
  1152  00FE6F  0040               	dw	64
  1153  00FE71  0041               	dw	65
  1154  00FE73  0042               	dw	66
  1155  00FE75  0043               	dw	67
  1156  00FE77  0044               	dw	68
  1157  00FE79  0045               	dw	69
  1158  00FE7B  0000               	dw	0
  1159  00FE7D  0000               	dw	0
  1160  00FE7F  0000               	dw	0
  1161  00FE81  0000               	dw	0
  1162  00FE83  002B               	dw	43
  1163  00FE85  6172               	dw	24946
  1164  00FE87  001A               	dw	26
  1165  00FE89  0008               	dw	8
  1166  00FE8B  6251               	dw	25169
  1167  00FE8D  0017               	dw	23
  1168  00FE8F  001C               	dw	28
  1169  00FE91  6230               	dw	25136
  1170  00FE93  6227               	dw	25127
  1171  00FE95  6234               	dw	25140
  1172  00FE97  6241               	dw	25153
  1173  00FE99  002A               	dw	42
  1174  00FE9B  0000               	dw	0
  1175  00FE9D  0000               	dw	0
  1176  00FE9F  0000               	dw	0
  1177  00FEA1  0000               	dw	0
  1178  00FEA3  F023               	dw	61475
  1179  00FEA5  0004               	dw	4
  1180  00FEA7  6253               	dw	25171
  1181  00FEA9  6246               	dw	25158
  1182  00FEAB  0009               	dw	9
  1183  00FEAD  000A               	dw	10
  1184  00FEAF  6171               	dw	24945
  1185  00FEB1  000D               	dw	13
  1186  00FEB3  000E               	dw	14
  1187  00FEB5  000F               	dw	15
  1188  00FEB7  004C               	dw	76
  1189  00FEB9  0028               	dw	40
  1190  00FEBB  0000               	dw	0
  1191  00FEBD  0000               	dw	0
  1192  00FEBF  0000               	dw	0
  1193  00FEC1  0000               	dw	0
  1194  00FEC3  1001               	dw	4097
  1195  00FEC5  001D               	dw	29
  1196  00FEC7  001B               	dw	27
  1197  00FEC9  0006               	dw	6
  1198  00FECB  0019               	dw	25
  1199  00FECD  0005               	dw	5
  1200  00FECF  0011               	dw	17
  1201  00FED1  0010               	dw	16
  1202  00FED3  6243               	dw	25155
  1203  00FED5  6242               	dw	25154
  1204  00FED7  4000               	dw	16384
  1205  00FED9  1005               	dw	4101
  1206  00FEDB  0000               	dw	0
  1207  00FEDD  0000               	dw	0
  1208  00FEDF  0000               	dw	0
  1209  00FEE1  0000               	dw	0
  1210  00FEE3  1000               	dw	4096
  1211  00FEE5  1003               	dw	4099
  1212  00FEE7  1002               	dw	4098
  1213  00FEE9  F002               	dw	61442
  1214  00FEEB  0035               	dw	53
  1215  00FEED  002F               	dw	47
  1216  00FEEF  0030               	dw	48
  1217  00FEF1  0053               	dw	83
  1218  00FEF3  F003               	dw	61443
  1219  00FEF5  4002               	dw	16386
  1220  00FEF7  4004               	dw	16388
  1221  00FEF9  4006               	dw	16390
  1222  00FEFB  0000               	dw	0
  1223  00FEFD  0000               	dw	0
  1224  00FEFF  0000               	dw	0
  1225  00FF01  0000               	dw	0
  1226  00FF03  F020               	dw	61472
  1227  00FF05  F022               	dw	61474
  1228  00FF07  002C               	dw	44
  1229  00FF09  0033               	dw	51
  1230  00FF0B  0034               	dw	52
  1231  00FF0D  0038               	dw	56
  1232  00FF0F  6157               	dw	24919
  1233  00FF11  F010               	dw	61456
  1234  00FF13  F011               	dw	61457
  1235  00FF15  F012               	dw	61458
  1236  00FF17  5003               	dw	20483
  1237  00FF19  5001               	dw	20481
  1238  00FF1B  0000               	dw	0
  1239  00FF1D  0000               	dw	0
  1240  00FF1F  0000               	dw	0
  1241  00FF21  0000               	dw	0
  1242  00FF23                     __end_of_keyMap1Fn:
  1243                           	opt stack 0
  1244  00FF23                     _keyMap1:
  1245                           	opt stack 0
  1246  00FF23  001E               	dw	30
  1247  00FF25  001F               	dw	31
  1248  00FF27  0020               	dw	32
  1249  00FF29  0021               	dw	33
  1250  00FF2B  0022               	dw	34
  1251  00FF2D  0023               	dw	35
  1252  00FF2F  0024               	dw	36
  1253  00FF31  0025               	dw	37
  1254  00FF33  0026               	dw	38
  1255  00FF35  0027               	dw	39
  1256  00FF37  002D               	dw	45
  1257  00FF39  002E               	dw	46
  1258  00FF3B  0000               	dw	0
  1259  00FF3D  0000               	dw	0
  1260  00FF3F  0000               	dw	0
  1261  00FF41  0000               	dw	0
  1262  00FF43  002B               	dw	43
  1263  00FF45  0014               	dw	20
  1264  00FF47  001A               	dw	26
  1265  00FF49  0008               	dw	8
  1266  00FF4B  0015               	dw	21
  1267  00FF4D  0017               	dw	23
  1268  00FF4F  001C               	dw	28
  1269  00FF51  0018               	dw	24
  1270  00FF53  000C               	dw	12
  1271  00FF55  0012               	dw	18
  1272  00FF57  0013               	dw	19
  1273  00FF59  002A               	dw	42
  1274  00FF5B  0000               	dw	0
  1275  00FF5D  0000               	dw	0
  1276  00FF5F  0000               	dw	0
  1277  00FF61  0000               	dw	0
  1278  00FF63  0029               	dw	41
  1279  00FF65  0004               	dw	4
  1280  00FF67  0016               	dw	22
  1281  00FF69  0007               	dw	7
  1282  00FF6B  0009               	dw	9
  1283  00FF6D  000A               	dw	10
  1284  00FF6F  000B               	dw	11
  1285  00FF71  000D               	dw	13
  1286  00FF73  000E               	dw	14
  1287  00FF75  000F               	dw	15
  1288  00FF77  004C               	dw	76
  1289  00FF79  0028               	dw	40
  1290  00FF7B  0000               	dw	0
  1291  00FF7D  0000               	dw	0
  1292  00FF7F  0000               	dw	0
  1293  00FF81  0000               	dw	0
  1294  00FF83  1001               	dw	4097
  1295  00FF85  001D               	dw	29
  1296  00FF87  001B               	dw	27
  1297  00FF89  0006               	dw	6
  1298  00FF8B  0019               	dw	25
  1299  00FF8D  0005               	dw	5
  1300  00FF8F  0011               	dw	17
  1301  00FF91  0010               	dw	16
  1302  00FF93  0036               	dw	54
  1303  00FF95  0037               	dw	55
  1304  00FF97  0052               	dw	82
  1305  00FF99  1005               	dw	4101
  1306  00FF9B  0000               	dw	0
  1307  00FF9D  0000               	dw	0
  1308  00FF9F  0000               	dw	0
  1309  00FFA1  0000               	dw	0
  1310  00FFA3  1000               	dw	4096
  1311  00FFA5  1003               	dw	4099
  1312  00FFA7  1002               	dw	4098
  1313  00FFA9  F002               	dw	61442
  1314  00FFAB  0035               	dw	53
  1315  00FFAD  002F               	dw	47
  1316  00FFAF  0030               	dw	48
  1317  00FFB1  0039               	dw	57
  1318  00FFB3  F003               	dw	61443
  1319  00FFB5  0050               	dw	80
  1320  00FFB7  0051               	dw	81
  1321  00FFB9  004F               	dw	79
  1322  00FFBB  0000               	dw	0
  1323  00FFBD  0000               	dw	0
  1324  00FFBF  0000               	dw	0
  1325  00FFC1  0000               	dw	0
  1326  00FFC3  F020               	dw	61472
  1327  00FFC5  F022               	dw	61474
  1328  00FFC7  002C               	dw	44
  1329  00FFC9  0033               	dw	51
  1330  00FFCB  0034               	dw	52
  1331  00FFCD  0038               	dw	56
  1332  00FFCF  0031               	dw	49
  1333  00FFD1  5001               	dw	20481
  1334  00FFD3  003E               	dw	62
  1335  00FFD5  5003               	dw	20483
  1336  00FFD7  40F1               	dw	16625
  1337  00FFD9  40F0               	dw	16624
  1338  00FFDB  0000               	dw	0
  1339  00FFDD  0000               	dw	0
  1340  00FFDF  0000               	dw	0
  1341  00FFE1  0000               	dw	0
  1342  00FFE3                     __end_of_keyMap1:
  1343                           	opt stack 0
  1344  00FFE3                     _connectedString:
  1345                           	opt stack 0
  1346  00FFE3  2D                 	db	45
  1347  00FFE4  43                 	db	67
  1348  00FFE5  4F                 	db	79
  1349  00FFE6  4E                 	db	78
  1350  00FFE7  4E                 	db	78
  1351  00FFE8  45                 	db	69
  1352  00FFE9  43                 	db	67
  1353  00FFEA  54                 	db	84
  1354  00FFEB  2C                 	db	44
  1355  00FFEC  00                 	db	0
  1356  00FFED                     __end_of_connectedString:
  1357                           	opt stack 0
  1358  0000                     _INT2PPSbits	set	3570
  1359  0000                     _ODCONE	set	3757
  1360  0000                     _ODCONC	set	3744
  1361  0000                     _ODCONB	set	3736
  1362  0000                     _SLRCONE	set	3756
  1363  0000                     _SLRCONC	set	3743
  1364  0000                     _SLRCONB	set	3735
  1365  0000                     _INLVLE	set	3755
  1366  0000                     _INLVLC	set	3742
  1367  0000                     _INLVLB	set	3734
  1368  0000                     _ANSELE	set	3759
  1369  0000                     _ANSELB	set	3738
  1370  0000                     _WPUE	set	3758
  1371  0000                     _WPUC	set	3745
  1372  0000                     _WPUB	set	3737
  1373  0000                     _TX5REG	set	3805
  1374  0000                     _TXSTA5bits	set	3809
  1375  0000                     _RC5REG	set	3804
  1376  0000                     _SP5BRGH	set	3807
  1377  0000                     _SP5BRGL	set	3806
  1378  0000                     _TX5STA	set	3809
  1379  0000                     _RC5STA	set	3808
  1380  0000                     _BAUD5CON	set	3810
  1381  0000                     _TX2REG	set	3826
  1382  0000                     _TXSTA2bits	set	3830
  1383  0000                     _RC2REG	set	3825
  1384  0000                     _SP2BRGH	set	3828
  1385  0000                     _SP2BRGL	set	3827
  1386  0000                     _TX2STA	set	3830
  1387  0000                     _RC2STA	set	3829
  1388  0000                     _BAUD2CON	set	3831
  1389  0000                     _PIE5bits	set	3630
  1390  0000                     _IPR5bits	set	3620
  1391  0000                     _IPR4bits	set	3619
  1392  0000                     _IPR3bits	set	3618
  1393  0000                     _FVRCON	set	3780
  1394  0000                     _RX5PPSbits	set	3607
  1395  0000                     _RG3PPS	set	3717
  1396  0000                     _RX2PPSbits	set	3601
  1397  0000                     _RG1PPS	set	3715
  1398  0000                     _IOCEN	set	3753
  1399  0000                     _IOCBN	set	3732
  1400  0000                     _IOCEF	set	3752
  1401  0000                     _IOCBF	set	3731
  1402  0000                     _PIE0bits	set	3625
  1403  0000                     _PIR0bits	set	3635
  1404  0000                     _IPR0bits	set	3615
  1405  0000                     _ODCONH	set	3775
  1406  0000                     _ODCONG	set	3770
  1407  0000                     _ODCONF	set	3762
  1408  0000                     _ODCONA	set	3728
  1409  0000                     _ODCOND	set	3749
  1410  0000                     _SLRCONH	set	3774
  1411  0000                     _SLRCONG	set	3769
  1412  0000                     _SLRCONF	set	3761
  1413  0000                     _SLRCONA	set	3727
  1414  0000                     _SLRCOND	set	3748
  1415  0000                     _INLVLH	set	3773
  1416  0000                     _INLVLG	set	3768
  1417  0000                     _INLVLF	set	3760
  1418  0000                     _INLVLA	set	3726
  1419  0000                     _INLVLD	set	3747
  1420  0000                     _WPUH	set	3776
  1421  0000                     _WPUG	set	3771
  1422  0000                     _WPUF	set	3763
  1423  0000                     _WPUA	set	3729
  1424  0000                     _WPUD	set	3750
  1425  0000                     _ANSELG	set	3772
  1426  0000                     _ANSELF	set	3764
  1427  0000                     _ANSELA	set	3730
  1428  0000                     _ANSELD	set	3751
  1429  0000                     _PMD0bits	set	3660
  1430  0000                     _PMD5	set	3665
  1431  0000                     _PMD4	set	3664
  1432  0000                     _PMD3	set	3663
  1433  0000                     _PMD2	set	3662
  1434  0000                     _PMD1	set	3661
  1435  0000                     _PMD0	set	3660
  1436  0000                     _OSCTUNE	set	3656
  1437  0000                     _OSCFRQ	set	3657
  1438  0000                     _OSCEN	set	3655
  1439  0000                     _OSCCON3	set	3653
  1440  0000                     _OSCCON1	set	3651
  1441  0000                     _PIE4bits	set	3629
  1442  0000                     _PIE3bits	set	3628
  1443  0000                     _RC5STAbits	set	3808
  1444  0000                     _PIR4bits	set	3639
  1445  0000                     _RC2STAbits	set	3829
  1446  0000                     _PIR3bits	set	3638
  1447  0000                     _PIR5bits	set	3640
  1448  0000                     _WPUF3	set	30107
  1449  0000                     _ADCLK	set	3927
  1450  0000                     _ADACT	set	3926
  1451  0000                     _ADREF	set	3928
  1452  0000                     _ADACQ	set	3932
  1453  0000                     _ADCON3	set	3931
  1454  0000                     _ADCON2	set	3930
  1455  0000                     _ADCON1	set	3929
  1456  0000                     _ADCAP	set	3933
  1457  0000                     _ADPCH	set	3935
  1458  0000                     _NVMADR	set	3956
  1459  0000                     _NVMCON2	set	3960
  1460  0000                     _NVMDAT	set	3958
  1461  0000                     _LATHbits	set	3968
  1462  0000                     _PORTB	set	3978
  1463  0000                     _PORTE	set	3981
  1464  0000                     _LATC	set	3963
  1465  0000                     _LATB	set	3962
  1466  0000                     _TRISC	set	3971
  1467  0000                     _TRISB	set	3970
  1468  0000                     _ADRESL	set	3939
  1469  0000                     _ADRESH	set	3940
  1470  0000                     _ADCON0bits	set	3936
  1471  0000                     _ADCON0	set	3936
  1472  0000                     _ADSTAT	set	3941
  1473  0000                     _ADRPT	set	3942
  1474  0000                     _ADSTPTH	set	3945
  1475  0000                     _ADSTPTL	set	3944
  1476  0000                     _ADUTHH	set	3949
  1477  0000                     _ADUTHL	set	3948
  1478  0000                     _ADLTHH	set	3947
  1479  0000                     _ADLTHL	set	3946
  1480  0000                     _PORTD	set	3980
  1481  0000                     _T3CON	set	4041
  1482  0000                     _TMR3CLK	set	4044
  1483  0000                     _T1CON	set	4047
  1484  0000                     _TMR1CLK	set	4050
  1485  0000                     _NVMCON1bits	set	3959
  1486  0000                     _TRISH	set	3976
  1487  0000                     _TRISG	set	3975
  1488  0000                     _TRISF	set	3974
  1489  0000                     _TRISA	set	3969
  1490  0000                     _TRISD	set	3972
  1491  0000                     _LATH	set	3968
  1492  0000                     _LATG	set	3967
  1493  0000                     _LATF	set	3966
  1494  0000                     _LATA	set	3961
  1495  0000                     _LATD	set	3964
  1496  0000                     _TRISE	set	3973
  1497  0000                     _LATE	set	3965
  1498  0000                     _INTCONbits	set	4082
  1499  0000                     _TMR3H	set	4040
  1500  0000                     _TMR1H	set	4046
  1501  0000                     _LATA1	set	31689
  1502  0000                     _LATA5	set	31693
  1503  0000                     _LATF3	set	31731
  1504  0000                     _RF3	set	31859
  1505  0000                     _TRISF3	set	31795
  1506  0000                     _RD6	set	31846
  1507  0000                     _LATF4	set	31732
  1508  0000                     _RF1	set	31857
  1509  0000                     _RD7	set	31847
  1510  0000                     _RF0	set	31856
  1511  0000                     _RF5	set	31861
  1512  0000                     _RF6	set	31862
  1513  0000                     _RF2	set	31858
  1514  0000                     _LATA4	set	31692
  1515  0000                     _LATF0	set	31728
  1516  0000                     _TRISF2	set	31794
  1517  0000                     _RF7	set	31863
  1518  00FFED                     STR_1:
  1519                           
  1520                           ; BSR set to: 14
  1521  00FFED  48                 	db	72	;'H'
  1522  00FFEE  65                 	db	101	;'e'
  1523  00FFEF  6C                 	db	108	;'l'
  1524  00FFF0  6C                 	db	108	;'l'
  1525  00FFF1  6F                 	db	111	;'o'
  1526  00FFF2  21                 	db	33
  1527  00FFF3  21                 	db	33
  1528  00FFF4  21                 	db	33
  1529  00FFF5  21                 	db	33
  1530  00FFF6  21                 	db	33
  1531  00FFF7  21                 	db	33
  1532  00FFF8  00                 	db	0
  1533  00FFF9                     STR_2:
  1534                           
  1535                           ; BSR set to: 14
  1536  00FFF9  56                 	db	86	;'V'
  1537  00FFFA  62                 	db	98	;'b'
  1538  00FFFB  61                 	db	97	;'a'
  1539  00FFFC  74                 	db	116	;'t'
  1540  00FFFD  3D                 	db	61	;'='
  1541  00FFFE  00                 	db	0
  1542                           
  1543                           ; #config settings
  1544  00FFFF  00                 	db	0	; dummy byte at the end
  1545  0000                     
  1546                           	psect	cinit
  1547  011D74                     __pcinit:
  1548                           	opt stack 0
  1549  011D74                     start_initialization:
  1550                           	opt stack 0
  1551  011D74                     __initialization:
  1552                           	opt stack 0
  1553                           
  1554                           ; NVMREG Errata
  1555  011D74                     	if	3959
  1556  011D74  8E77               	bsf	119,7,c
  1557  011D76  9C77               	bcf	119,6,c
  1558  011D78                     	endif
  1559                           
  1560                           ; Initialize objects allocated to BANK0 (14 bytes)
  1561                           ; load TBLPTR registers with __pidataBANK0
  1562  011D78  0EEA               	movlw	low __pidataBANK0
  1563  011D7A  6EF6               	movwf	tblptrl,c
  1564  011D7C  0E29               	movlw	high __pidataBANK0
  1565  011D7E  6EF7               	movwf	tblptrh,c
  1566  011D80  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1567  011D82  6EF8               	movwf	tblptru,c
  1568  011D84  EE00  F0EF         	lfsr	0,__pdataBANK0
  1569  011D88  EE10 F00E          	lfsr	1,14
  1570  011D8C                     copy_data0:
  1571  011D8C  0009               	tblrd		*+
  1572  011D8E  CFF5 FFEE          	movff	tablat,postinc0
  1573  011D92  50E5               	movf	postdec1,w,c
  1574  011D94  50E1               	movf	fsr1l,w,c
  1575  011D96  E1FA               	bnz	copy_data0
  1576                           
  1577                           ; Initialize objects allocated to COMRAM (3 bytes)
  1578                           ; load TBLPTR registers with __pidataCOMRAM
  1579  011D98  0E40               	movlw	low __pidataCOMRAM
  1580  011D9A  6EF6               	movwf	tblptrl,c
  1581  011D9C  0E2A               	movlw	high __pidataCOMRAM
  1582  011D9E  6EF7               	movwf	tblptrh,c
  1583  011DA0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1584  011DA2  6EF8               	movwf	tblptru,c
  1585  011DA4  0009               	tblrd		*+	;fetch initializer
  1586  011DA6  CFF5 F045          	movff	tablat,__pdataCOMRAM
  1587  011DAA  0009               	tblrd		*+	;fetch initializer
  1588  011DAC  CFF5 F046          	movff	tablat,__pdataCOMRAM+1
  1589  011DB0  0009               	tblrd		*+	;fetch initializer
  1590  011DB2  CFF5 F047          	movff	tablat,__pdataCOMRAM+2
  1591                           
  1592                           ; Clear objects allocated to BANK4 (256 bytes)
  1593  011DB6  EE04  F000         	lfsr	0,__pbssBANK4
  1594  011DBA  EE11 F000          	lfsr	1,256
  1595  011DBE                     clear_0:
  1596  011DBE  6AEE               	clrf	postinc0,c
  1597  011DC0  50E5               	movf	postdec1,w,c
  1598  011DC2  50E1               	movf	fsr1l,w,c
  1599  011DC4  E1FC               	bnz	clear_0
  1600  011DC6  50E2               	movf	fsr1h,w,c
  1601  011DC8  E1FA               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK3 (256 bytes)
  1604  011DCA  EE03  F000         	lfsr	0,__pbssBANK3
  1605  011DCE  EE11 F000          	lfsr	1,256
  1606  011DD2                     clear_1:
  1607  011DD2  6AEE               	clrf	postinc0,c
  1608  011DD4  50E5               	movf	postdec1,w,c
  1609  011DD6  50E1               	movf	fsr1l,w,c
  1610  011DD8  E1FC               	bnz	clear_1
  1611  011DDA  50E2               	movf	fsr1h,w,c
  1612  011DDC  E1FA               	bnz	clear_1
  1613                           
  1614                           ; Clear objects allocated to BANK2 (256 bytes)
  1615  011DDE  EE02  F000         	lfsr	0,__pbssBANK2
  1616  011DE2  EE11 F000          	lfsr	1,256
  1617  011DE6                     clear_2:
  1618  011DE6  6AEE               	clrf	postinc0,c
  1619  011DE8  50E5               	movf	postdec1,w,c
  1620  011DEA  50E1               	movf	fsr1l,w,c
  1621  011DEC  E1FC               	bnz	clear_2
  1622  011DEE  50E2               	movf	fsr1h,w,c
  1623  011DF0  E1FA               	bnz	clear_2
  1624                           
  1625                           ; Clear objects allocated to BANK1 (256 bytes)
  1626  011DF2  EE01  F000         	lfsr	0,__pbssBANK1
  1627  011DF6  EE11 F000          	lfsr	1,256
  1628  011DFA                     clear_3:
  1629  011DFA  6AEE               	clrf	postinc0,c
  1630  011DFC  50E5               	movf	postdec1,w,c
  1631  011DFE  50E1               	movf	fsr1l,w,c
  1632  011E00  E1FC               	bnz	clear_3
  1633  011E02  50E2               	movf	fsr1h,w,c
  1634  011E04  E1FA               	bnz	clear_3
  1635                           
  1636                           ; Clear objects allocated to BANK0 (119 bytes)
  1637  011E06  EE00  F060         	lfsr	0,__pbssBANK0
  1638  011E0A  0E77               	movlw	119
  1639  011E0C                     clear_4:
  1640  011E0C  6AEE               	clrf	postinc0,c
  1641  011E0E  06E8               	decf	wreg,f,c
  1642  011E10  E1FD               	bnz	clear_4
  1643                           
  1644                           ; Clear objects allocated to COMRAM (33 bytes)
  1645  011E12  EE00  F024         	lfsr	0,__pbssCOMRAM
  1646  011E16  0E21               	movlw	33
  1647  011E18                     clear_5:
  1648  011E18  6AEE               	clrf	postinc0,c
  1649  011E1A  06E8               	decf	wreg,f,c
  1650  011E1C  E1FD               	bnz	clear_5
  1651  011E1E                     end_of_initialization:
  1652                           	opt stack 0
  1653  011E1E                     __end_of__initialization:
  1654                           	opt stack 0
  1655  011E1E  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1656  011E20  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1657  011E22  0100               	movlb	0
  1658  011E24  EF31  F083         	goto	_main	;jump to C main() function
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           postinc0	equ	0xFEE
  1664                           wreg	equ	0xFE8
  1665                           postdec1	equ	0xFE5
  1666                           fsr1h	equ	0xFE2
  1667                           fsr1l	equ	0xFE1
  1668                           
  1669                           	psect	bssCOMRAM
  1670  000024                     __pbssCOMRAM:
  1671                           	opt stack 0
  1672  000024                     _sleepCountDown:
  1673                           	opt stack 0
  1674  000024                     	ds	4
  1675  000028                     _time:
  1676                           	opt stack 0
  1677  000028                     	ds	4
  1678  00002C                     _consumerKey:
  1679                           	opt stack 0
  1680  00002C                     	ds	2
  1681  00002E                     _altCode:
  1682                           	opt stack 0
  1683  00002E                     	ds	2
  1684  000030                     sw1Process@sw1Count2:
  1685                           	opt stack 0
  1686  000030                     	ds	2
  1687  000032                     _mainFlags:
  1688                           	opt stack 0
  1689  000032                     	ds	2
  1690  000034                     sw1Process@sw1State:
  1691                           	opt stack 0
  1692  000034                     	ds	1
  1693  000035                     sw1Process@sw1Count:
  1694                           	opt stack 0
  1695  000035                     	ds	1
  1696  000036                     ledMatrixProcess@c:
  1697                           	opt stack 0
  1698  000036                     	ds	1
  1699  000037                     _connectedStringIndex:
  1700                           	opt stack 0
  1701  000037                     	ds	1
  1702  000038                     _outputReportReceived:
  1703                           	opt stack 0
  1704  000038                     	ds	1
  1705  000039                     _bufU5_main:
  1706                           	opt stack 0
  1707  000039                     	ds	4
  1708  00003D                     _bufU2_main:
  1709                           	opt stack 0
  1710  00003D                     	ds	4
  1711  000041                     _bufU5_intH:
  1712                           	opt stack 0
  1713  000041                     	ds	4
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1h	equ	0xFE2
  1722                           fsr1l	equ	0xFE1
  1723                           
  1724                           	psect	dataCOMRAM
  1725  000045                     __pdataCOMRAM:
  1726                           	opt stack 0
  1727  000045                     _lastPush:
  1728                           	opt stack 0
  1729  000045                     	ds	1
  1730  000046                     _firstPush:
  1731                           	opt stack 0
  1732  000046                     	ds	1
  1733  000047                     _mouseSpeed:
  1734                           	opt stack 0
  1735  000047                     	ds	1
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	bssBANK0
  1747  000060                     __pbssBANK0:
  1748                           	opt stack 0
  1749  000060                     _sw:
  1750                           	opt stack 0
  1751  000060                     	ds	12
  1752  00006C                     _led:
  1753                           	opt stack 0
  1754  00006C                     	ds	12
  1755  000078                     _keyReport:
  1756                           	opt stack 0
  1757  000078                     	ds	10
  1758  000082                     _mouseReport:
  1759                           	opt stack 0
  1760  000082                     	ds	4
  1761  000086                     _BtGPIO5LowCount:
  1762                           	opt stack 0
  1763  000086                     	ds	2
  1764  000088                     _BtConnected:
  1765                           	opt stack 0
  1766  000088                     	ds	1
  1767  000089                     _fnEnable:
  1768                           	opt stack 0
  1769  000089                     	ds	1
  1770  00008A                     _fnEnableLatch:
  1771                           	opt stack 0
  1772  00008A                     	ds	1
  1773  00008B                     _keyMode:
  1774                           	opt stack 0
  1775  00008B                     	ds	1
  1776  00008C                     _sawToothWave:
  1777                           	opt stack 0
  1778  00008C                     	ds	1
  1779  00008D                     _mSw:
  1780                           	opt stack 0
  1781  00008D                     	ds	70
  1782  0000D3                     _bufU2_intH:
  1783                           	opt stack 0
  1784  0000D3                     	ds	4
  1785                           tblptru	equ	0xFF8
  1786                           tblptrh	equ	0xFF7
  1787                           tblptrl	equ	0xFF6
  1788                           tablat	equ	0xFF5
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           
  1795                           	psect	dataBANK0
  1796  0000EF                     __pdataBANK0:
  1797                           	opt stack 0
  1798  0000EF                     _keyMapList:
  1799                           	opt stack 0
  1800  0000EF                     	ds	12
  1801  0000FB                     _volt:
  1802                           	opt stack 0
  1803  0000FB                     	ds	2
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1h	equ	0xFE2
  1812                           fsr1l	equ	0xFE1
  1813                           
  1814                           	psect	bssBANK1
  1815  000100                     __pbssBANK1:
  1816                           	opt stack 0
  1817  000100                     _b1:
  1818                           	opt stack 0
  1819  000100                     	ds	256
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           postinc0	equ	0xFEE
  1825                           wreg	equ	0xFE8
  1826                           postdec1	equ	0xFE5
  1827                           fsr1h	equ	0xFE2
  1828                           fsr1l	equ	0xFE1
  1829                           
  1830                           	psect	bssBANK2
  1831  000200                     __pbssBANK2:
  1832                           	opt stack 0
  1833  000200                     _b3:
  1834                           	opt stack 0
  1835  000200                     	ds	256
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           
  1846                           	psect	bssBANK3
  1847  000300                     __pbssBANK3:
  1848                           	opt stack 0
  1849  000300                     _b4:
  1850                           	opt stack 0
  1851  000300                     	ds	256
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           
  1862                           	psect	bssBANK4
  1863  000400                     __pbssBANK4:
  1864                           	opt stack 0
  1865  000400                     _b6:
  1866                           	opt stack 0
  1867  000400                     	ds	256
  1868                           tblptru	equ	0xFF8
  1869                           tblptrh	equ	0xFF7
  1870                           tblptrl	equ	0xFF6
  1871                           tablat	equ	0xFF5
  1872                           postinc0	equ	0xFEE
  1873                           wreg	equ	0xFE8
  1874                           postdec1	equ	0xFE5
  1875                           fsr1h	equ	0xFE2
  1876                           fsr1l	equ	0xFE1
  1877                           
  1878                           	psect	cstackBANK5
  1879  000500                     __pcstackBANK5:
  1880                           	opt stack 0
  1881  000500                     ??_main:
  1882                           
  1883                           ; 1 bytes @ 0x0
  1884  000500                     	ds	6
  1885  000506                     _main$727:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x6
  1889  000506                     	ds	1
  1890  000507                     _main$728:
  1891                           	opt stack 0
  1892                           
  1893                           ; 1 bytes @ 0x7
  1894  000507                     	ds	1
  1895  000508                     _main$729:
  1896                           	opt stack 0
  1897                           
  1898                           ; 1 bytes @ 0x8
  1899  000508                     	ds	1
  1900  000509                     _main$730:
  1901                           	opt stack 0
  1902                           
  1903                           ; 1 bytes @ 0x9
  1904  000509                     	ds	1
  1905  00050A                     main@c:
  1906                           	opt stack 0
  1907                           
  1908                           ; 1 bytes @ 0xA
  1909  00050A                     	ds	1
  1910  00050B                     main@c_700:
  1911                           	opt stack 0
  1912                           
  1913                           ; 1 bytes @ 0xB
  1914  00050B                     	ds	1
  1915  00050C                     main@c_701:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0xC
  1919  00050C                     	ds	1
  1920  00050D                     main@c_731:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0xD
  1924  00050D                     	ds	1
  1925  00050E                     main@c_732:
  1926                           	opt stack 0
  1927                           
  1928                           ; 1 bytes @ 0xE
  1929  00050E                     	ds	1
  1930                           tblptru	equ	0xFF8
  1931                           tblptrh	equ	0xFF7
  1932                           tblptrl	equ	0xFF6
  1933                           tablat	equ	0xFF5
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1h	equ	0xFE2
  1938                           fsr1l	equ	0xFE1
  1939                           
  1940                           	psect	cstackBANK0
  1941  0000D7                     __pcstackBANK0:
  1942                           	opt stack 0
  1943  0000D7                     ??_setXY:
  1944  0000D7                     ??_swRelease:
  1945  0000D7                     ??_swPush:
  1946  0000D7                     ??_swRegister:
  1947  0000D7                     ?_ADCC_GetSingleConversion:
  1948                           	opt stack 0
  1949  0000D7                     ?___wmul:
  1950                           	opt stack 0
  1951  0000D7                     ?___lwdiv:
  1952                           	opt stack 0
  1953  0000D7                     ?___lmul:
  1954                           	opt stack 0
  1955  0000D7                     GetChgState@ret:
  1956                           	opt stack 0
  1957  0000D7                     InitUiBoardIO@c:
  1958                           	opt stack 0
  1959  0000D7                     bufWriteIntH@b:
  1960                           	opt stack 0
  1961  0000D7                     bufInit@b:
  1962                           	opt stack 0
  1963  0000D7                     WriteEEPROM@address:
  1964                           	opt stack 0
  1965  0000D7                     ReadEEPROM@address:
  1966                           	opt stack 0
  1967  0000D7                     ___wmul@multiplier:
  1968                           	opt stack 0
  1969  0000D7                     ___lwdiv@dividend:
  1970                           	opt stack 0
  1971  0000D7                     waitMs@t:
  1972                           	opt stack 0
  1973  0000D7                     ___lmul@multiplier:
  1974                           	opt stack 0
  1975                           
  1976                           ; 4 bytes @ 0x0
  1977  0000D7                     	ds	1
  1978  0000D8                     setScanCodes@e:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x1
  1982  0000D8                     	ds	1
  1983  0000D9                     ??_ADCC_GetSingleConversion:
  1984  0000D9                     bufWriteIntH@d:
  1985                           	opt stack 0
  1986  0000D9                     swRegister@sameCol:
  1987                           	opt stack 0
  1988  0000D9                     WriteEEPROM@d:
  1989                           	opt stack 0
  1990  0000D9                     ReadEEPROM@GIE_t:
  1991                           	opt stack 0
  1992  0000D9                     bufInit@buf:
  1993                           	opt stack 0
  1994  0000D9                     setScanCodes@kc:
  1995                           	opt stack 0
  1996  0000D9                     ___wmul@multiplicand:
  1997                           	opt stack 0
  1998  0000D9                     ___lwdiv@divisor:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x2
  2002  0000D9                     	ds	1
  2003  0000DA                     ??_bufWriteIntH:
  2004  0000DA                     swRegister@sameRow:
  2005                           	opt stack 0
  2006  0000DA                     WriteEEPROM@GIE_t:
  2007                           	opt stack 0
  2008  0000DA                     ReadEEPROM@d:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x3
  2012  0000DA                     	ds	1
  2013  0000DB                     ??_waitMs:
  2014  0000DB                     ADCC_GetSingleConversion@channel:
  2015                           	opt stack 0
  2016  0000DB                     swRegister@n:
  2017                           	opt stack 0
  2018  0000DB                     setScanCodes@c:
  2019                           	opt stack 0
  2020  0000DB                     ___lwdiv@counter:
  2021                           	opt stack 0
  2022  0000DB                     ___wmul@product:
  2023                           	opt stack 0
  2024  0000DB                     ___lmul@multiplicand:
  2025                           	opt stack 0
  2026                           
  2027                           ; 4 bytes @ 0x4
  2028  0000DB                     	ds	1
  2029  0000DC                     swRegister@d:
  2030                           	opt stack 0
  2031  0000DC                     swRelease@c:
  2032                           	opt stack 0
  2033  0000DC                     setScanCodes@d:
  2034                           	opt stack 0
  2035  0000DC                     ___lwdiv@quotient:
  2036                           	opt stack 0
  2037                           
  2038                           ; 2 bytes @ 0x5
  2039  0000DC                     	ds	1
  2040  0000DD                     ??_swUnregister:
  2041  0000DD                     ?_GetFuel:
  2042                           	opt stack 0
  2043  0000DD                     swRegister@d_1749:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x6
  2047  0000DD                     	ds	1
  2048  0000DE                     ?___lwmod:
  2049                           	opt stack 0
  2050  0000DE                     swUnregister@c:
  2051                           	opt stack 0
  2052  0000DE                     swRegister@c:
  2053                           	opt stack 0
  2054  0000DE                     _swPush$1888:
  2055                           	opt stack 0
  2056  0000DE                     setXY@kc:
  2057                           	opt stack 0
  2058  0000DE                     ___lwmod@dividend:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x7
  2062  0000DE                     	ds	1
  2063  0000DF                     ??_GetFuel:
  2064  0000DF                     ___lmul@product:
  2065                           	opt stack 0
  2066                           
  2067                           ; 4 bytes @ 0x8
  2068  0000DF                     	ds	1
  2069  0000E0                     setXY@c:
  2070                           	opt stack 0
  2071  0000E0                     GetFuel@r:
  2072                           	opt stack 0
  2073  0000E0                     _swPush$1889:
  2074                           	opt stack 0
  2075  0000E0                     ___lwmod@divisor:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x9
  2079  0000E0                     	ds	2
  2080  0000E2                     swPush@c:
  2081                           	opt stack 0
  2082  0000E2                     ___lwmod@counter:
  2083                           	opt stack 0
  2084  0000E2                     GetFuel@ret:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0xB
  2088  0000E2                     	ds	1
  2089  0000E3                     ??_swProcess:
  2090  0000E3                     setSleepDelay@second:
  2091                           	opt stack 0
  2092  0000E3                     bufWrite@b:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0xC
  2096  0000E3                     	ds	1
  2097  0000E4                     GetFuel@c:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0xD
  2101  0000E4                     	ds	1
  2102  0000E5                     setSleepDelay@gie:
  2103                           	opt stack 0
  2104  0000E5                     bufWrite@d:
  2105                           	opt stack 0
  2106                           
  2107                           ; 1 bytes @ 0xE
  2108  0000E5                     	ds	1
  2109  0000E6                     ??_bufWrite:
  2110  0000E6                     setSleepDelay@t:
  2111                           	opt stack 0
  2112                           
  2113                           ; 4 bytes @ 0xF
  2114  0000E6                     	ds	3
  2115  0000E9                     ??_sendAltCode:
  2116  0000E9                     swProcess@col:
  2117                           	opt stack 0
  2118  0000E9                     showText@text:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x12
  2122  0000E9                     	ds	1
  2123  0000EA                     swProcess@sw2:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x13
  2127  0000EA                     	ds	1
  2128  0000EB                     showState@v:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x14
  2132  0000EB                     	ds	1
  2133  0000EC                     sendAltCode@temp:
  2134                           	opt stack 0
  2135  0000EC                     swProcess@row:
  2136                           	opt stack 0
  2137                           
  2138                           ; 1 bytes @ 0x15
  2139  0000EC                     	ds	1
  2140  0000ED                     swProcess@c:
  2141                           	opt stack 0
  2142  0000ED                     showBatteryState@v:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x16
  2146  0000ED                     	ds	2
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1h	equ	0xFE2
  2155                           fsr1l	equ	0xFE1
  2156                           
  2157                           	psect	cstackCOMRAM
  2158  000001                     __pcstackCOMRAM:
  2159                           	opt stack 0
  2160  000001                     ??_ledMatrixProcess:
  2161  000001                     ?_strlen:
  2162                           	opt stack 0
  2163  000001                     strlen@s:
  2164                           	opt stack 0
  2165  000001                     i2bufWriteIntH@b:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x0
  2169  000001                     	ds	2
  2170  000003                     ??_strlen:
  2171  000003                     i2bufWriteIntH@d:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x2
  2175  000003                     	ds	1
  2176  000004                     ??i2_bufWriteIntH:
  2177                           
  2178                           ; 1 bytes @ 0x3
  2179  000004                     	ds	1
  2180  000005                     strlen@a:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x4
  2184  000005                     	ds	2
  2185  000007                     ??_high_isr:
  2186                           
  2187                           ; 1 bytes @ 0x6
  2188  000007                     	ds	12
  2189  000013                     high_isr@c:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x12
  2193  000013                     	ds	1
  2194  000014                     high_isr@c_389:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x13
  2198  000014                     	ds	1
  2199  000015                     EUSART2_Write@txData:
  2200                           	opt stack 0
  2201  000015                     EUSART5_Write@txData:
  2202                           	opt stack 0
  2203  000015                     bufRead@b:
  2204                           	opt stack 0
  2205  000015                     bufClear@b:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x14
  2209  000015                     	ds	1
  2210  000016                     SendCharUSB@d:
  2211                           	opt stack 0
  2212  000016                     SendCharBT@d:
  2213                           	opt stack 0
  2214                           
  2215                           ; 1 bytes @ 0x15
  2216  000016                     	ds	1
  2217  000017                     ??_bufRead:
  2218  000017                     
  2219                           ; 1 bytes @ 0x16
  2220  000017                     	ds	3
  2221  00001A                     bufRead@d:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x19
  2225  00001A                     	ds	1
  2226  00001B                     ??_low_isr:
  2227                           
  2228                           ; 1 bytes @ 0x1A
  2229  00001B                     	ds	9
  2230                           tblptru	equ	0xFF8
  2231                           tblptrh	equ	0xFF7
  2232                           tblptrl	equ	0xFF6
  2233                           tablat	equ	0xFF5
  2234                           postinc0	equ	0xFEE
  2235                           wreg	equ	0xFE8
  2236                           postdec1	equ	0xFE5
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           
  2240 ;;
  2241 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  2242 ;;
  2243 ;; *************** function _main *****************
  2244 ;; Defined at:
  2245 ;;		line 59 in file "main.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;  c               1   14[BANK5 ] unsigned char 
  2250 ;;  c               1   13[BANK5 ] unsigned char 
  2251 ;;  c               1   12[BANK5 ] unsigned char 
  2252 ;;  c               1   11[BANK5 ] unsigned char 
  2253 ;;  c               1   10[BANK5 ] unsigned char 
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2264 ;;      Locals:         0       0       0       0       0       0       9       0       0       0       0       0       
      +0       0       0
  2265 ;;      Temps:          0       0       0       0       0       0       6       0       0       0       0       0       
      +0       0       0
  2266 ;;      Totals:         0       0       0       0       0       0      15       0       0       0       0       0       
      +0       0       0
  2267 ;;Total ram usage:       15 bytes
  2268 ;; Hardware stack levels required when called:    9
  2269 ;; This function calls:
  2270 ;;		_GetChgState
  2271 ;;		_GetFuel
  2272 ;;		_InitApp
  2273 ;;		_InitApp2
  2274 ;;		_ReadEEPROM
  2275 ;;		_WriteEEPROM
  2276 ;;		_bufInit
  2277 ;;		_checkBtState
  2278 ;;		_connect
  2279 ;;		_connectToggle
  2280 ;;		_connected
  2281 ;;		_enterCommand
  2282 ;;		_sendAltCode
  2283 ;;		_sendConsumerReport
  2284 ;;		_sendKey
  2285 ;;		_sendMouse
  2286 ;;		_sendToggle
  2287 ;;		_setScanCodes
  2288 ;;		_setSleepDelay
  2289 ;;		_setXY
  2290 ;;		_showBatteryState
  2291 ;;		_showText
  2292 ;;		_sw1Process
  2293 ;;		_swProcess
  2294 ;;		_waitBootTrigger
  2295 ;;		_waitMs
  2296 ;; This function is called by:
  2297 ;;		Startup code after reset
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text0
  2302  010662                     __ptext0:
  2303                           	opt stack 0
  2304  010662                     _main:
  2305                           	opt stack 22
  2306                           
  2307                           ;main.c: 64:  InitApp();
  2308                           
  2309                           ;incstack = 0
  2310  010662  ECC3  F094         	call	_InitApp	;wreg free
  2311                           
  2312                           ;main.c: 65:  waitBootTrigger();
  2313  010666  ECC1  F093         	call	_waitBootTrigger	;wreg free
  2314                           
  2315                           ;main.c: 66:  InitApp2();
  2316  01066A  EC33  F090         	call	_InitApp2	;wreg free
  2317                           
  2318                           ;main.c: 68:  bufInit(&bufU2_intH, b1);
  2319  01066E  0ED3               	movlw	low _bufU2_intH
  2320  010670  0100               	movlb	0	; () banked
  2321  010672  6FD7               	movwf	bufInit@b& (0+255),b
  2322  010674  0E00               	movlw	high _bufU2_intH
  2323  010676  6FD8               	movwf	(bufInit@b+1)& (0+255),b
  2324  010678  0E00               	movlw	low _b1
  2325  01067A  6FD9               	movwf	bufInit@buf& (0+255),b
  2326  01067C  0E01               	movlw	high _b1
  2327  01067E  6FDA               	movwf	(bufInit@buf+1)& (0+255),b
  2328  010680  ECFB  F093         	call	_bufInit	;wreg free
  2329                           
  2330                           ;main.c: 70:  bufInit(&bufU2_main, b3);
  2331  010684  0E3D               	movlw	low _bufU2_main
  2332  010686  0100               	movlb	0	; () banked
  2333  010688  6FD7               	movwf	bufInit@b& (0+255),b
  2334  01068A  0E00               	movlw	high _bufU2_main
  2335  01068C  6FD8               	movwf	(bufInit@b+1)& (0+255),b
  2336  01068E  0E00               	movlw	low _b3
  2337  010690  6FD9               	movwf	bufInit@buf& (0+255),b
  2338  010692  0E02               	movlw	high _b3
  2339  010694  6FDA               	movwf	(bufInit@buf+1)& (0+255),b
  2340  010696  ECFB  F093         	call	_bufInit	;wreg free
  2341                           
  2342                           ;main.c: 71:  bufInit(&bufU5_intH, b4);
  2343  01069A  0E41               	movlw	low _bufU5_intH
  2344  01069C  0100               	movlb	0	; () banked
  2345  01069E  6FD7               	movwf	bufInit@b& (0+255),b
  2346  0106A0  0E00               	movlw	high _bufU5_intH
  2347  0106A2  6FD8               	movwf	(bufInit@b+1)& (0+255),b
  2348  0106A4  0E00               	movlw	low _b4
  2349  0106A6  6FD9               	movwf	bufInit@buf& (0+255),b
  2350  0106A8  0E03               	movlw	high _b4
  2351  0106AA  6FDA               	movwf	(bufInit@buf+1)& (0+255),b
  2352  0106AC  ECFB  F093         	call	_bufInit	;wreg free
  2353                           
  2354                           ;main.c: 73:  bufInit(&bufU5_main, b6);
  2355  0106B0  0E39               	movlw	low _bufU5_main
  2356  0106B2  0100               	movlb	0	; () banked
  2357  0106B4  6FD7               	movwf	bufInit@b& (0+255),b
  2358  0106B6  0E00               	movlw	high _bufU5_main
  2359  0106B8  6FD8               	movwf	(bufInit@b+1)& (0+255),b
  2360  0106BA  0E00               	movlw	low _b6
  2361  0106BC  6FD9               	movwf	bufInit@buf& (0+255),b
  2362  0106BE  0E04               	movlw	high _b6
  2363  0106C0  6FDA               	movwf	(bufInit@buf+1)& (0+255),b
  2364  0106C2  ECFB  F093         	call	_bufInit	;wreg free
  2365                           
  2366                           ;main.c: 75:  keyMode = ReadEEPROM(0);
  2367  0106C6  0E00               	movlw	0
  2368  0106C8  0100               	movlb	0	; () banked
  2369  0106CA  6FD8               	movwf	(ReadEEPROM@address+1)& (0+255),b
  2370  0106CC  0E00               	movlw	0
  2371  0106CE  6FD7               	movwf	ReadEEPROM@address& (0+255),b
  2372  0106D0  ECE0  F093         	call	_ReadEEPROM	;wreg free
  2373  0106D4  0100               	movlb	0	; () banked
  2374  0106D6  6F8B               	movwf	_keyMode& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 76:  if (keyMode == 0xff) {
  2378  0106D8  298B               	incf	_keyMode& (0+255),w,b
  2379  0106DA  A4D8               	btfss	status,2,c
  2380  0106DC  D002               	goto	l248
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;main.c: 77:   keyMode = 0;
  2384  0106DE  0E00               	movlw	0
  2385  0106E0  6F8B               	movwf	_keyMode& (0+255),b
  2386  0106E2                     l248:
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;main.c: 81:  fnEnableLatch = ReadEEPROM(1);
  2390                           
  2391                           ; BSR set to: 0
  2392  0106E2  0E00               	movlw	0
  2393  0106E4  6FD8               	movwf	(ReadEEPROM@address+1)& (0+255),b
  2394  0106E6  0E01               	movlw	1
  2395  0106E8  6FD7               	movwf	ReadEEPROM@address& (0+255),b
  2396  0106EA  ECE0  F093         	call	_ReadEEPROM	;wreg free
  2397  0106EE  0100               	movlb	0	; () banked
  2398  0106F0  6F8A               	movwf	_fnEnableLatch& (0+255),b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 82:  if (fnEnableLatch > 1) {
  2402  0106F2  0E01               	movlw	1
  2403  0106F4  658A               	cpfsgt	_fnEnableLatch& (0+255),b
  2404  0106F6  D002               	goto	l249
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;main.c: 83:   fnEnableLatch = 0;
  2408  0106F8  0E00               	movlw	0
  2409  0106FA  6F8A               	movwf	_fnEnableLatch& (0+255),b
  2410  0106FC                     l249:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;main.c: 87:  setSleepDelay(300);
  2414                           
  2415                           ; BSR set to: 0
  2416  0106FC  0E01               	movlw	1
  2417  0106FE  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  2418  010700  0E2C               	movlw	44
  2419  010702  6FE3               	movwf	setSleepDelay@second& (0+255),b
  2420  010704  EC1A  F091         	call	_setSleepDelay	;wreg free
  2421                           
  2422                           ;main.c: 88:  INTCONbits.GIE = 1;
  2423  010708  8EF2               	bsf	intcon,7,c	;volatile
  2424                           
  2425                           ;main.c: 90:  connect();
  2426  01070A  EC75  F094         	call	_connect	;wreg free
  2427                           
  2428                           ;main.c: 92:  for (unsigned char c = 0; c < 12; c++) {
  2429  01070E  0E00               	movlw	0
  2430  010710  0105               	movlb	5	; () banked
  2431  010712  6F0A               	movwf	main@c& (0+255),b
  2432  010714                     l7185:
  2433                           
  2434                           ; BSR set to: 5
  2435  010714  0E0B               	movlw	11
  2436  010716  650A               	cpfsgt	main@c& (0+255),b
  2437  010718  D001               	goto	l250
  2438  01071A  D00C               	goto	u6980
  2439  01071C                     l250:
  2440                           
  2441                           ; BSR set to: 5
  2442                           ;main.c: 93:   led[c] = 0;
  2443                           
  2444                           ; BSR set to: 5
  2445  01071C  510A               	movf	main@c& (0+255),w,b
  2446  01071E  0D01               	mullw	1
  2447  010720  0E6C               	movlw	low _led
  2448  010722  24F3               	addwf	prodl,w,c
  2449  010724  6ED9               	movwf	fsr2l,c
  2450  010726  0E00               	movlw	high _led
  2451  010728  20F4               	addwfc	prodh,w,c
  2452  01072A  6EDA               	movwf	fsr2h,c
  2453  01072C  0E00               	movlw	0
  2454  01072E  6EDF               	movwf	indf2,c
  2455                           
  2456                           ; BSR set to: 5
  2457                           ;main.c: 94:  }
  2458  010730  2B0A               	incf	main@c& (0+255),f,b
  2459  010732  D7F0               	goto	l7185
  2460  010734                     u6980:
  2461                           
  2462                           ; BSR set to: 5
  2463                           ;main.c: 95:  waitMs(200);
  2464                           
  2465                           ; BSR set to: 5
  2466  010734  0EC8               	movlw	200
  2467  010736  0100               	movlb	0	; () banked
  2468  010738  6FD7               	movwf	waitMs@t& (0+255),b
  2469  01073A  0E00               	movlw	0
  2470  01073C  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  2471  01073E  0E00               	movlw	0
  2472  010740  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  2473  010742  0E00               	movlw	0
  2474  010744  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  2475  010746  EC3F  F093         	call	_waitMs	;wreg free
  2476                           
  2477                           ;main.c: 96:  for (unsigned char c = 0; c < 12; c++) {
  2478  01074A  0E00               	movlw	0
  2479  01074C  0105               	movlb	5	; () banked
  2480  01074E  6F0B               	movwf	main@c_700& (0+255),b
  2481  010750                     l7199:
  2482                           
  2483                           ; BSR set to: 5
  2484  010750  0E0B               	movlw	11
  2485  010752  650B               	cpfsgt	main@c_700& (0+255),b
  2486  010754  D001               	goto	l252
  2487  010756  D018               	goto	u7000
  2488  010758                     l252:
  2489                           
  2490                           ; BSR set to: 5
  2491                           ;main.c: 97:   led[c] = 1;
  2492                           
  2493                           ; BSR set to: 5
  2494  010758  510B               	movf	main@c_700& (0+255),w,b
  2495  01075A  0D01               	mullw	1
  2496  01075C  0E6C               	movlw	low _led
  2497  01075E  24F3               	addwf	prodl,w,c
  2498  010760  6ED9               	movwf	fsr2l,c
  2499  010762  0E00               	movlw	high _led
  2500  010764  20F4               	addwfc	prodh,w,c
  2501  010766  6EDA               	movwf	fsr2h,c
  2502  010768  0E01               	movlw	1
  2503  01076A  6EDF               	movwf	indf2,c
  2504                           
  2505                           ; BSR set to: 5
  2506                           ;main.c: 98:   waitMs(100);
  2507  01076C  0E64               	movlw	100
  2508  01076E  0100               	movlb	0	; () banked
  2509  010770  6FD7               	movwf	waitMs@t& (0+255),b
  2510  010772  0E00               	movlw	0
  2511  010774  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  2512  010776  0E00               	movlw	0
  2513  010778  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  2514  01077A  0E00               	movlw	0
  2515  01077C  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  2516  01077E  EC3F  F093         	call	_waitMs	;wreg free
  2517                           
  2518                           ;main.c: 99:  }
  2519  010782  0105               	movlb	5	; () banked
  2520  010784  2B0B               	incf	main@c_700& (0+255),f,b
  2521  010786  D7E4               	goto	l7199
  2522  010788                     u7000:
  2523                           
  2524                           ; BSR set to: 5
  2525                           ;main.c: 100:  waitMs(200);
  2526                           
  2527                           ; BSR set to: 5
  2528  010788  0EC8               	movlw	200
  2529  01078A  0100               	movlb	0	; () banked
  2530  01078C  6FD7               	movwf	waitMs@t& (0+255),b
  2531  01078E  0E00               	movlw	0
  2532  010790  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  2533  010792  0E00               	movlw	0
  2534  010794  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  2535  010796  0E00               	movlw	0
  2536  010798  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  2537  01079A  EC3F  F093         	call	_waitMs	;wreg free
  2538                           
  2539                           ;main.c: 101:  for (unsigned char c = 0; c < 12; c++) {
  2540  01079E  0E00               	movlw	0
  2541  0107A0  0105               	movlb	5	; () banked
  2542  0107A2  6F0C               	movwf	main@c_701& (0+255),b
  2543  0107A4                     l7215:
  2544                           
  2545                           ; BSR set to: 5
  2546  0107A4  0E0B               	movlw	11
  2547  0107A6  650C               	cpfsgt	main@c_701& (0+255),b
  2548  0107A8  D001               	goto	l254
  2549  0107AA  D018               	goto	u7020
  2550  0107AC                     l254:
  2551                           
  2552                           ; BSR set to: 5
  2553                           ;main.c: 102:   led[c] = 0;
  2554                           
  2555                           ; BSR set to: 5
  2556  0107AC  510C               	movf	main@c_701& (0+255),w,b
  2557  0107AE  0D01               	mullw	1
  2558  0107B0  0E6C               	movlw	low _led
  2559  0107B2  24F3               	addwf	prodl,w,c
  2560  0107B4  6ED9               	movwf	fsr2l,c
  2561  0107B6  0E00               	movlw	high _led
  2562  0107B8  20F4               	addwfc	prodh,w,c
  2563  0107BA  6EDA               	movwf	fsr2h,c
  2564  0107BC  0E00               	movlw	0
  2565  0107BE  6EDF               	movwf	indf2,c
  2566                           
  2567                           ; BSR set to: 5
  2568                           ;main.c: 103:   waitMs(10);
  2569  0107C0  0E0A               	movlw	10
  2570  0107C2  0100               	movlb	0	; () banked
  2571  0107C4  6FD7               	movwf	waitMs@t& (0+255),b
  2572  0107C6  0E00               	movlw	0
  2573  0107C8  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  2574  0107CA  0E00               	movlw	0
  2575  0107CC  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  2576  0107CE  0E00               	movlw	0
  2577  0107D0  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  2578  0107D2  EC3F  F093         	call	_waitMs	;wreg free
  2579                           
  2580                           ;main.c: 104:  }
  2581  0107D6  0105               	movlb	5	; () banked
  2582  0107D8  2B0C               	incf	main@c_701& (0+255),f,b
  2583  0107DA  D7E4               	goto	l7215
  2584  0107DC                     u7020:
  2585                           
  2586                           ; BSR set to: 5
  2587                           ;main.c: 105:  waitMs(20);
  2588                           
  2589                           ; BSR set to: 5
  2590  0107DC  0E14               	movlw	20
  2591  0107DE  0100               	movlb	0	; () banked
  2592  0107E0  6FD7               	movwf	waitMs@t& (0+255),b
  2593  0107E2  0E00               	movlw	0
  2594  0107E4  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  2595  0107E6  0E00               	movlw	0
  2596  0107E8  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  2597  0107EA  0E00               	movlw	0
  2598  0107EC  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  2599  0107EE  EC3F  F093         	call	_waitMs	;wreg free
  2600                           
  2601                           ;main.c: 106:  showText("Hello!!!!!!");
  2602  0107F2  0EED               	movlw	low STR_1
  2603  0107F4  0100               	movlb	0	; () banked
  2604  0107F6  6FE9               	movwf	showText@text& (0+255),b
  2605  0107F8  0EFF               	movlw	high STR_1
  2606  0107FA  6FEA               	movwf	(showText@text+1)& (0+255),b
  2607  0107FC  EC81  F093         	call	_showText	;wreg free
  2608                           
  2609                           ;main.c: 107:  mainFlags.cycle33s = 1;
  2610  010800  8E32               	bsf	_mainFlags,7,c
  2611  010802                     
  2612                           ;main.c: 110:   RD7 = RF1;
  2613  010802  A28E               	btfss	3982,1,c	;volatile
  2614  010804  D002               	goto	u7030
  2615  010806  8E8C               	bsf	3980,7,c	;volatile
  2616  010808  D001               	goto	u7045
  2617  01080A                     u7030:
  2618  01080A  9E8C               	bcf	3980,7,c	;volatile
  2619  01080C                     u7045:
  2620                           
  2621                           ;main.c: 113:   led[3] = led[4] = fnEnable | fnEnableLatch;
  2622  01080C  0100               	movlb	0	; () banked
  2623  01080E  5189               	movf	_fnEnable& (0+255),w,b
  2624  010810  118A               	iorwf	_fnEnableLatch& (0+255),w,b
  2625  010812  6F70               	movwf	(_led+4)& (0+255),b
  2626  010814  C070  F06F         	movff	_led+4,_led+3
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;main.c: 114:   led[6] = keyReport.modifierLatch.bits.AltL | keyReport.modifier.bits.Alt
      +                          L | keyReport.modifier2.bits.AltL;
  2630  010818  A57A               	btfss	(_keyReport+2)& (0+255),2,b
  2631  01081A  D004               	goto	u7050
  2632  01081C  0105               	movlb	5	; () banked
  2633  01081E  6B00               	clrf	??_main& (0+255),b
  2634  010820  2B00               	incf	??_main& (0+255),f,b
  2635  010822  D002               	goto	u7058
  2636  010824                     u7050:
  2637  010824  0105               	movlb	5	; () banked
  2638  010826  6B00               	clrf	??_main& (0+255),b
  2639  010828                     u7058:
  2640  010828  0100               	movlb	0	; () banked
  2641  01082A  A579               	btfss	(_keyReport+1)& (0+255),2,b
  2642  01082C  D004               	goto	u7060
  2643  01082E  0105               	movlb	5	; () banked
  2644  010830  6B01               	clrf	(??_main+1)& (0+255),b
  2645  010832  2B01               	incf	(??_main+1)& (0+255),f,b
  2646  010834  D002               	goto	u7068
  2647  010836                     u7060:
  2648  010836  0105               	movlb	5	; () banked
  2649  010838  6B01               	clrf	(??_main+1)& (0+255),b
  2650  01083A                     u7068:
  2651  01083A  0100               	movlb	0	; () banked
  2652  01083C  A578               	btfss	_keyReport& (0+255),2,b
  2653  01083E  D002               	goto	u7070
  2654  010840  0E01               	movlw	1
  2655  010842  D001               	goto	u7076
  2656  010844                     u7070:
  2657  010844  0E00               	movlw	0
  2658  010846                     u7076:
  2659  010846  0105               	movlb	5	; () banked
  2660  010848  1101               	iorwf	(??_main+1)& (0+255),w,b
  2661  01084A  1100               	iorwf	??_main& (0+255),w,b
  2662  01084C  0100               	movlb	0	; () banked
  2663  01084E  6F72               	movwf	(_led+6)& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 115:   led[7] = keyReport.modifierLatch.bits.GuiL | keyReport.modifier.bits.Gui
      +                          L | keyReport.modifier2.bits.GuiL;
  2667  010850  A77A               	btfss	(_keyReport+2)& (0+255),3,b
  2668  010852  D004               	goto	u7080
  2669  010854  0105               	movlb	5	; () banked
  2670  010856  6B00               	clrf	??_main& (0+255),b
  2671  010858  2B00               	incf	??_main& (0+255),f,b
  2672  01085A  D002               	goto	u7088
  2673  01085C                     u7080:
  2674  01085C  0105               	movlb	5	; () banked
  2675  01085E  6B00               	clrf	??_main& (0+255),b
  2676  010860                     u7088:
  2677  010860  0100               	movlb	0	; () banked
  2678  010862  A779               	btfss	(_keyReport+1)& (0+255),3,b
  2679  010864  D004               	goto	u7090
  2680  010866  0105               	movlb	5	; () banked
  2681  010868  6B01               	clrf	(??_main+1)& (0+255),b
  2682  01086A  2B01               	incf	(??_main+1)& (0+255),f,b
  2683  01086C  D002               	goto	u7098
  2684  01086E                     u7090:
  2685  01086E  0105               	movlb	5	; () banked
  2686  010870  6B01               	clrf	(??_main+1)& (0+255),b
  2687  010872                     u7098:
  2688  010872  0100               	movlb	0	; () banked
  2689  010874  A778               	btfss	_keyReport& (0+255),3,b
  2690  010876  D002               	goto	u7100
  2691  010878  0E01               	movlw	1
  2692  01087A  D001               	goto	u7106
  2693  01087C                     u7100:
  2694  01087C  0E00               	movlw	0
  2695  01087E                     u7106:
  2696  01087E  0105               	movlb	5	; () banked
  2697  010880  1101               	iorwf	(??_main+1)& (0+255),w,b
  2698  010882  1100               	iorwf	??_main& (0+255),w,b
  2699  010884  0100               	movlb	0	; () banked
  2700  010886  6F73               	movwf	(_led+7)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;main.c: 116:   led[5] = keyReport.modifierLatch.bits.CtrlL | keyReport.modifier.bits.Ct
      +                          rlL | keyReport.modifier2.bits.CtrlL;
  2704  010888  A17A               	btfss	(_keyReport+2)& (0+255),0,b
  2705  01088A  D004               	goto	u7110
  2706  01088C  0105               	movlb	5	; () banked
  2707  01088E  6B00               	clrf	??_main& (0+255),b
  2708  010890  2B00               	incf	??_main& (0+255),f,b
  2709  010892  D002               	goto	u7118
  2710  010894                     u7110:
  2711  010894  0105               	movlb	5	; () banked
  2712  010896  6B00               	clrf	??_main& (0+255),b
  2713  010898                     u7118:
  2714  010898  0100               	movlb	0	; () banked
  2715  01089A  A179               	btfss	(_keyReport+1)& (0+255),0,b
  2716  01089C  D004               	goto	u7120
  2717  01089E  0105               	movlb	5	; () banked
  2718  0108A0  6B01               	clrf	(??_main+1)& (0+255),b
  2719  0108A2  2B01               	incf	(??_main+1)& (0+255),f,b
  2720  0108A4  D002               	goto	u7128
  2721  0108A6                     u7120:
  2722  0108A6  0105               	movlb	5	; () banked
  2723  0108A8  6B01               	clrf	(??_main+1)& (0+255),b
  2724  0108AA                     u7128:
  2725  0108AA  0100               	movlb	0	; () banked
  2726  0108AC  A178               	btfss	_keyReport& (0+255),0,b
  2727  0108AE  D002               	goto	u7130
  2728  0108B0  0E01               	movlw	1
  2729  0108B2  D001               	goto	u7136
  2730  0108B4                     u7130:
  2731  0108B4  0E00               	movlw	0
  2732  0108B6                     u7136:
  2733  0108B6  0105               	movlb	5	; () banked
  2734  0108B8  1101               	iorwf	(??_main+1)& (0+255),w,b
  2735  0108BA  1100               	iorwf	??_main& (0+255),w,b
  2736  0108BC  0100               	movlb	0	; () banked
  2737  0108BE  6F71               	movwf	(_led+5)& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 117:   led[8] = led[9] = keyReport.modifierLatch.bits.ShiftL | keyReport.modifi
      +                          erLatch.bits.ShiftR | keyReport.modifier.bits.ShiftL | keyReport.modifier.bits.ShiftR | 
      +                          keyReport.modifier2.bits.ShiftL | keyReport.modifier2.bits.ShiftR;
  2741  0108C0  AB7A               	btfss	(_keyReport+2)& (0+255),5,b
  2742  0108C2  D004               	goto	u7140
  2743  0108C4  0105               	movlb	5	; () banked
  2744  0108C6  6B00               	clrf	??_main& (0+255),b
  2745  0108C8  2B00               	incf	??_main& (0+255),f,b
  2746  0108CA  D002               	goto	u7148
  2747  0108CC                     u7140:
  2748  0108CC  0105               	movlb	5	; () banked
  2749  0108CE  6B00               	clrf	??_main& (0+255),b
  2750  0108D0                     u7148:
  2751  0108D0  0100               	movlb	0	; () banked
  2752  0108D2  A37A               	btfss	(_keyReport+2)& (0+255),1,b
  2753  0108D4  D004               	goto	u7150
  2754  0108D6  0105               	movlb	5	; () banked
  2755  0108D8  6B01               	clrf	(??_main+1)& (0+255),b
  2756  0108DA  2B01               	incf	(??_main+1)& (0+255),f,b
  2757  0108DC  D002               	goto	u7158
  2758  0108DE                     u7150:
  2759  0108DE  0105               	movlb	5	; () banked
  2760  0108E0  6B01               	clrf	(??_main+1)& (0+255),b
  2761  0108E2                     u7158:
  2762  0108E2  0100               	movlb	0	; () banked
  2763  0108E4  AB79               	btfss	(_keyReport+1)& (0+255),5,b
  2764  0108E6  D004               	goto	u7160
  2765  0108E8  0105               	movlb	5	; () banked
  2766  0108EA  6B02               	clrf	(??_main+2)& (0+255),b
  2767  0108EC  2B02               	incf	(??_main+2)& (0+255),f,b
  2768  0108EE  D002               	goto	u7168
  2769  0108F0                     u7160:
  2770  0108F0  0105               	movlb	5	; () banked
  2771  0108F2  6B02               	clrf	(??_main+2)& (0+255),b
  2772  0108F4                     u7168:
  2773  0108F4  0100               	movlb	0	; () banked
  2774  0108F6  A379               	btfss	(_keyReport+1)& (0+255),1,b
  2775  0108F8  D004               	goto	u7170
  2776  0108FA  0105               	movlb	5	; () banked
  2777  0108FC  6B03               	clrf	(??_main+3)& (0+255),b
  2778  0108FE  2B03               	incf	(??_main+3)& (0+255),f,b
  2779  010900  D002               	goto	u7178
  2780  010902                     u7170:
  2781  010902  0105               	movlb	5	; () banked
  2782  010904  6B03               	clrf	(??_main+3)& (0+255),b
  2783  010906                     u7178:
  2784  010906  0100               	movlb	0	; () banked
  2785  010908  AB78               	btfss	_keyReport& (0+255),5,b
  2786  01090A  D004               	goto	u7180
  2787  01090C  0105               	movlb	5	; () banked
  2788  01090E  6B04               	clrf	(??_main+4)& (0+255),b
  2789  010910  2B04               	incf	(??_main+4)& (0+255),f,b
  2790  010912  D002               	goto	u7188
  2791  010914                     u7180:
  2792  010914  0105               	movlb	5	; () banked
  2793  010916  6B04               	clrf	(??_main+4)& (0+255),b
  2794  010918                     u7188:
  2795  010918  0100               	movlb	0	; () banked
  2796  01091A  A378               	btfss	_keyReport& (0+255),1,b
  2797  01091C  D002               	goto	u7190
  2798  01091E  0E01               	movlw	1
  2799  010920  D001               	goto	u7196
  2800  010922                     u7190:
  2801  010922  0E00               	movlw	0
  2802  010924                     u7196:
  2803  010924  0105               	movlb	5	; () banked
  2804  010926  1104               	iorwf	(??_main+4)& (0+255),w,b
  2805  010928  1103               	iorwf	(??_main+3)& (0+255),w,b
  2806  01092A  1102               	iorwf	(??_main+2)& (0+255),w,b
  2807  01092C  1101               	iorwf	(??_main+1)& (0+255),w,b
  2808  01092E  1100               	iorwf	??_main& (0+255),w,b
  2809  010930  0100               	movlb	0	; () banked
  2810  010932  6F75               	movwf	(_led+9)& (0+255),b
  2811  010934  C075  F074         	movff	_led+9,_led+8
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 118:   led[0] = keyMode == 0 && BtConnected ^ RF1;
  2815  010938  0E00               	movlw	0
  2816  01093A  0105               	movlb	5	; () banked
  2817  01093C  6F06               	movwf	_main$727& (0+255),b
  2818                           
  2819                           ; BSR set to: 5
  2820  01093E  0100               	movlb	0	; () banked
  2821  010940  518B               	movf	_keyMode& (0+255),w,b
  2822  010942  A4D8               	btfss	status,2,c
  2823  010944  D012               	goto	l258
  2824                           
  2825                           ; BSR set to: 0
  2826  010946  A28E               	btfss	3982,1,c	;volatile
  2827  010948  D002               	goto	u7210
  2828  01094A  0E01               	movlw	1
  2829  01094C  D001               	goto	u7220
  2830  01094E                     u7210:
  2831  01094E  0E00               	movlw	0
  2832  010950                     u7220:
  2833  010950  C088  F500         	movff	_BtConnected,??_main
  2834  010954  0105               	movlb	5	; () banked
  2835  010956  6B01               	clrf	(??_main+1)& (0+255),b
  2836  010958  1B00               	xorwf	??_main& (0+255),f,b
  2837  01095A  0E00               	movlw	0
  2838  01095C  1B01               	xorwf	(??_main+1)& (0+255),f,b
  2839  01095E  5100               	movf	??_main& (0+255),w,b
  2840  010960  1101               	iorwf	(??_main+1)& (0+255),w,b
  2841  010962  B4D8               	btfsc	status,2,c
  2842  010964  D002               	goto	l258
  2843                           
  2844                           ; BSR set to: 5
  2845  010966  0E01               	movlw	1
  2846  010968  6F06               	movwf	_main$727& (0+255),b
  2847  01096A                     l258:
  2848                           
  2849                           ; BSR set to: 5
  2850  01096A  C506  F06C         	movff	_main$727,_led
  2851                           
  2852                           ;main.c: 119:   led[1] = keyMode == 1 && BtConnected ^ RF1;
  2853  01096E  0E00               	movlw	0
  2854  010970  0105               	movlb	5	; () banked
  2855  010972  6F07               	movwf	_main$728& (0+255),b
  2856                           
  2857                           ; BSR set to: 5
  2858  010974  0100               	movlb	0	; () banked
  2859  010976  058B               	decf	_keyMode& (0+255),w,b
  2860  010978  A4D8               	btfss	status,2,c
  2861  01097A  D012               	goto	l260
  2862                           
  2863                           ; BSR set to: 0
  2864  01097C  A28E               	btfss	3982,1,c	;volatile
  2865  01097E  D002               	goto	u7250
  2866  010980  0E01               	movlw	1
  2867  010982  D001               	goto	u7260
  2868  010984                     u7250:
  2869  010984  0E00               	movlw	0
  2870  010986                     u7260:
  2871  010986  C088  F500         	movff	_BtConnected,??_main
  2872  01098A  0105               	movlb	5	; () banked
  2873  01098C  6B01               	clrf	(??_main+1)& (0+255),b
  2874  01098E  1B00               	xorwf	??_main& (0+255),f,b
  2875  010990  0E00               	movlw	0
  2876  010992  1B01               	xorwf	(??_main+1)& (0+255),f,b
  2877  010994  5100               	movf	??_main& (0+255),w,b
  2878  010996  1101               	iorwf	(??_main+1)& (0+255),w,b
  2879  010998  B4D8               	btfsc	status,2,c
  2880  01099A  D002               	goto	l260
  2881                           
  2882                           ; BSR set to: 5
  2883  01099C  0E01               	movlw	1
  2884  01099E  6F07               	movwf	_main$728& (0+255),b
  2885  0109A0                     l260:
  2886                           
  2887                           ; BSR set to: 5
  2888  0109A0  C507  F06D         	movff	_main$728,_led+1
  2889                           
  2890                           ;main.c: 120:   led[2] = keyMode == 2 && BtConnected ^ RF1;
  2891  0109A4  0E00               	movlw	0
  2892  0109A6  0105               	movlb	5	; () banked
  2893  0109A8  6F08               	movwf	_main$729& (0+255),b
  2894                           
  2895                           ; BSR set to: 5
  2896  0109AA  0E02               	movlw	2
  2897  0109AC  0100               	movlb	0	; () banked
  2898  0109AE  198B               	xorwf	_keyMode& (0+255),w,b
  2899  0109B0  A4D8               	btfss	status,2,c
  2900  0109B2  D012               	goto	l262
  2901                           
  2902                           ; BSR set to: 0
  2903  0109B4  A28E               	btfss	3982,1,c	;volatile
  2904  0109B6  D002               	goto	u7290
  2905  0109B8  0E01               	movlw	1
  2906  0109BA  D001               	goto	u7300
  2907  0109BC                     u7290:
  2908  0109BC  0E00               	movlw	0
  2909  0109BE                     u7300:
  2910  0109BE  C088  F500         	movff	_BtConnected,??_main
  2911  0109C2  0105               	movlb	5	; () banked
  2912  0109C4  6B01               	clrf	(??_main+1)& (0+255),b
  2913  0109C6  1B00               	xorwf	??_main& (0+255),f,b
  2914  0109C8  0E00               	movlw	0
  2915  0109CA  1B01               	xorwf	(??_main+1)& (0+255),f,b
  2916  0109CC  5100               	movf	??_main& (0+255),w,b
  2917  0109CE  1101               	iorwf	(??_main+1)& (0+255),w,b
  2918  0109D0  B4D8               	btfsc	status,2,c
  2919  0109D2  D002               	goto	l262
  2920                           
  2921                           ; BSR set to: 5
  2922  0109D4  0E01               	movlw	1
  2923  0109D6  6F08               	movwf	_main$729& (0+255),b
  2924  0109D8                     l262:
  2925                           
  2926                           ; BSR set to: 5
  2927  0109D8  C508  F06E         	movff	_main$729,_led+2
  2928                           
  2929                           ;main.c: 121:   led[10] = GetChgState();
  2930  0109DC  EC15  F094         	call	_GetChgState	;wreg free
  2931  0109E0  0100               	movlb	0	; () banked
  2932  0109E2  6F76               	movwf	(_led+10)& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 122:   led[11] = (volt * 2 - 560) > sawToothWave;
  2936  0109E4  0ED0               	movlw	208
  2937  0109E6  0105               	movlb	5	; () banked
  2938  0109E8  6F00               	movwf	??_main& (0+255),b
  2939  0109EA  0EFD               	movlw	253
  2940  0109EC  6F01               	movwf	(??_main+1)& (0+255),b
  2941  0109EE  C0FB  F502         	movff	_volt,??_main+2
  2942  0109F2  C0FC  F503         	movff	_volt+1,??_main+3
  2943  0109F6  90D8               	bcf	status,0,c
  2944  0109F8  3702               	rlcf	(??_main+2)& (0+255),f,b
  2945  0109FA  3703               	rlcf	(??_main+3)& (0+255),f,b
  2946  0109FC  5100               	movf	??_main& (0+255),w,b
  2947  0109FE  2702               	addwf	(??_main+2)& (0+255),f,b
  2948  010A00  5101               	movf	(??_main+1)& (0+255),w,b
  2949  010A02  2303               	addwfc	(??_main+3)& (0+255),f,b
  2950  010A04  0100               	movlb	0	; () banked
  2951  010A06  518C               	movf	_sawToothWave& (0+255),w,b
  2952  010A08  0105               	movlb	5	; () banked
  2953  010A0A  6F04               	movwf	(??_main+4)& (0+255),b
  2954  010A0C  6B05               	clrf	(??_main+5)& (0+255),b
  2955  010A0E  5102               	movf	(??_main+2)& (0+255),w,b
  2956  010A10  5D04               	subwf	(??_main+4)& (0+255),w,b
  2957  010A12  5103               	movf	(??_main+3)& (0+255),w,b
  2958  010A14  5905               	subwfb	(??_main+5)& (0+255),w,b
  2959  010A16  B0D8               	btfsc	status,0,c
  2960  010A18  D002               	goto	u7320
  2961  010A1A  0E01               	movlw	1
  2962  010A1C  D001               	goto	u7330
  2963  010A1E                     u7320:
  2964  010A1E  0E00               	movlw	0
  2965  010A20                     u7330:
  2966  010A20  0100               	movlb	0	; () banked
  2967  010A22  6F77               	movwf	(_led+11)& (0+255),b
  2968                           
  2969                           ;main.c: 130:   sw1Process();
  2970  010A24  ECA8  F090         	call	_sw1Process	;wreg free
  2971                           
  2972                           ;main.c: 133:   swProcess();
  2973  010A28  EC21  F086         	call	_swProcess	;wreg free
  2974                           
  2975                           ;main.c: 135:   if (mainFlags.cycle33s) {
  2976  010A2C  AE32               	btfss	_mainFlags,7,c
  2977  010A2E  D007               	goto	l263
  2978                           
  2979                           ;main.c: 136:    volt = GetFuel();
  2980  010A30  EC6E  F090         	call	_GetFuel	;wreg free
  2981  010A34  C0DD  F0FB         	movff	?_GetFuel,_volt
  2982  010A38  C0DE  F0FC         	movff	?_GetFuel+1,_volt+1
  2983                           
  2984                           ;main.c: 137:    mainFlags.cycle33s = 0;
  2985  010A3C  9E32               	bcf	_mainFlags,7,c
  2986  010A3E                     l263:
  2987                           
  2988                           ;main.c: 140:   if (mainFlags.cycle052s) {
  2989  010A3E  A033               	btfss	_mainFlags+1,0,c
  2990  010A40  D010               	goto	l264
  2991                           
  2992                           ;main.c: 142:    checkBtState();
  2993  010A42  ECD8  F094         	call	_checkBtState	;wreg free
  2994                           
  2995                           ;main.c: 145:    (LATF4=(!RF6&&!!RF7));
  2996  010A46  0E00               	movlw	0
  2997  010A48  0105               	movlb	5	; () banked
  2998  010A4A  6F09               	movwf	_main$730& (0+255),b
  2999                           
  3000                           ; BSR set to: 5
  3001  010A4C  AC8E               	btfss	3982,6,c	;volatile
  3002                           
  3003                           ; BSR set to: 5
  3004  010A4E  AE8E               	btfss	3982,7,c	;volatile
  3005  010A50  D002               	goto	l266
  3006                           
  3007                           ; BSR set to: 5
  3008  010A52  0E01               	movlw	1
  3009  010A54  6F09               	movwf	_main$730& (0+255),b
  3010  010A56                     l266:
  3011                           
  3012                           ; BSR set to: 5
  3013                           
  3014                           ; BSR set to: 5
  3015  010A56  B109               	btfsc	_main$730& (0+255),0,b
  3016  010A58  D002               	bra	u7385
  3017  010A5A  987E               	bcf	3966,4,c	;volatile
  3018  010A5C  D001               	bra	u7386
  3019  010A5E                     u7385:
  3020  010A5E  887E               	bsf	3966,4,c	;volatile
  3021  010A60                     u7386:
  3022                           
  3023                           ;main.c: 164:    mainFlags.cycle052s = 0;
  3024  010A60  9033               	bcf	_mainFlags+1,0,c
  3025  010A62                     l264:
  3026                           
  3027                           ;main.c: 168:   if (mainFlags.sendComsumerKeyReport) {
  3028  010A62  A233               	btfss	_mainFlags+1,1,c
  3029  010A64  D00A               	goto	l267
  3030                           
  3031                           ;main.c: 169:    sendConsumerReport();
  3032  010A66  EC51  F091         	call	_sendConsumerReport	;wreg free
  3033                           
  3034                           ;main.c: 170:    setSleepDelay(1000);
  3035  010A6A  0E03               	movlw	3
  3036  010A6C  0100               	movlb	0	; () banked
  3037  010A6E  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3038  010A70  0EE8               	movlw	232
  3039  010A72  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3040  010A74  EC1A  F091         	call	_setSleepDelay	;wreg free
  3041                           
  3042                           ;main.c: 171:    mainFlags.sendComsumerKeyReport = 0;
  3043  010A78  9233               	bcf	_mainFlags+1,1,c
  3044  010A7A                     l267:
  3045                           
  3046                           ;main.c: 174:   if (mainFlags.sendKeyReport) {
  3047  010A7A  A433               	btfss	_mainFlags+1,2,c
  3048  010A7C  D010               	goto	l269
  3049                           
  3050                           ;main.c: 175:    setScanCodes();
  3051  010A7E  ECDB  F08D         	call	_setScanCodes	;wreg free
  3052                           
  3053                           ;main.c: 176:    sendKey();
  3054  010A82  EC4E  F08E         	call	_sendKey	;wreg free
  3055                           
  3056                           ;main.c: 177:    setSleepDelay(300);
  3057  010A86  0E01               	movlw	1
  3058  010A88  0100               	movlb	0	; () banked
  3059  010A8A  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3060  010A8C  0E2C               	movlw	44
  3061  010A8E  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3062  010A90  EC1A  F091         	call	_setSleepDelay	;wreg free
  3063                           
  3064                           ;main.c: 178:    if (keyReport.modifier2delay.byte == keyReport.modifier2.byte) {
  3065  010A94  0100               	movlb	0	; () banked
  3066  010A96  517A               	movf	(_keyReport+2)& (0+255),w,b
  3067  010A98  197B               	xorwf	(_keyReport+3)& (0+255),w,b
  3068  010A9A  B4D8               	btfsc	status,2,c
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;main.c: 179:     mainFlags.sendKeyReport = 0;
  3072  010A9C  9433               	bcf	_mainFlags+1,2,c
  3073  010A9E                     l269:
  3074                           
  3075                           ;main.c: 183:   if (mainFlags.sendToggleKey) {
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 181:   }
  3079  010A9E  A633               	btfss	_mainFlags+1,3,c
  3080  010AA0  D00A               	goto	l270
  3081                           
  3082                           ;main.c: 184:    sendToggle();
  3083  010AA2  EC66  F094         	call	_sendToggle	;wreg free
  3084                           
  3085                           ;main.c: 185:    setSleepDelay(300);
  3086  010AA6  0E01               	movlw	1
  3087  010AA8  0100               	movlb	0	; () banked
  3088  010AAA  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3089  010AAC  0E2C               	movlw	44
  3090  010AAE  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3091  010AB0  EC1A  F091         	call	_setSleepDelay	;wreg free
  3092                           
  3093                           ;main.c: 186:    mainFlags.sendToggleKey = 0;
  3094  010AB4  9633               	bcf	_mainFlags+1,3,c
  3095  010AB6                     l270:
  3096                           
  3097                           ;main.c: 189:   if (mainFlags.sendAltCodeReport) {
  3098  010AB6  AA33               	btfss	_mainFlags+1,5,c
  3099  010AB8  D00A               	goto	l271
  3100                           
  3101                           ;main.c: 190:    sendAltCode();
  3102  010ABA  EC81  F08C         	call	_sendAltCode	;wreg free
  3103                           
  3104                           ;main.c: 191:    setSleepDelay(300);
  3105  010ABE  0E01               	movlw	1
  3106  010AC0  0100               	movlb	0	; () banked
  3107  010AC2  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3108  010AC4  0E2C               	movlw	44
  3109  010AC6  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3110  010AC8  EC1A  F091         	call	_setSleepDelay	;wreg free
  3111                           
  3112                           ;main.c: 192:    mainFlags.sendAltCodeReport = 0;
  3113  010ACC  9A33               	bcf	_mainFlags+1,5,c
  3114  010ACE                     l271:
  3115                           
  3116                           ;main.c: 195:   if (mainFlags.sendMouseReport) {
  3117  010ACE  A833               	btfss	_mainFlags+1,4,c
  3118  010AD0  D015               	goto	l273
  3119                           
  3120                           ;main.c: 196:    setXY();
  3121  010AD2  ECAC  F088         	call	_setXY	;wreg free
  3122                           
  3123                           ;main.c: 197:    sendMouse();
  3124  010AD6  ECAE  F08F         	call	_sendMouse	;wreg free
  3125                           
  3126                           ;main.c: 198:    setSleepDelay(300);
  3127  010ADA  0E01               	movlw	1
  3128  010ADC  0100               	movlb	0	; () banked
  3129  010ADE  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3130  010AE0  0E2C               	movlw	44
  3131  010AE2  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3132  010AE4  EC1A  F091         	call	_setSleepDelay	;wreg free
  3133                           
  3134                           ;main.c: 199:    if (!mouseReport.X && !mouseReport.Y && !mouseReport.W) {
  3135  010AE8  0100               	movlb	0	; () banked
  3136  010AEA  5183               	movf	(_mouseReport+1)& (0+255),w,b
  3137  010AEC  A4D8               	btfss	status,2,c
  3138  010AEE  D006               	goto	l273
  3139                           
  3140                           ; BSR set to: 0
  3141  010AF0  5184               	movf	(_mouseReport+2)& (0+255),w,b
  3142  010AF2  A4D8               	btfss	status,2,c
  3143  010AF4  D003               	goto	l273
  3144                           
  3145                           ; BSR set to: 0
  3146  010AF6  5185               	movf	(_mouseReport+3)& (0+255),w,b
  3147  010AF8  B4D8               	btfsc	status,2,c
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 200:     mainFlags.sendMouseReport = 0;
  3151  010AFA  9833               	bcf	_mainFlags+1,4,c
  3152  010AFC                     l273:
  3153                           
  3154                           ;main.c: 204:   if (mainFlags.sw1Pushed) {
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;main.c: 202:   }
  3158  010AFC  A032               	btfss	_mainFlags,0,c
  3159  010AFE  D008               	goto	l274
  3160                           
  3161                           ;main.c: 205:    setSleepDelay(300);
  3162  010B00  0E01               	movlw	1
  3163  010B02  0100               	movlb	0	; () banked
  3164  010B04  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3165  010B06  0E2C               	movlw	44
  3166  010B08  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3167  010B0A  EC1A  F091         	call	_setSleepDelay	;wreg free
  3168                           
  3169                           ;main.c: 206:    mainFlags.sw1Pushed = 0;
  3170  010B0E  9032               	bcf	_mainFlags,0,c
  3171  010B10                     l274:
  3172                           
  3173                           ;main.c: 209:   if (mainFlags.sw1LongPushing) {
  3174  010B10  A232               	btfss	_mainFlags,1,c
  3175  010B12  D009               	goto	l275
  3176                           
  3177                           ;main.c: 211:    mainFlags.connectToggle = 1;
  3178  010B14  8A32               	bsf	_mainFlags,5,c
  3179                           
  3180                           ;main.c: 212:    setSleepDelay(300);
  3181  010B16  0E01               	movlw	1
  3182  010B18  0100               	movlb	0	; () banked
  3183  010B1A  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3184  010B1C  0E2C               	movlw	44
  3185  010B1E  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3186  010B20  EC1A  F091         	call	_setSleepDelay	;wreg free
  3187                           
  3188                           ;main.c: 213:    mainFlags.sw1LongPushing = 0;
  3189  010B24  9232               	bcf	_mainFlags,1,c
  3190  010B26                     l275:
  3191                           
  3192                           ;main.c: 216:   if (mainFlags.showBattery) {
  3193  010B26  AC32               	btfss	_mainFlags,6,c
  3194  010B28  D00A               	goto	l276
  3195                           
  3196                           ;main.c: 217:    showBatteryState();
  3197  010B2A  ECF3  F08F         	call	_showBatteryState	;wreg free
  3198                           
  3199                           ;main.c: 218:    setSleepDelay(300);
  3200  010B2E  0E01               	movlw	1
  3201  010B30  0100               	movlb	0	; () banked
  3202  010B32  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3203  010B34  0E2C               	movlw	44
  3204  010B36  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3205  010B38  EC1A  F091         	call	_setSleepDelay	;wreg free
  3206                           
  3207                           ;main.c: 219:    mainFlags.showBattery = 0;
  3208  010B3C  9C32               	bcf	_mainFlags,6,c
  3209  010B3E                     l276:
  3210                           
  3211                           ;main.c: 222:   if (mainFlags.enterCommand) {
  3212  010B3E  A632               	btfss	_mainFlags,3,c
  3213  010B40  D00A               	goto	l277
  3214                           
  3215                           ;main.c: 223:    enterCommand();
  3216  010B42  EC3C  F092         	call	_enterCommand	;wreg free
  3217                           
  3218                           ;main.c: 224:    setSleepDelay(600);
  3219  010B46  0E02               	movlw	2
  3220  010B48  0100               	movlb	0	; () banked
  3221  010B4A  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3222  010B4C  0E58               	movlw	88
  3223  010B4E  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3224  010B50  EC1A  F091         	call	_setSleepDelay	;wreg free
  3225                           
  3226                           ;main.c: 225:    mainFlags.enterCommand = 0;
  3227  010B54  9632               	bcf	_mainFlags,3,c
  3228  010B56                     l277:
  3229                           
  3230                           ;main.c: 228:   if (mainFlags.connected) {
  3231  010B56  A832               	btfss	_mainFlags,4,c
  3232  010B58  D00A               	goto	l278
  3233                           
  3234                           ;main.c: 229:    connected();
  3235  010B5A  EC0A  F095         	call	_connected	;wreg free
  3236                           
  3237                           ;main.c: 230:    setSleepDelay(300);
  3238  010B5E  0E01               	movlw	1
  3239  010B60  0100               	movlb	0	; () banked
  3240  010B62  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3241  010B64  0E2C               	movlw	44
  3242  010B66  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3243  010B68  EC1A  F091         	call	_setSleepDelay	;wreg free
  3244                           
  3245                           ;main.c: 231:    mainFlags.connected = 0;
  3246  010B6C  9832               	bcf	_mainFlags,4,c
  3247  010B6E                     l278:
  3248                           
  3249                           ;main.c: 234:   if (mainFlags.connectToggle) {
  3250  010B6E  AA32               	btfss	_mainFlags,5,c
  3251  010B70  D00A               	goto	l279
  3252                           
  3253                           ;main.c: 235:    connectToggle();
  3254  010B72  ECCE  F094         	call	_connectToggle	;wreg free
  3255                           
  3256                           ;main.c: 236:    setSleepDelay(300);
  3257  010B76  0E01               	movlw	1
  3258  010B78  0100               	movlb	0	; () banked
  3259  010B7A  6FE4               	movwf	(setSleepDelay@second+1)& (0+255),b
  3260  010B7C  0E2C               	movlw	44
  3261  010B7E  6FE3               	movwf	setSleepDelay@second& (0+255),b
  3262  010B80  EC1A  F091         	call	_setSleepDelay	;wreg free
  3263                           
  3264                           ;main.c: 237:    mainFlags.connectToggle = 0;
  3265  010B84  9A32               	bcf	_mainFlags,5,c
  3266  010B86                     l279:
  3267                           
  3268                           ;main.c: 246:   if (mainFlags.shutdown) {
  3269  010B86  A432               	btfss	_mainFlags,2,c
  3270  010B88  D63C               	goto	l256
  3271                           
  3272                           ;main.c: 247:    WriteEEPROM(0, keyMode);
  3273  010B8A  0E00               	movlw	0
  3274  010B8C  0100               	movlb	0	; () banked
  3275  010B8E  6FD8               	movwf	(WriteEEPROM@address+1)& (0+255),b
  3276  010B90  0E00               	movlw	0
  3277  010B92  6FD7               	movwf	WriteEEPROM@address& (0+255),b
  3278  010B94  C08B  F0D9         	movff	_keyMode,WriteEEPROM@d
  3279  010B98  ECFC  F092         	call	_WriteEEPROM	;wreg free
  3280                           
  3281                           ;main.c: 249:    WriteEEPROM(1, fnEnableLatch);
  3282  010B9C  0E00               	movlw	0
  3283  010B9E  0100               	movlb	0	; () banked
  3284  010BA0  6FD8               	movwf	(WriteEEPROM@address+1)& (0+255),b
  3285  010BA2  0E01               	movlw	1
  3286  010BA4  6FD7               	movwf	WriteEEPROM@address& (0+255),b
  3287  010BA6  C08A  F0D9         	movff	_fnEnableLatch,WriteEEPROM@d
  3288  010BAA  ECFC  F092         	call	_WriteEEPROM	;wreg free
  3289                           
  3290                           ;main.c: 252:    for (unsigned char c = 0; c < 12; c++) {
  3291  010BAE  0E00               	movlw	0
  3292  010BB0  0105               	movlb	5	; () banked
  3293  010BB2  6F0D               	movwf	main@c_731& (0+255),b
  3294  010BB4                     l7395:
  3295                           
  3296                           ; BSR set to: 5
  3297  010BB4  0E0B               	movlw	11
  3298  010BB6  650D               	cpfsgt	main@c_731& (0+255),b
  3299  010BB8  D001               	goto	l281
  3300  010BBA  D00C               	goto	u7560
  3301  010BBC                     l281:
  3302                           
  3303                           ; BSR set to: 5
  3304                           ;main.c: 253:     led[c] = 0;
  3305                           
  3306                           ; BSR set to: 5
  3307  010BBC  510D               	movf	main@c_731& (0+255),w,b
  3308  010BBE  0D01               	mullw	1
  3309  010BC0  0E6C               	movlw	low _led
  3310  010BC2  24F3               	addwf	prodl,w,c
  3311  010BC4  6ED9               	movwf	fsr2l,c
  3312  010BC6  0E00               	movlw	high _led
  3313  010BC8  20F4               	addwfc	prodh,w,c
  3314  010BCA  6EDA               	movwf	fsr2h,c
  3315  010BCC  0E00               	movlw	0
  3316  010BCE  6EDF               	movwf	indf2,c
  3317                           
  3318                           ; BSR set to: 5
  3319                           ;main.c: 254:    }
  3320  010BD0  2B0D               	incf	main@c_731& (0+255),f,b
  3321  010BD2  D7F0               	goto	l7395
  3322  010BD4                     u7560:
  3323                           
  3324                           ; BSR set to: 5
  3325                           ;main.c: 255:    waitMs(200);
  3326                           
  3327                           ; BSR set to: 5
  3328  010BD4  0EC8               	movlw	200
  3329  010BD6  0100               	movlb	0	; () banked
  3330  010BD8  6FD7               	movwf	waitMs@t& (0+255),b
  3331  010BDA  0E00               	movlw	0
  3332  010BDC  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  3333  010BDE  0E00               	movlw	0
  3334  010BE0  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  3335  010BE2  0E00               	movlw	0
  3336  010BE4  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  3337  010BE6  EC3F  F093         	call	_waitMs	;wreg free
  3338                           
  3339                           ;main.c: 256:    for (unsigned char c = 0; c < 12; c++) {
  3340  010BEA  0E00               	movlw	0
  3341  010BEC  0105               	movlb	5	; () banked
  3342  010BEE  6F0E               	movwf	main@c_732& (0+255),b
  3343  010BF0                     l7409:
  3344                           
  3345                           ; BSR set to: 5
  3346  010BF0  0E0B               	movlw	11
  3347  010BF2  650E               	cpfsgt	main@c_732& (0+255),b
  3348  010BF4  D001               	goto	l283
  3349  010BF6  D018               	goto	u7580
  3350  010BF8                     l283:
  3351                           
  3352                           ; BSR set to: 5
  3353                           ;main.c: 257:     led[c] = 1;
  3354                           
  3355                           ; BSR set to: 5
  3356  010BF8  510E               	movf	main@c_732& (0+255),w,b
  3357  010BFA  0D01               	mullw	1
  3358  010BFC  0E6C               	movlw	low _led
  3359  010BFE  24F3               	addwf	prodl,w,c
  3360  010C00  6ED9               	movwf	fsr2l,c
  3361  010C02  0E00               	movlw	high _led
  3362  010C04  20F4               	addwfc	prodh,w,c
  3363  010C06  6EDA               	movwf	fsr2h,c
  3364  010C08  0E01               	movlw	1
  3365  010C0A  6EDF               	movwf	indf2,c
  3366                           
  3367                           ; BSR set to: 5
  3368                           ;main.c: 258:     waitMs(100);
  3369  010C0C  0E64               	movlw	100
  3370  010C0E  0100               	movlb	0	; () banked
  3371  010C10  6FD7               	movwf	waitMs@t& (0+255),b
  3372  010C12  0E00               	movlw	0
  3373  010C14  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  3374  010C16  0E00               	movlw	0
  3375  010C18  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  3376  010C1A  0E00               	movlw	0
  3377  010C1C  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  3378  010C1E  EC3F  F093         	call	_waitMs	;wreg free
  3379                           
  3380                           ;main.c: 259:    }
  3381  010C22  0105               	movlb	5	; () banked
  3382  010C24  2B0E               	incf	main@c_732& (0+255),f,b
  3383  010C26  D7E4               	goto	l7409
  3384  010C28                     u7580:
  3385                           
  3386                           ; BSR set to: 5
  3387                           ;main.c: 260:    waitMs(200);
  3388                           
  3389                           ; BSR set to: 5
  3390  010C28  0EC8               	movlw	200
  3391  010C2A  0100               	movlb	0	; () banked
  3392  010C2C  6FD7               	movwf	waitMs@t& (0+255),b
  3393  010C2E  0E00               	movlw	0
  3394  010C30  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  3395  010C32  0E00               	movlw	0
  3396  010C34  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  3397  010C36  0E00               	movlw	0
  3398  010C38  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  3399  010C3A  EC3F  F093         	call	_waitMs	;wreg free
  3400  010C3E  00FF               	reset		;# 
  3401                           
  3402                           ;main.c: 263:  }
  3403                           
  3404                           ;main.c: 262:   }
  3405  010C40  D5E0               	goto	l256
  3406  010C42                     __end_of_main:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           intcon	equ	0xFF2
  3415                           postinc0	equ	0xFEE
  3416                           wreg	equ	0xFE8
  3417                           postdec1	equ	0xFE5
  3418                           fsr1h	equ	0xFE2
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           fsr2h	equ	0xFDA
  3422                           fsr2l	equ	0xFD9
  3423                           status	equ	0xFD8
  3424                           
  3425 ;; *************** function _waitBootTrigger *****************
  3426 ;; Defined at:
  3427 ;;		line 182 in file "user.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, status,2
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    5
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           	psect	text1
  3456  012782                     __ptext1:
  3457                           	opt stack 0
  3458  012782                     _waitBootTrigger:
  3459                           	opt stack 25
  3460                           
  3461                           ;user.c: 184:  INT2PPSbits.INT2PPS = 0x1e;
  3462                           
  3463                           ;incstack = 0
  3464  012782  010D               	movlb	13	; () banked
  3465  012784  91F2               	bcf	242,0,b	;volatile
  3466  012786  83F2               	bsf	242,1,b	;volatile
  3467  012788  85F2               	bsf	242,2,b	;volatile
  3468  01278A  87F2               	bsf	242,3,b	;volatile
  3469  01278C  89F2               	bsf	242,4,b	;volatile
  3470  01278E  9BF2               	bcf	242,5,b	;volatile
  3471                           
  3472                           ;user.c: 186:  INTCONbits.GIE = 0;
  3473  012790  9EF2               	bcf	intcon,7,c	;volatile
  3474                           
  3475                           ;user.c: 187:  INTCONbits.INT2EDG = 0;
  3476  012792  94F2               	bcf	intcon,2,c	;volatile
  3477                           
  3478                           ;user.c: 188:  IPR0bits.INT2IP = 1;
  3479  012794  010E               	movlb	14	; () banked
  3480  012796  851F               	bsf	31,2,b	;volatile
  3481                           
  3482                           ;user.c: 189:  PIR0bits.INT2IF = 0;
  3483  012798  9533               	bcf	51,2,b	;volatile
  3484                           
  3485                           ;user.c: 190:  PIE0bits.INT2IE = 1;
  3486  01279A  8529               	bsf	41,2,b	;volatile
  3487                           
  3488                           ; BSR set to: 14
  3489                           ;user.c: 192:  IOCBF = 0x00;
  3490  01279C  0E00               	movlw	0
  3491  01279E  6F93               	movwf	147,b	;volatile
  3492                           
  3493                           ;user.c: 193:  IOCEF = 0x00;
  3494  0127A0  0E00               	movlw	0
  3495  0127A2  6FA8               	movwf	168,b	;volatile
  3496                           
  3497                           ; BSR set to: 14
  3498                           ;user.c: 195:  IOCBN = 0xff;
  3499  0127A4  6994               	setf	148,b	;volatile
  3500                           
  3501                           ;user.c: 196:  IOCEN = 0xf0;
  3502  0127A6  0EF0               	movlw	240
  3503  0127A8  6FA9               	movwf	169,b	;volatile
  3504                           
  3505                           ; BSR set to: 14
  3506                           ;user.c: 198:  PIE0bits.IOCIE = 1;
  3507  0127AA  8929               	bsf	41,4,b	;volatile
  3508                           
  3509                           ; BSR set to: 14
  3510                           ;user.c: 199:  IPR0bits.IOCIP = 1;
  3511  0127AC  891F               	bsf	31,4,b	;volatile
  3512                           
  3513                           ; BSR set to: 14
  3514                           ;user.c: 203:   RD7 = 0;
  3515  0127AE  9E8C               	bcf	3980,7,c	;volatile
  3516  0127B0  0003               	sleep		;# 
  3517                           
  3518                           ;user.c: 206:   __nop();
  3519  0127B2  F000               	nop	
  3520                           
  3521                           ;user.c: 207:   RD7 = 1;
  3522  0127B4  8E8C               	bsf	3980,7,c	;volatile
  3523                           
  3524                           ;user.c: 221:  PIE0bits.INT2IE = 0;
  3525  0127B6  010E               	movlb	14	; () banked
  3526  0127B8  9529               	bcf	41,2,b	;volatile
  3527                           
  3528                           ; BSR set to: 14
  3529                           ;user.c: 222:  PIE0bits.IOCIE = 0;
  3530  0127BA  9929               	bcf	41,4,b	;volatile
  3531                           
  3532                           ; BSR set to: 14
  3533                           ;user.c: 223:  RD7 = 0;
  3534  0127BC  9E8C               	bcf	3980,7,c	;volatile
  3535                           
  3536                           ; BSR set to: 14
  3537  0127BE  0012               	return		;funcret
  3538  0127C0                     __end_of_waitBootTrigger:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           intcon	equ	0xFF2
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           postdec1	equ	0xFE5
  3550                           fsr1h	equ	0xFE2
  3551                           fsr1l	equ	0xFE1
  3552                           indf2	equ	0xFDF
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _swProcess *****************
  3558 ;; Defined at:
  3559 ;;		line 259 in file "swMatrix.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  sw2             2   19[BANK0 ] unsigned short 
  3564 ;;  col             1   18[BANK0 ] unsigned char 
  3565 ;;  c               1   22[BANK0 ] unsigned char 
  3566 ;;  row             1   21[BANK0 ] unsigned char 
  3567 ;; Return value:  Size  Location     Type
  3568 ;;                  1    wreg      void 
  3569 ;; Registers used:
  3570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3577 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3578 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3579 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;Total ram usage:       11 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    7
  3583 ;; This function calls:
  3584 ;;		_swPush
  3585 ;;		_swRegister
  3586 ;;		_swUnregister
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592                           	psect	text2
  3593  010C42                     __ptext2:
  3594                           	opt stack 0
  3595  010C42                     _swProcess:
  3596                           	opt stack 23
  3597                           
  3598                           ;swMatrix.c: 261:  unsigned char c;;swMatrix.c: 262:  unsigned char row;;swMatrix.c: 265
      +                          :  LATC = 0x00;
  3599                           
  3600                           ; BSR set to: 14
  3601                           ;incstack = 0
  3602  010C42  0E00               	movlw	0
  3603  010C44  6E7B               	movwf	3963,c	;volatile
  3604                           
  3605                           ;swMatrix.c: 266:  __nop();
  3606  010C46  F000               	nop	
  3607                           
  3608                           ;swMatrix.c: 268:  if (((~(((unsigned short)bitOrderSwap[PORTE] << 8) | bitOrderSwap[POR
      +                          TB])) & 0x0fff))
  3609  010C48  0EFF               	movlw	255
  3610  010C4A  0100               	movlb	0	; () banked
  3611  010C4C  6FE3               	movwf	??_swProcess& (0+255),b
  3612  010C4E  0E0F               	movlw	15
  3613  010C50  6FE4               	movwf	(??_swProcess+1)& (0+255),b
  3614  010C52  508D               	movf	3981,w,c	;volatile
  3615  010C54  0D01               	mullw	1
  3616  010C56  0E33               	movlw	low _bitOrderSwap
  3617  010C58  24F3               	addwf	prodl,w,c
  3618  010C5A  6EF6               	movwf	tblptrl,c
  3619  010C5C  0EF9               	movlw	high _bitOrderSwap
  3620  010C5E  20F4               	addwfc	prodh,w,c
  3621  010C60  6EF7               	movwf	tblptrh,c
  3622  010C62                     	if	1	;There are 3 active tblptr bytes
  3623  010C62  6AF8               	clrf	tblptru,c
  3624  010C64  0E00               	movlw	low (__mediumconst shr (0+16))
  3625  010C66  22F8               	addwfc	tblptru,f,c
  3626  010C68                     	endif
  3627  010C68  0008               	tblrd		*
  3628  010C6A  50F5               	movf	tablat,w,c
  3629  010C6C  6FE6               	movwf	(??_swProcess+3)& (0+255),b
  3630  010C6E  6BE5               	clrf	(??_swProcess+2)& (0+255),b
  3631  010C70  508A               	movf	3978,w,c	;volatile
  3632  010C72  0D01               	mullw	1
  3633  010C74  0E33               	movlw	low _bitOrderSwap
  3634  010C76  24F3               	addwf	prodl,w,c
  3635  010C78  6EF6               	movwf	tblptrl,c
  3636  010C7A  0EF9               	movlw	high _bitOrderSwap
  3637  010C7C  20F4               	addwfc	prodh,w,c
  3638  010C7E  6EF7               	movwf	tblptrh,c
  3639  010C80                     	if	1	;There are 3 active tblptr bytes
  3640  010C80  6AF8               	clrf	tblptru,c
  3641  010C82  0E00               	movlw	low (__mediumconst shr (0+16))
  3642  010C84  22F8               	addwfc	tblptru,f,c
  3643  010C86                     	endif
  3644  010C86  0008               	tblrd		*
  3645  010C88  50F5               	movf	tablat,w,c
  3646  010C8A  13E5               	iorwf	(??_swProcess+2)& (0+255),f,b
  3647  010C8C  0E00               	movlw	0
  3648  010C8E  13E6               	iorwf	(??_swProcess+3)& (0+255),f,b
  3649  010C90  1DE5               	comf	(??_swProcess+2)& (0+255),w,b
  3650  010C92  6FE7               	movwf	(??_swProcess+4)& (0+255),b
  3651  010C94  1DE6               	comf	(??_swProcess+3)& (0+255),w,b
  3652  010C96  6FE8               	movwf	(??_swProcess+5)& (0+255),b
  3653  010C98  51E3               	movf	??_swProcess& (0+255),w,b
  3654  010C9A  17E7               	andwf	(??_swProcess+4)& (0+255),f,b
  3655  010C9C  51E4               	movf	(??_swProcess+1)& (0+255),w,b
  3656  010C9E  17E8               	andwf	(??_swProcess+5)& (0+255),f,b
  3657  010CA0  51E7               	movf	(??_swProcess+4)& (0+255),w,b
  3658  010CA2  11E8               	iorwf	(??_swProcess+5)& (0+255),w,b
  3659  010CA4  B4D8               	btfsc	status,2,c
  3660  010CA6  D081               	goto	l936
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;swMatrix.c: 269:  {;swMatrix.c: 271:   for (row = 0; row < 6; row++)
  3664  010CA8  0E00               	movlw	0
  3665  010CAA  6FEC               	movwf	swProcess@row& (0+255),b
  3666  010CAC                     l6827:
  3667                           
  3668                           ; BSR set to: 0
  3669  010CAC  0E05               	movlw	5
  3670  010CAE  65EC               	cpfsgt	swProcess@row& (0+255),b
  3671  010CB0  D001               	goto	l937
  3672  010CB2  D051               	goto	u6470
  3673  010CB4                     l937:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;swMatrix.c: 272:   {;swMatrix.c: 273:    LATC = 0xff;
  3677  010CB4  687B               	setf	3963,c	;volatile
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;swMatrix.c: 275:    TRISB &= ~0xff;
  3681  010CB6  0E00               	movlw	0
  3682  010CB8  6E82               	movwf	3970,c	;volatile
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;swMatrix.c: 276:    TRISE &= ~0xf0;
  3686  010CBA  0E0F               	movlw	15
  3687  010CBC  1685               	andwf	3973,f,c	;volatile
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;swMatrix.c: 277:    TRISB |= 0xff;
  3691  010CBE  6882               	setf	3970,c	;volatile
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;swMatrix.c: 278:    TRISE |= 0xf0;
  3695  010CC0  0EF0               	movlw	240
  3696  010CC2  1285               	iorwf	3973,f,c	;volatile
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;swMatrix.c: 280:    LATC = rowTable[row];
  3700  010CC4  51EC               	movf	swProcess@row& (0+255),w,b
  3701  010CC6  0D01               	mullw	1
  3702  010CC8  0E5B               	movlw	low _rowTable
  3703  010CCA  24F3               	addwf	prodl,w,c
  3704  010CCC  6EF6               	movwf	tblptrl,c
  3705  010CCE  0EFB               	movlw	high _rowTable
  3706  010CD0  20F4               	addwfc	prodh,w,c
  3707  010CD2  6EF7               	movwf	tblptrh,c
  3708  010CD4                     	if	1	;There are 3 active tblptr bytes
  3709  010CD4  6AF8               	clrf	tblptru,c
  3710  010CD6  0E00               	movlw	low (__mediumconst shr (0+16))
  3711  010CD8  22F8               	addwfc	tblptru,f,c
  3712  010CDA                     	endif
  3713  010CDA  0008               	tblrd		*
  3714  010CDC  CFF5 FF7B          	movff	tablat,3963	;volatile
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;swMatrix.c: 281:    __nop();
  3718  010CE0  F000               	nop	
  3719                           
  3720                           ;swMatrix.c: 282:    sw[row] = ((~(((unsigned short)bitOrderSwap[PORTE] << 8) | bitOrder
      +                          Swap[PORTB])) & 0x0fff);
  3721  010CE2  0EFF               	movlw	255
  3722  010CE4  0100               	movlb	0	; () banked
  3723  010CE6  6FE3               	movwf	??_swProcess& (0+255),b
  3724  010CE8  0E0F               	movlw	15
  3725  010CEA  6FE4               	movwf	(??_swProcess+1)& (0+255),b
  3726  010CEC  508D               	movf	3981,w,c	;volatile
  3727  010CEE  0D01               	mullw	1
  3728  010CF0  0E33               	movlw	low _bitOrderSwap
  3729  010CF2  24F3               	addwf	prodl,w,c
  3730  010CF4  6EF6               	movwf	tblptrl,c
  3731  010CF6  0EF9               	movlw	high _bitOrderSwap
  3732  010CF8  20F4               	addwfc	prodh,w,c
  3733  010CFA  6EF7               	movwf	tblptrh,c
  3734  010CFC                     	if	1	;There are 3 active tblptr bytes
  3735  010CFC  6AF8               	clrf	tblptru,c
  3736  010CFE  0E00               	movlw	low (__mediumconst shr (0+16))
  3737  010D00  22F8               	addwfc	tblptru,f,c
  3738  010D02                     	endif
  3739  010D02  0008               	tblrd		*
  3740  010D04  50F5               	movf	tablat,w,c
  3741  010D06  6FE6               	movwf	(??_swProcess+3)& (0+255),b
  3742  010D08  6BE5               	clrf	(??_swProcess+2)& (0+255),b
  3743  010D0A  508A               	movf	3978,w,c	;volatile
  3744  010D0C  0D01               	mullw	1
  3745  010D0E  0E33               	movlw	low _bitOrderSwap
  3746  010D10  24F3               	addwf	prodl,w,c
  3747  010D12  6EF6               	movwf	tblptrl,c
  3748  010D14  0EF9               	movlw	high _bitOrderSwap
  3749  010D16  20F4               	addwfc	prodh,w,c
  3750  010D18  6EF7               	movwf	tblptrh,c
  3751  010D1A                     	if	1	;There are 3 active tblptr bytes
  3752  010D1A  6AF8               	clrf	tblptru,c
  3753  010D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  3754  010D1E  22F8               	addwfc	tblptru,f,c
  3755  010D20                     	endif
  3756  010D20  0008               	tblrd		*
  3757  010D22  50F5               	movf	tablat,w,c
  3758  010D24  13E5               	iorwf	(??_swProcess+2)& (0+255),f,b
  3759  010D26  0E00               	movlw	0
  3760  010D28  13E6               	iorwf	(??_swProcess+3)& (0+255),f,b
  3761  010D2A  1DE5               	comf	(??_swProcess+2)& (0+255),w,b
  3762  010D2C  6FE7               	movwf	(??_swProcess+4)& (0+255),b
  3763  010D2E  1DE6               	comf	(??_swProcess+3)& (0+255),w,b
  3764  010D30  6FE8               	movwf	(??_swProcess+5)& (0+255),b
  3765  010D32  51E3               	movf	??_swProcess& (0+255),w,b
  3766  010D34  17E7               	andwf	(??_swProcess+4)& (0+255),f,b
  3767  010D36  51E4               	movf	(??_swProcess+1)& (0+255),w,b
  3768  010D38  17E8               	andwf	(??_swProcess+5)& (0+255),f,b
  3769  010D3A  51EC               	movf	swProcess@row& (0+255),w,b
  3770  010D3C  0D02               	mullw	2
  3771  010D3E  0E60               	movlw	low _sw
  3772  010D40  24F3               	addwf	prodl,w,c
  3773  010D42  6ED9               	movwf	fsr2l,c
  3774  010D44  0E00               	movlw	high _sw
  3775  010D46  20F4               	addwfc	prodh,w,c
  3776  010D48  6EDA               	movwf	fsr2h,c
  3777  010D4A  C0E7  FFDE         	movff	??_swProcess+4,postinc2
  3778  010D4E  C0E8  FFDD         	movff	??_swProcess+5,postdec2
  3779                           
  3780                           ; BSR set to: 0
  3781                           ;swMatrix.c: 283:   }
  3782  010D52  2BEC               	incf	swProcess@row& (0+255),f,b
  3783  010D54  D7AB               	goto	l6827
  3784  010D56                     u6470:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;swMatrix.c: 285:   LATC = 0x00;
  3788                           
  3789                           ; BSR set to: 0
  3790  010D56  0E00               	movlw	0
  3791  010D58  6E7B               	movwf	3963,c	;volatile
  3792                           
  3793                           ;swMatrix.c: 289:   for (row = 0; row < 6; row++)
  3794  010D5A  0E00               	movlw	0
  3795  010D5C  6FEC               	movwf	swProcess@row& (0+255),b
  3796  010D5E                     l6851:
  3797                           
  3798                           ; BSR set to: 0
  3799  010D5E  0E05               	movlw	5
  3800  010D60  65EC               	cpfsgt	swProcess@row& (0+255),b
  3801  010D62  D001               	goto	l939
  3802  010D64  D036               	goto	u6530
  3803  010D66                     l939:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;swMatrix.c: 290:   {;swMatrix.c: 291:    unsigned short sw2 = sw[row];
  3807                           
  3808                           ; BSR set to: 0
  3809  010D66  51EC               	movf	swProcess@row& (0+255),w,b
  3810  010D68  0D02               	mullw	2
  3811  010D6A  0E60               	movlw	low _sw
  3812  010D6C  24F3               	addwf	prodl,w,c
  3813  010D6E  6ED9               	movwf	fsr2l,c
  3814  010D70  0E00               	movlw	high _sw
  3815  010D72  20F4               	addwfc	prodh,w,c
  3816  010D74  6EDA               	movwf	fsr2h,c
  3817  010D76  CFDE F0EA          	movff	postinc2,swProcess@sw2
  3818  010D7A  CFDD F0EB          	movff	postdec2,swProcess@sw2+1
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;swMatrix.c: 292:    unsigned char col = 0;
  3822  010D7E  0E00               	movlw	0
  3823  010D80  6FE9               	movwf	swProcess@col& (0+255),b
  3824                           
  3825                           ;swMatrix.c: 293:    while (sw2)
  3826  010D82  D00D               	goto	l941
  3827  010D84                     l942:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;swMatrix.c: 294:    {;swMatrix.c: 295:     if (sw2 & 1)
  3831  010D84  A1EA               	btfss	swProcess@sw2& (0+255),0,b
  3832  010D86  D006               	goto	l943
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;swMatrix.c: 296:     {;swMatrix.c: 297:      swRegister(row * 16 + col);
  3836  010D88  51EC               	movf	swProcess@row& (0+255),w,b
  3837  010D8A  0D10               	mullw	16
  3838  010D8C  50F3               	movf	prodl,w,c
  3839  010D8E  25E9               	addwf	swProcess@col& (0+255),w,b
  3840  010D90  EC8B  F087         	call	_swRegister
  3841  010D94                     l943:
  3842                           
  3843                           ;swMatrix.c: 299:     sw2 >>= 1;
  3844  010D94  0100               	movlb	0	; () banked
  3845  010D96  90D8               	bcf	status,0,c
  3846  010D98  33EB               	rrcf	(swProcess@sw2+1)& (0+255),f,b
  3847  010D9A  33EA               	rrcf	swProcess@sw2& (0+255),f,b
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;swMatrix.c: 300:     col++;
  3851  010D9C  2BE9               	incf	swProcess@col& (0+255),f,b
  3852  010D9E                     l941:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;swMatrix.c: 293:    while (sw2)
  3856                           
  3857                           ; BSR set to: 0
  3858  010D9E  51EA               	movf	swProcess@sw2& (0+255),w,b
  3859  010DA0  11EB               	iorwf	(swProcess@sw2+1)& (0+255),w,b
  3860  010DA2  A4D8               	btfss	status,2,c
  3861  010DA4  D7EF               	goto	l942
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;swMatrix.c: 302:   }
  3865                           
  3866                           ; BSR set to: 0
  3867  010DA6  2BEC               	incf	swProcess@row& (0+255),f,b
  3868  010DA8  D7DA               	goto	l6851
  3869  010DAA                     l936:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;swMatrix.c: 305:  {;swMatrix.c: 307:   for (row = 0; row < 6; row++)
  3873                           
  3874                           ; BSR set to: 0
  3875  010DAA  0E00               	movlw	0
  3876  010DAC  6FEC               	movwf	swProcess@row& (0+255),b
  3877  010DAE                     l6873:
  3878                           
  3879                           ; BSR set to: 0
  3880  010DAE  0E05               	movlw	5
  3881  010DB0  65EC               	cpfsgt	swProcess@row& (0+255),b
  3882  010DB2  D001               	goto	l946
  3883  010DB4  D00E               	goto	u6530
  3884  010DB6                     l946:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;swMatrix.c: 308:   {;swMatrix.c: 309:    sw[row] = 0x0000;
  3888                           
  3889                           ; BSR set to: 0
  3890  010DB6  51EC               	movf	swProcess@row& (0+255),w,b
  3891  010DB8  0D02               	mullw	2
  3892  010DBA  0E60               	movlw	low _sw
  3893  010DBC  24F3               	addwf	prodl,w,c
  3894  010DBE  6ED9               	movwf	fsr2l,c
  3895  010DC0  0E00               	movlw	high _sw
  3896  010DC2  20F4               	addwfc	prodh,w,c
  3897  010DC4  6EDA               	movwf	fsr2h,c
  3898  010DC6  0E00               	movlw	0
  3899  010DC8  6EDE               	movwf	postinc2,c
  3900  010DCA  0E00               	movlw	0
  3901  010DCC  6EDD               	movwf	postdec2,c
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;swMatrix.c: 310:   }
  3905  010DCE  2BEC               	incf	swProcess@row& (0+255),f,b
  3906  010DD0  D7EE               	goto	l6873
  3907  010DD2                     u6530:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;swMatrix.c: 313:  for (c = 0; c < 10; c++)
  3911                           
  3912                           ; BSR set to: 0
  3913                           
  3914                           ;swMatrix.c: 311:  }
  3915                           
  3916                           ; BSR set to: 0
  3917  010DD2  0E00               	movlw	0
  3918  010DD4  6FED               	movwf	swProcess@c& (0+255),b
  3919  010DD6                     l6885:
  3920                           
  3921                           ; BSR set to: 0
  3922  010DD6  0E09               	movlw	9
  3923  010DD8  65ED               	cpfsgt	swProcess@c& (0+255),b
  3924  010DDA  D001               	goto	l948
  3925  010DDC  0012               	return	
  3926  010DDE                     l948:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;swMatrix.c: 314:  {;swMatrix.c: 315:   if (mSw[c].num != 0xff)
  3930                           
  3931                           ; BSR set to: 0
  3932  010DDE  51ED               	movf	swProcess@c& (0+255),w,b
  3933  010DE0  0D07               	mullw	7
  3934  010DE2  0E02               	movlw	2
  3935  010DE4  26F3               	addwf	prodl,f,c
  3936  010DE6  0E00               	movlw	0
  3937  010DE8  22F4               	addwfc	prodh,f,c
  3938  010DEA  0E8D               	movlw	low _mSw
  3939  010DEC  24F3               	addwf	prodl,w,c
  3940  010DEE  6ED9               	movwf	fsr2l,c
  3941  010DF0  0E00               	movlw	high _mSw
  3942  010DF2  20F4               	addwfc	prodh,w,c
  3943  010DF4  6EDA               	movwf	fsr2h,c
  3944  010DF6  28DE               	incf	postinc2,w,c
  3945  010DF8  B4D8               	btfsc	status,2,c
  3946  010DFA  D08A               	goto	l957
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;swMatrix.c: 316:   {;swMatrix.c: 317:    if ((sw[mSw[c].num >> 4] >> (mSw[c].num & 0x0f
      +                          ))& 1)
  3950  010DFC  51ED               	movf	swProcess@c& (0+255),w,b
  3951  010DFE  0D07               	mullw	7
  3952  010E00  0E02               	movlw	2
  3953  010E02  26F3               	addwf	prodl,f,c
  3954  010E04  0E00               	movlw	0
  3955  010E06  22F4               	addwfc	prodh,f,c
  3956  010E08  0E8D               	movlw	low _mSw
  3957  010E0A  24F3               	addwf	prodl,w,c
  3958  010E0C  6ED9               	movwf	fsr2l,c
  3959  010E0E  0E00               	movlw	high _mSw
  3960  010E10  20F4               	addwfc	prodh,w,c
  3961  010E12  6EDA               	movwf	fsr2h,c
  3962  010E14  50DF               	movf	indf2,w,c
  3963  010E16  6FE3               	movwf	??_swProcess& (0+255),b
  3964  010E18  0E0F               	movlw	15
  3965  010E1A  17E3               	andwf	??_swProcess& (0+255),f,b
  3966  010E1C  51ED               	movf	swProcess@c& (0+255),w,b
  3967  010E1E  0D07               	mullw	7
  3968  010E20  0E02               	movlw	2
  3969  010E22  26F3               	addwf	prodl,f,c
  3970  010E24  0E00               	movlw	0
  3971  010E26  22F4               	addwfc	prodh,f,c
  3972  010E28  0E8D               	movlw	low _mSw
  3973  010E2A  24F3               	addwf	prodl,w,c
  3974  010E2C  6ED9               	movwf	fsr2l,c
  3975  010E2E  0E00               	movlw	high _mSw
  3976  010E30  20F4               	addwfc	prodh,w,c
  3977  010E32  6EDA               	movwf	fsr2h,c
  3978  010E34  50DF               	movf	indf2,w,c
  3979  010E36  6FE4               	movwf	(??_swProcess+1)& (0+255),b
  3980  010E38  39E4               	swapf	(??_swProcess+1)& (0+255),w,b
  3981  010E3A  0B0F               	andlw	15
  3982  010E3C  6FE5               	movwf	(??_swProcess+2)& (0+255),b
  3983  010E3E  6BE6               	clrf	(??_swProcess+3)& (0+255),b
  3984  010E40  90D8               	bcf	status,0,c
  3985  010E42  37E5               	rlcf	(??_swProcess+2)& (0+255),f,b
  3986  010E44  37E6               	rlcf	(??_swProcess+3)& (0+255),f,b
  3987  010E46  0E60               	movlw	low _sw
  3988  010E48  25E5               	addwf	(??_swProcess+2)& (0+255),w,b
  3989  010E4A  6ED9               	movwf	fsr2l,c
  3990  010E4C  0E00               	movlw	high _sw
  3991  010E4E  21E6               	addwfc	(??_swProcess+3)& (0+255),w,b
  3992  010E50  6EDA               	movwf	fsr2h,c
  3993  010E52  CFDE F0E7          	movff	postinc2,??_swProcess+4
  3994  010E56  CFDD F0E8          	movff	postdec2,??_swProcess+5
  3995  010E5A  2BE3               	incf	??_swProcess& (0+255),f,b
  3996  010E5C  D003               	goto	u6564
  3997  010E5E                     u6565:
  3998  010E5E  90D8               	bcf	status,0,c
  3999  010E60  33E8               	rrcf	(??_swProcess+5)& (0+255),f,b
  4000  010E62  33E7               	rrcf	(??_swProcess+4)& (0+255),f,b
  4001  010E64                     u6564:
  4002  010E64  2FE3               	decfsz	??_swProcess& (0+255),f,b
  4003  010E66  D7FB               	goto	u6565
  4004  010E68  0100               	movlb	0	; () banked
  4005  010E6A  A1E7               	btfss	(??_swProcess+4)& (0+255),0,b
  4006  010E6C  D038               	goto	l951
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;swMatrix.c: 318:    {;swMatrix.c: 319:     if (mSw[c].count == 5)
  4010  010E6E  51ED               	movf	swProcess@c& (0+255),w,b
  4011  010E70  0D07               	mullw	7
  4012  010E72  0E8D               	movlw	low _mSw
  4013  010E74  24F3               	addwf	prodl,w,c
  4014  010E76  6ED9               	movwf	fsr2l,c
  4015  010E78  0E00               	movlw	high _mSw
  4016  010E7A  20F4               	addwfc	prodh,w,c
  4017  010E7C  6EDA               	movwf	fsr2h,c
  4018  010E7E  0E05               	movlw	5
  4019  010E80  18DE               	xorwf	postinc2,w,c
  4020  010E82  A4D8               	btfss	status,2,c
  4021  010E84  D021               	goto	l952
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;swMatrix.c: 320:     {;swMatrix.c: 321:      if (!mSw[c].state)
  4025  010E86  51ED               	movf	swProcess@c& (0+255),w,b
  4026  010E88  0D07               	mullw	7
  4027  010E8A  0E01               	movlw	1
  4028  010E8C  26F3               	addwf	prodl,f,c
  4029  010E8E  0E00               	movlw	0
  4030  010E90  22F4               	addwfc	prodh,f,c
  4031  010E92  0E8D               	movlw	low _mSw
  4032  010E94  24F3               	addwf	prodl,w,c
  4033  010E96  6ED9               	movwf	fsr2l,c
  4034  010E98  0E00               	movlw	high _mSw
  4035  010E9A  20F4               	addwfc	prodh,w,c
  4036  010E9C  6EDA               	movwf	fsr2h,c
  4037  010E9E  50DF               	movf	indf2,w,c
  4038  010EA0  A4D8               	btfss	status,2,c
  4039  010EA2  D036               	goto	l957
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;swMatrix.c: 322:      {;swMatrix.c: 323:       mSw[c].state = 1;
  4043  010EA4  51ED               	movf	swProcess@c& (0+255),w,b
  4044  010EA6  0D07               	mullw	7
  4045  010EA8  0E01               	movlw	1
  4046  010EAA  26F3               	addwf	prodl,f,c
  4047  010EAC  0E00               	movlw	0
  4048  010EAE  22F4               	addwfc	prodh,f,c
  4049  010EB0  0E8D               	movlw	low _mSw
  4050  010EB2  24F3               	addwf	prodl,w,c
  4051  010EB4  6ED9               	movwf	fsr2l,c
  4052  010EB6  0E00               	movlw	high _mSw
  4053  010EB8  20F4               	addwfc	prodh,w,c
  4054  010EBA  6EDA               	movwf	fsr2h,c
  4055  010EBC  0E01               	movlw	1
  4056  010EBE  6EDF               	movwf	indf2,c
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;swMatrix.c: 324:       swPush(c);
  4060  010EC0  51ED               	movf	swProcess@c& (0+255),w,b
  4061  010EC2  EC00  F080         	call	_swPush
  4062                           
  4063                           ;swMatrix.c: 326:     }
  4064                           
  4065                           ;swMatrix.c: 325:      }
  4066  010EC6  D024               	goto	l957
  4067  010EC8                     l952:
  4068                           
  4069                           ;swMatrix.c: 328:     {;swMatrix.c: 329:      mSw[c].count++;
  4070  010EC8  0100               	movlb	0	; () banked
  4071  010ECA  51ED               	movf	swProcess@c& (0+255),w,b
  4072  010ECC  0D07               	mullw	7
  4073  010ECE  0E8D               	movlw	low _mSw
  4074  010ED0  24F3               	addwf	prodl,w,c
  4075  010ED2  6ED9               	movwf	fsr2l,c
  4076  010ED4  0E00               	movlw	high _mSw
  4077  010ED6  20F4               	addwfc	prodh,w,c
  4078  010ED8  6EDA               	movwf	fsr2h,c
  4079  010EDA  2ADF               	incf	indf2,f,c
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;swMatrix.c: 331:    }
  4083                           
  4084                           ;swMatrix.c: 330:     }
  4085  010EDC  D019               	goto	l957
  4086  010EDE                     l951:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;swMatrix.c: 333:    {;swMatrix.c: 334:     if (mSw[c].count == 0)
  4090                           
  4091                           ; BSR set to: 0
  4092  010EDE  51ED               	movf	swProcess@c& (0+255),w,b
  4093  010EE0  0D07               	mullw	7
  4094  010EE2  0E8D               	movlw	low _mSw
  4095  010EE4  24F3               	addwf	prodl,w,c
  4096  010EE6  6ED9               	movwf	fsr2l,c
  4097  010EE8  0E00               	movlw	high _mSw
  4098  010EEA  20F4               	addwfc	prodh,w,c
  4099  010EEC  6EDA               	movwf	fsr2h,c
  4100  010EEE  50DF               	movf	indf2,w,c
  4101  010EF0  A4D8               	btfss	status,2,c
  4102  010EF2  D004               	goto	l956
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;swMatrix.c: 335:     {;swMatrix.c: 336:      swUnregister(c);
  4106  010EF4  51ED               	movf	swProcess@c& (0+255),w,b
  4107  010EF6  ECC2  F08A         	call	_swUnregister
  4108                           
  4109                           ;swMatrix.c: 337:     }
  4110  010EFA  D00A               	goto	l957
  4111  010EFC                     l956:
  4112                           
  4113                           ;swMatrix.c: 339:     {;swMatrix.c: 340:      mSw[c].count--;
  4114  010EFC  0100               	movlb	0	; () banked
  4115  010EFE  51ED               	movf	swProcess@c& (0+255),w,b
  4116  010F00  0D07               	mullw	7
  4117  010F02  0E8D               	movlw	low _mSw
  4118  010F04  24F3               	addwf	prodl,w,c
  4119  010F06  6ED9               	movwf	fsr2l,c
  4120  010F08  0E00               	movlw	high _mSw
  4121  010F0A  20F4               	addwfc	prodh,w,c
  4122  010F0C  6EDA               	movwf	fsr2h,c
  4123  010F0E  06DF               	decf	indf2,f,c
  4124  010F10                     l957:
  4125                           
  4126                           ;swMatrix.c: 344:  }
  4127                           
  4128                           ; BSR set to: 0
  4129                           
  4130                           ;swMatrix.c: 343:   }
  4131                           
  4132                           ; BSR set to: 0
  4133                           
  4134                           ;swMatrix.c: 342:    }
  4135                           
  4136                           ; BSR set to: 0
  4137  010F10  0100               	movlb	0	; () banked
  4138  010F12  2BED               	incf	swProcess@c& (0+255),f,b
  4139  010F14  D760               	goto	l6885
  4140  010F16                     __end_of_swProcess:
  4141                           	opt stack 0
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           intcon	equ	0xFF2
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _swUnregister *****************
  4162 ;; Defined at:
  4163 ;;		line 149 in file "swMatrix.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  c               1    wreg     unsigned char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  c               1    7[BANK0 ] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;Total ram usage:        2 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    6
  4184 ;; This function calls:
  4185 ;;		_swRelease
  4186 ;; This function is called by:
  4187 ;;		_swProcess
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text3
  4192  011584                     __ptext3:
  4193                           	opt stack 0
  4194  011584                     _swUnregister:
  4195                           	opt stack 23
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;incstack = 0
  4199                           ;swUnregister@c stored from wreg
  4200  011584  0100               	movlb	0	; () banked
  4201  011586  6FDE               	movwf	swUnregister@c& (0+255),b
  4202                           
  4203                           ;swMatrix.c: 149: void swUnregister(unsigned char c);swMatrix.c: 150: {;swMatrix.c: 151:
      +                            swRelease(c);
  4204  011588  0100               	movlb	0	; () banked
  4205  01158A  51DE               	movf	swUnregister@c& (0+255),w,b
  4206  01158C  ECA4  F08B         	call	_swRelease
  4207                           
  4208                           ;swMatrix.c: 152:  mSw[c].state = 0;
  4209  011590  0100               	movlb	0	; () banked
  4210  011592  51DE               	movf	swUnregister@c& (0+255),w,b
  4211  011594  0D07               	mullw	7
  4212  011596  0E01               	movlw	1
  4213  011598  26F3               	addwf	prodl,f,c
  4214  01159A  0E00               	movlw	0
  4215  01159C  22F4               	addwfc	prodh,f,c
  4216  01159E  0E8D               	movlw	low _mSw
  4217  0115A0  24F3               	addwf	prodl,w,c
  4218  0115A2  6ED9               	movwf	fsr2l,c
  4219  0115A4  0E00               	movlw	high _mSw
  4220  0115A6  20F4               	addwfc	prodh,w,c
  4221  0115A8  6EDA               	movwf	fsr2h,c
  4222  0115AA  0E00               	movlw	0
  4223  0115AC  6EDF               	movwf	indf2,c
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;swMatrix.c: 153:  mSw[c].num = 0xff;
  4227  0115AE  51DE               	movf	swUnregister@c& (0+255),w,b
  4228  0115B0  0D07               	mullw	7
  4229  0115B2  0E02               	movlw	2
  4230  0115B4  26F3               	addwf	prodl,f,c
  4231  0115B6  0E00               	movlw	0
  4232  0115B8  22F4               	addwfc	prodh,f,c
  4233  0115BA  0E8D               	movlw	low _mSw
  4234  0115BC  24F3               	addwf	prodl,w,c
  4235  0115BE  6ED9               	movwf	fsr2l,c
  4236  0115C0  0E00               	movlw	high _mSw
  4237  0115C2  20F4               	addwfc	prodh,w,c
  4238  0115C4  6EDA               	movwf	fsr2h,c
  4239  0115C6  0EFF               	movlw	255
  4240  0115C8  6EDF               	movwf	indf2,c
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;swMatrix.c: 154:  mSw[c].kc = 0;
  4244  0115CA  51DE               	movf	swUnregister@c& (0+255),w,b
  4245  0115CC  0D07               	mullw	7
  4246  0115CE  0E05               	movlw	5
  4247  0115D0  26F3               	addwf	prodl,f,c
  4248  0115D2  0E00               	movlw	0
  4249  0115D4  22F4               	addwfc	prodh,f,c
  4250  0115D6  0E8D               	movlw	low _mSw
  4251  0115D8  24F3               	addwf	prodl,w,c
  4252  0115DA  6ED9               	movwf	fsr2l,c
  4253  0115DC  0E00               	movlw	high _mSw
  4254  0115DE  20F4               	addwfc	prodh,w,c
  4255  0115E0  6EDA               	movwf	fsr2h,c
  4256  0115E2  0E00               	movlw	0
  4257  0115E4  6EDE               	movwf	postinc2,c
  4258  0115E6  0E00               	movlw	0
  4259  0115E8  6EDD               	movwf	postdec2,c
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;swMatrix.c: 156:  if (mSw[c].next == 0xff)
  4263  0115EA  51DE               	movf	swUnregister@c& (0+255),w,b
  4264  0115EC  0D07               	mullw	7
  4265  0115EE  0E04               	movlw	4
  4266  0115F0  26F3               	addwf	prodl,f,c
  4267  0115F2  0E00               	movlw	0
  4268  0115F4  22F4               	addwfc	prodh,f,c
  4269  0115F6  0E8D               	movlw	low _mSw
  4270  0115F8  24F3               	addwf	prodl,w,c
  4271  0115FA  6ED9               	movwf	fsr2l,c
  4272  0115FC  0E00               	movlw	high _mSw
  4273  0115FE  20F4               	addwfc	prodh,w,c
  4274  011600  6EDA               	movwf	fsr2h,c
  4275  011602  28DE               	incf	postinc2,w,c
  4276  011604  A4D8               	btfss	status,2,c
  4277  011606  D020               	goto	l902
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;swMatrix.c: 157:  {;swMatrix.c: 158:   lastPush = mSw[c].pre;
  4281  011608  51DE               	movf	swUnregister@c& (0+255),w,b
  4282  01160A  0D07               	mullw	7
  4283  01160C  0E03               	movlw	3
  4284  01160E  26F3               	addwf	prodl,f,c
  4285  011610  0E00               	movlw	0
  4286  011612  22F4               	addwfc	prodh,f,c
  4287  011614  0E8D               	movlw	low _mSw
  4288  011616  24F3               	addwf	prodl,w,c
  4289  011618  6ED9               	movwf	fsr2l,c
  4290  01161A  0E00               	movlw	high _mSw
  4291  01161C  20F4               	addwfc	prodh,w,c
  4292  01161E  6EDA               	movwf	fsr2h,c
  4293  011620  50DF               	movf	indf2,w,c
  4294  011622  6E45               	movwf	_lastPush,c
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;swMatrix.c: 159:   if (lastPush != 0xff)
  4298  011624  2845               	incf	_lastPush,w,c
  4299  011626  B4D8               	btfsc	status,2,c
  4300  011628  D037               	goto	l904
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;swMatrix.c: 160:   {;swMatrix.c: 161:    mSw[lastPush].next = 0xff;
  4304  01162A  5045               	movf	_lastPush,w,c
  4305  01162C  0D07               	mullw	7
  4306  01162E  0E04               	movlw	4
  4307  011630  26F3               	addwf	prodl,f,c
  4308  011632  0E00               	movlw	0
  4309  011634  22F4               	addwfc	prodh,f,c
  4310  011636  0E8D               	movlw	low _mSw
  4311  011638  24F3               	addwf	prodl,w,c
  4312  01163A  6ED9               	movwf	fsr2l,c
  4313  01163C  0E00               	movlw	high _mSw
  4314  01163E  20F4               	addwfc	prodh,w,c
  4315  011640  6EDA               	movwf	fsr2h,c
  4316  011642  0EFF               	movlw	255
  4317  011644  6EDF               	movwf	indf2,c
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;swMatrix.c: 163:  }
  4321                           
  4322                           ;swMatrix.c: 162:   }
  4323  011646  D028               	goto	l904
  4324  011648                     l902:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;swMatrix.c: 165:  {;swMatrix.c: 166:   mSw[mSw[c].next].pre = mSw[c].pre;
  4328                           
  4329                           ; BSR set to: 0
  4330  011648  51DE               	movf	swUnregister@c& (0+255),w,b
  4331  01164A  0D07               	mullw	7
  4332  01164C  0E03               	movlw	3
  4333  01164E  26F3               	addwf	prodl,f,c
  4334  011650  0E00               	movlw	0
  4335  011652  22F4               	addwfc	prodh,f,c
  4336  011654  0E8D               	movlw	low _mSw
  4337  011656  24F3               	addwf	prodl,w,c
  4338  011658  6ED9               	movwf	fsr2l,c
  4339  01165A  0E00               	movlw	high _mSw
  4340  01165C  20F4               	addwfc	prodh,w,c
  4341  01165E  6EDA               	movwf	fsr2h,c
  4342  011660  51DE               	movf	swUnregister@c& (0+255),w,b
  4343  011662  0D07               	mullw	7
  4344  011664  0E04               	movlw	4
  4345  011666  26F3               	addwf	prodl,f,c
  4346  011668  0E00               	movlw	0
  4347  01166A  22F4               	addwfc	prodh,f,c
  4348  01166C  0E8D               	movlw	low _mSw
  4349  01166E  24F3               	addwf	prodl,w,c
  4350  011670  6EE1               	movwf	fsr1l,c
  4351  011672  0E00               	movlw	high _mSw
  4352  011674  20F4               	addwfc	prodh,w,c
  4353  011676  6EE2               	movwf	fsr1h,c
  4354  011678  50E7               	movf	indf1,w,c
  4355  01167A  6FDD               	movwf	??_swUnregister& (0+255),b
  4356  01167C  51DD               	movf	??_swUnregister& (0+255),w,b
  4357  01167E  0D07               	mullw	7
  4358  011680  0E03               	movlw	3
  4359  011682  26F3               	addwf	prodl,f,c
  4360  011684  0E00               	movlw	0
  4361  011686  22F4               	addwfc	prodh,f,c
  4362  011688  0E8D               	movlw	low _mSw
  4363  01168A  24F3               	addwf	prodl,w,c
  4364  01168C  6EE1               	movwf	fsr1l,c
  4365  01168E  0E00               	movlw	high _mSw
  4366  011690  20F4               	addwfc	prodh,w,c
  4367  011692  6EE2               	movwf	fsr1h,c
  4368  011694  CFDF FFE7          	movff	indf2,indf1
  4369  011698                     l904:
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;swMatrix.c: 169:  if (mSw[c].pre == 0xff)
  4373                           
  4374                           ; BSR set to: 0
  4375  011698  51DE               	movf	swUnregister@c& (0+255),w,b
  4376  01169A  0D07               	mullw	7
  4377  01169C  0E03               	movlw	3
  4378  01169E  26F3               	addwf	prodl,f,c
  4379  0116A0  0E00               	movlw	0
  4380  0116A2  22F4               	addwfc	prodh,f,c
  4381  0116A4  0E8D               	movlw	low _mSw
  4382  0116A6  24F3               	addwf	prodl,w,c
  4383  0116A8  6ED9               	movwf	fsr2l,c
  4384  0116AA  0E00               	movlw	high _mSw
  4385  0116AC  20F4               	addwfc	prodh,w,c
  4386  0116AE  6EDA               	movwf	fsr2h,c
  4387  0116B0  28DE               	incf	postinc2,w,c
  4388  0116B2  A4D8               	btfss	status,2,c
  4389  0116B4  D020               	goto	l905
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;swMatrix.c: 170:  {;swMatrix.c: 171:   firstPush = mSw[c].next;
  4393  0116B6  51DE               	movf	swUnregister@c& (0+255),w,b
  4394  0116B8  0D07               	mullw	7
  4395  0116BA  0E04               	movlw	4
  4396  0116BC  26F3               	addwf	prodl,f,c
  4397  0116BE  0E00               	movlw	0
  4398  0116C0  22F4               	addwfc	prodh,f,c
  4399  0116C2  0E8D               	movlw	low _mSw
  4400  0116C4  24F3               	addwf	prodl,w,c
  4401  0116C6  6ED9               	movwf	fsr2l,c
  4402  0116C8  0E00               	movlw	high _mSw
  4403  0116CA  20F4               	addwfc	prodh,w,c
  4404  0116CC  6EDA               	movwf	fsr2h,c
  4405  0116CE  50DF               	movf	indf2,w,c
  4406  0116D0  6E46               	movwf	_firstPush,c
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;swMatrix.c: 172:   if (firstPush != 0xff)
  4410  0116D2  2846               	incf	_firstPush,w,c
  4411  0116D4  B4D8               	btfsc	status,2,c
  4412  0116D6  0012               	return	
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;swMatrix.c: 173:   {;swMatrix.c: 174:    mSw[firstPush].pre = 0xff;
  4416  0116D8  5046               	movf	_firstPush,w,c
  4417  0116DA  0D07               	mullw	7
  4418  0116DC  0E03               	movlw	3
  4419  0116DE  26F3               	addwf	prodl,f,c
  4420  0116E0  0E00               	movlw	0
  4421  0116E2  22F4               	addwfc	prodh,f,c
  4422  0116E4  0E8D               	movlw	low _mSw
  4423  0116E6  24F3               	addwf	prodl,w,c
  4424  0116E8  6ED9               	movwf	fsr2l,c
  4425  0116EA  0E00               	movlw	high _mSw
  4426  0116EC  20F4               	addwfc	prodh,w,c
  4427  0116EE  6EDA               	movwf	fsr2h,c
  4428  0116F0  0EFF               	movlw	255
  4429  0116F2  6EDF               	movwf	indf2,c
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;swMatrix.c: 176:  }
  4433                           
  4434                           ;swMatrix.c: 175:   }
  4435  0116F4  0012               	return	
  4436  0116F6                     l905:
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;swMatrix.c: 178:  {;swMatrix.c: 179:   mSw[mSw[c].pre].next = mSw[c].next;
  4440                           
  4441                           ; BSR set to: 0
  4442  0116F6  51DE               	movf	swUnregister@c& (0+255),w,b
  4443  0116F8  0D07               	mullw	7
  4444  0116FA  0E04               	movlw	4
  4445  0116FC  26F3               	addwf	prodl,f,c
  4446  0116FE  0E00               	movlw	0
  4447  011700  22F4               	addwfc	prodh,f,c
  4448  011702  0E8D               	movlw	low _mSw
  4449  011704  24F3               	addwf	prodl,w,c
  4450  011706  6ED9               	movwf	fsr2l,c
  4451  011708  0E00               	movlw	high _mSw
  4452  01170A  20F4               	addwfc	prodh,w,c
  4453  01170C  6EDA               	movwf	fsr2h,c
  4454  01170E  51DE               	movf	swUnregister@c& (0+255),w,b
  4455  011710  0D07               	mullw	7
  4456  011712  0E03               	movlw	3
  4457  011714  26F3               	addwf	prodl,f,c
  4458  011716  0E00               	movlw	0
  4459  011718  22F4               	addwfc	prodh,f,c
  4460  01171A  0E8D               	movlw	low _mSw
  4461  01171C  24F3               	addwf	prodl,w,c
  4462  01171E  6EE1               	movwf	fsr1l,c
  4463  011720  0E00               	movlw	high _mSw
  4464  011722  20F4               	addwfc	prodh,w,c
  4465  011724  6EE2               	movwf	fsr1h,c
  4466  011726  50E7               	movf	indf1,w,c
  4467  011728  6FDD               	movwf	??_swUnregister& (0+255),b
  4468  01172A  51DD               	movf	??_swUnregister& (0+255),w,b
  4469  01172C  0D07               	mullw	7
  4470  01172E  0E04               	movlw	4
  4471  011730  26F3               	addwf	prodl,f,c
  4472  011732  0E00               	movlw	0
  4473  011734  22F4               	addwfc	prodh,f,c
  4474  011736  0E8D               	movlw	low _mSw
  4475  011738  24F3               	addwf	prodl,w,c
  4476  01173A  6EE1               	movwf	fsr1l,c
  4477  01173C  0E00               	movlw	high _mSw
  4478  01173E  20F4               	addwfc	prodh,w,c
  4479  011740  6EE2               	movwf	fsr1h,c
  4480  011742  CFDF FFE7          	movff	indf2,indf1
  4481  011746  0012               	return	
  4482  011748                     __end_of_swUnregister:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           indf1	equ	0xFE7
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           fsr2h	equ	0xFDA
  4501                           fsr2l	equ	0xFD9
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function _swRelease *****************
  4505 ;; Defined at:
  4506 ;;		line 386 in file "keys.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  c               1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  c               1    5[BANK0 ] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4522 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4524 ;;Total ram usage:        6 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    5
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_swUnregister
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text4
  4535  011748                     __ptext4:
  4536                           	opt stack 0
  4537  011748                     _swRelease:
  4538                           	opt stack 23
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;incstack = 0
  4542                           ;swRelease@c stored from wreg
  4543  011748  0100               	movlb	0	; () banked
  4544  01174A  6FDC               	movwf	swRelease@c& (0+255),b
  4545                           
  4546                           ;keys.c: 386: void swRelease(unsigned char c);keys.c: 387: {;keys.c: 388:  switch ((mSw[
      +                          c].kc & 0xf000)) {
  4547  01174C  D094               	goto	l1063
  4548  01174E                     l1064:
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;keys.c: 390:   mainFlags.sendKeyReport = 1;
  4552  01174E  8433               	bsf	_mainFlags+1,2,c
  4553                           
  4554                           ;keys.c: 391:   break;
  4555  011750  0012               	return	
  4556  011752                     
  4557                           ; BSR set to: 0
  4558                           ;keys.c: 394:   keyReport.modifier.byte &= ~(1 << (mSw[c].kc & 0x07));
  4559                           
  4560                           ; BSR set to: 0
  4561                           
  4562                           ;keys.c: 393:  case 0x1000:
  4563                           
  4564                           ; BSR set to: 0
  4565  011752  51DC               	movf	swRelease@c& (0+255),w,b
  4566  011754  0D07               	mullw	7
  4567  011756  0E05               	movlw	5
  4568  011758  26F3               	addwf	prodl,f,c
  4569  01175A  0E00               	movlw	0
  4570  01175C  22F4               	addwfc	prodh,f,c
  4571  01175E  0E8D               	movlw	low _mSw
  4572  011760  24F3               	addwf	prodl,w,c
  4573  011762  6ED9               	movwf	fsr2l,c
  4574  011764  0E00               	movlw	high _mSw
  4575  011766  20F4               	addwfc	prodh,w,c
  4576  011768  6EDA               	movwf	fsr2h,c
  4577  01176A  50DF               	movf	indf2,w,c
  4578  01176C  6FD7               	movwf	??_swRelease& (0+255),b
  4579  01176E  0E07               	movlw	7
  4580  011770  17D7               	andwf	??_swRelease& (0+255),f,b
  4581  011772  0E01               	movlw	1
  4582  011774  6FD8               	movwf	(??_swRelease+1)& (0+255),b
  4583  011776  2BD7               	incf	??_swRelease& (0+255),f,b
  4584  011778  D002               	goto	u5484
  4585  01177A                     u5485:
  4586  01177A  90D8               	bcf	status,0,c
  4587  01177C  37D8               	rlcf	(??_swRelease+1)& (0+255),f,b
  4588  01177E                     u5484:
  4589  01177E  2FD7               	decfsz	??_swRelease& (0+255),f,b
  4590  011780  D7FC               	goto	u5485
  4591  011782  0100               	movlb	0	; () banked
  4592  011784  51D8               	movf	(??_swRelease+1)& (0+255),w,b
  4593  011786  0AFF               	xorlw	255
  4594  011788  1779               	andwf	(_keyReport+1)& (0+255),f,b
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;keys.c: 395:   mainFlags.sendKeyReport = 1;
  4598  01178A  8433               	bsf	_mainFlags+1,2,c
  4599                           
  4600                           ;keys.c: 396:   break;
  4601  01178C  0012               	return	
  4602  01178E                     
  4603                           ; BSR set to: 0
  4604                           ;keys.c: 398:   consumerKey &= ~(0x01 << (unsigned char) mSw[c].kc);
  4605                           
  4606                           ; BSR set to: 0
  4607  01178E  51DC               	movf	swRelease@c& (0+255),w,b
  4608  011790  0D07               	mullw	7
  4609  011792  0E05               	movlw	5
  4610  011794  26F3               	addwf	prodl,f,c
  4611  011796  0E00               	movlw	0
  4612  011798  22F4               	addwfc	prodh,f,c
  4613  01179A  0E8D               	movlw	low _mSw
  4614  01179C  24F3               	addwf	prodl,w,c
  4615  01179E  6ED9               	movwf	fsr2l,c
  4616  0117A0  0E00               	movlw	high _mSw
  4617  0117A2  20F4               	addwfc	prodh,w,c
  4618  0117A4  6EDA               	movwf	fsr2h,c
  4619  0117A6  50DF               	movf	indf2,w,c
  4620  0117A8  6FD7               	movwf	??_swRelease& (0+255),b
  4621  0117AA  0E01               	movlw	1
  4622  0117AC  6FD8               	movwf	(??_swRelease+1)& (0+255),b
  4623  0117AE  0E00               	movlw	0
  4624  0117B0  6FD9               	movwf	(??_swRelease+2)& (0+255),b
  4625  0117B2  2BD7               	incf	??_swRelease& (0+255),f,b
  4626  0117B4  D003               	goto	u5494
  4627  0117B6                     u5495:
  4628  0117B6  90D8               	bcf	status,0,c
  4629  0117B8  37D8               	rlcf	(??_swRelease+1)& (0+255),f,b
  4630  0117BA  37D9               	rlcf	(??_swRelease+2)& (0+255),f,b
  4631  0117BC                     u5494:
  4632  0117BC  2FD7               	decfsz	??_swRelease& (0+255),f,b
  4633  0117BE  D7FB               	goto	u5495
  4634  0117C0  0100               	movlb	0	; () banked
  4635  0117C2  1DD8               	comf	(??_swRelease+1)& (0+255),w,b
  4636  0117C4  6FDA               	movwf	(??_swRelease+3)& (0+255),b
  4637  0117C6  1DD9               	comf	(??_swRelease+2)& (0+255),w,b
  4638  0117C8  6FDB               	movwf	(??_swRelease+4)& (0+255),b
  4639  0117CA  51DA               	movf	(??_swRelease+3)& (0+255),w,b
  4640  0117CC  162C               	andwf	_consumerKey,f,c
  4641  0117CE  51DB               	movf	(??_swRelease+4)& (0+255),w,b
  4642  0117D0  162D               	andwf	_consumerKey+1,f,c
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;keys.c: 400:   mainFlags.sendComsumerKeyReport = 1;
  4646  0117D2  8233               	bsf	_mainFlags+1,1,c
  4647                           
  4648                           ;keys.c: 401:   break;
  4649  0117D4  0012               	return	
  4650  0117D6                     l1071:
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;keys.c: 405:    mouseReport.mouseButton.bits.Left = 0;
  4654  0117D6  9182               	bcf	_mouseReport& (0+255),0,b
  4655                           
  4656                           ;keys.c: 406:    break;
  4657  0117D8  D022               	goto	l1072
  4658  0117DA                     l1073:
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;keys.c: 408:    mouseReport.mouseButton.bits.Middle = 0;
  4662  0117DA  9582               	bcf	_mouseReport& (0+255),2,b
  4663                           
  4664                           ;keys.c: 409:    break;
  4665  0117DC  D020               	goto	l1072
  4666  0117DE                     l1074:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;keys.c: 411:    mouseReport.mouseButton.bits.Right = 0;
  4670  0117DE  9382               	bcf	_mouseReport& (0+255),1,b
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;keys.c: 413:   }
  4674                           
  4675                           ;keys.c: 412:    break;
  4676  0117E0  D01E               	goto	l1072
  4677  0117E2                     
  4678                           ; BSR set to: 0
  4679                           
  4680                           ; BSR set to: 0
  4681  0117E2  51DC               	movf	swRelease@c& (0+255),w,b
  4682  0117E4  0D07               	mullw	7
  4683  0117E6  0E05               	movlw	5
  4684  0117E8  26F3               	addwf	prodl,f,c
  4685  0117EA  0E00               	movlw	0
  4686  0117EC  22F4               	addwfc	prodh,f,c
  4687  0117EE  0E8D               	movlw	low _mSw
  4688  0117F0  24F3               	addwf	prodl,w,c
  4689  0117F2  6ED9               	movwf	fsr2l,c
  4690  0117F4  0E00               	movlw	high _mSw
  4691  0117F6  20F4               	addwfc	prodh,w,c
  4692  0117F8  6EDA               	movwf	fsr2h,c
  4693  0117FA  CFDE F0D7          	movff	postinc2,??_swRelease
  4694  0117FE  CFDD F0D8          	movff	postdec2,??_swRelease+1
  4695                           
  4696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4697                           ; Switch size 1, requested type "space"
  4698                           ; Number of cases is 1, Range of values is 80 to 80
  4699                           ; switch strategies available:
  4700                           ; Name         Instructions Cycles
  4701                           ; simple_byte            4     3 (average)
  4702                           ;	Chosen strategy is simple_byte
  4703  011802  51D8               	movf	(??_swRelease+1)& (0+255),w,b
  4704  011804  0A50               	xorlw	80	; case 80
  4705  011806  A4D8               	btfss	status,2,c
  4706  011808  D00A               	goto	l1072
  4707                           
  4708                           ; BSR set to: 0
  4709                           ; Switch size 1, requested type "space"
  4710                           ; Number of cases is 3, Range of values is 1 to 3
  4711                           ; switch strategies available:
  4712                           ; Name         Instructions Cycles
  4713                           ; simple_byte           10     6 (average)
  4714                           ;	Chosen strategy is simple_byte
  4715  01180A  51D7               	movf	??_swRelease& (0+255),w,b
  4716  01180C  0A01               	xorlw	1	; case 1
  4717  01180E  B4D8               	btfsc	status,2,c
  4718  011810  D7E2               	goto	l1071
  4719  011812  0A03               	xorlw	3	; case 2
  4720  011814  B4D8               	btfsc	status,2,c
  4721  011816  D7E1               	goto	l1073
  4722  011818  0A01               	xorlw	1	; case 3
  4723  01181A  B4D8               	btfsc	status,2,c
  4724  01181C  D7E0               	goto	l1074
  4725  01181E                     l1072:
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;keys.c: 414:   mainFlags.sendMouseReport = 1;
  4729  01181E  8833               	bsf	_mainFlags+1,4,c
  4730                           
  4731                           ;keys.c: 415:   break;
  4732  011820  0012               	return	
  4733  011822                     
  4734                           ; BSR set to: 0
  4735                           ;keys.c: 422:    fnEnable = 0;
  4736                           
  4737                           ; BSR set to: 0
  4738                           
  4739                           ;keys.c: 421:   case (0xf000|0x03):
  4740                           
  4741                           ; BSR set to: 0
  4742                           
  4743                           ;keys.c: 420:   case (0xf000|0x02):
  4744                           
  4745                           ; BSR set to: 0
  4746                           
  4747                           ;keys.c: 419:   case (0xf000|0x01):
  4748                           
  4749                           ; BSR set to: 0
  4750  011822  0E00               	movlw	0
  4751  011824  6F89               	movwf	_fnEnable& (0+255),b
  4752                           
  4753                           ;keys.c: 423:    break;
  4754  011826  0012               	return	
  4755  011828                     l1082:
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;keys.c: 425:    LATHbits.LATH0 = 0;
  4759  011828  9080               	bcf	3968,0,c	;volatile
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;keys.c: 427:   }
  4763                           
  4764                           ;keys.c: 426:    break;
  4765  01182A  0012               	return	
  4766  01182C                     
  4767                           ; BSR set to: 0
  4768                           
  4769                           ; BSR set to: 0
  4770  01182C  51DC               	movf	swRelease@c& (0+255),w,b
  4771  01182E  0D07               	mullw	7
  4772  011830  0E05               	movlw	5
  4773  011832  26F3               	addwf	prodl,f,c
  4774  011834  0E00               	movlw	0
  4775  011836  22F4               	addwfc	prodh,f,c
  4776  011838  0E8D               	movlw	low _mSw
  4777  01183A  24F3               	addwf	prodl,w,c
  4778  01183C  6ED9               	movwf	fsr2l,c
  4779  01183E  0E00               	movlw	high _mSw
  4780  011840  20F4               	addwfc	prodh,w,c
  4781  011842  6EDA               	movwf	fsr2h,c
  4782  011844  CFDE F0D7          	movff	postinc2,??_swRelease
  4783  011848  CFDD F0D8          	movff	postdec2,??_swRelease+1
  4784                           
  4785                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4786                           ; Switch size 1, requested type "space"
  4787                           ; Number of cases is 1, Range of values is 240 to 240
  4788                           ; switch strategies available:
  4789                           ; Name         Instructions Cycles
  4790                           ; simple_byte            4     3 (average)
  4791                           ;	Chosen strategy is simple_byte
  4792  01184C  51D8               	movf	(??_swRelease+1)& (0+255),w,b
  4793  01184E  0AF0               	xorlw	240	; case 240
  4794  011850  A4D8               	btfss	status,2,c
  4795  011852  0012               	return	
  4796                           
  4797                           ; BSR set to: 0
  4798                           ; Switch size 1, requested type "space"
  4799                           ; Number of cases is 5, Range of values is 0 to 36
  4800                           ; switch strategies available:
  4801                           ; Name         Instructions Cycles
  4802                           ; simple_byte           16     9 (average)
  4803                           ;	Chosen strategy is simple_byte
  4804  011854  51D7               	movf	??_swRelease& (0+255),w,b
  4805  011856  0A00               	xorlw	0	; case 0
  4806  011858  B4D8               	btfsc	status,2,c
  4807  01185A  D7E3               	goto	l1077
  4808  01185C  0A01               	xorlw	1	; case 1
  4809  01185E  B4D8               	btfsc	status,2,c
  4810  011860  D7E0               	goto	l1077
  4811  011862  0A03               	xorlw	3	; case 2
  4812  011864  B4D8               	btfsc	status,2,c
  4813  011866  D7DD               	goto	l1077
  4814  011868  0A01               	xorlw	1	; case 3
  4815  01186A  B4D8               	btfsc	status,2,c
  4816  01186C  D7DA               	goto	l1077
  4817  01186E  0A27               	xorlw	39	; case 36
  4818  011870  A4D8               	btfss	status,2,c
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;keys.c: 429:  }
  4822                           
  4823                           ; BSR set to: 0
  4824                           ;keys.c: 428:   break;
  4825  011872  0012               	return	
  4826  011874  D7D9               	goto	l1082
  4827  011876                     l1063:
  4828                           
  4829                           ; BSR set to: 0
  4830  011876  0E00               	movlw	0
  4831  011878  0100               	movlb	0	; () banked
  4832  01187A  6FD7               	movwf	??_swRelease& (0+255),b
  4833  01187C  0EF0               	movlw	240
  4834  01187E  6FD8               	movwf	(??_swRelease+1)& (0+255),b
  4835  011880  51DC               	movf	swRelease@c& (0+255),w,b
  4836  011882  0D07               	mullw	7
  4837  011884  0E05               	movlw	5
  4838  011886  26F3               	addwf	prodl,f,c
  4839  011888  0E00               	movlw	0
  4840  01188A  22F4               	addwfc	prodh,f,c
  4841  01188C  0E8D               	movlw	low _mSw
  4842  01188E  24F3               	addwf	prodl,w,c
  4843  011890  6ED9               	movwf	fsr2l,c
  4844  011892  0E00               	movlw	high _mSw
  4845  011894  20F4               	addwfc	prodh,w,c
  4846  011896  6EDA               	movwf	fsr2h,c
  4847  011898  CFDE F0D9          	movff	postinc2,??_swRelease+2
  4848  01189C  CFDD F0DA          	movff	postdec2,??_swRelease+3
  4849  0118A0  51D7               	movf	??_swRelease& (0+255),w,b
  4850  0118A2  17D9               	andwf	(??_swRelease+2)& (0+255),f,b
  4851  0118A4  51D8               	movf	(??_swRelease+1)& (0+255),w,b
  4852  0118A6  17DA               	andwf	(??_swRelease+3)& (0+255),f,b
  4853                           
  4854                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 6 sub-sw
      +                          itches
  4855                           ; Switch size 1, requested type "space"
  4856                           ; Number of cases is 6, Range of values is 0 to 240
  4857                           ; switch strategies available:
  4858                           ; Name         Instructions Cycles
  4859                           ; simple_byte           19    10 (average)
  4860                           ;	Chosen strategy is simple_byte
  4861  0118A8  51DA               	movf	(??_swRelease+3)& (0+255),w,b
  4862  0118AA  0A00               	xorlw	0	; case 0
  4863  0118AC  B4D8               	btfsc	status,2,c
  4864  0118AE  D010               	goto	l8023
  4865  0118B0  0A10               	xorlw	16	; case 16
  4866  0118B2  B4D8               	btfsc	status,2,c
  4867  0118B4  D012               	goto	l8025
  4868  0118B6  0A30               	xorlw	48	; case 32
  4869  0118B8  B4D8               	btfsc	status,2,c
  4870  0118BA  D00F               	goto	l8025
  4871  0118BC  0A10               	xorlw	16	; case 48
  4872  0118BE  B4D8               	btfsc	status,2,c
  4873  0118C0  D011               	goto	l8029
  4874  0118C2  0A60               	xorlw	96	; case 80
  4875  0118C4  B4D8               	btfsc	status,2,c
  4876  0118C6  D013               	goto	l8031
  4877  0118C8  0AA0               	xorlw	160	; case 240
  4878  0118CA  A4D8               	btfss	status,2,c
  4879  0118CC  0012               	return	
  4880  0118CE  D014               	goto	l8033
  4881  0118D0                     l8023:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ; Switch size 1, requested type "space"
  4885                           ; Number of cases is 1, Range of values is 0 to 0
  4886                           ; switch strategies available:
  4887                           ; Name         Instructions Cycles
  4888                           ; simple_byte            4     3 (average)
  4889                           ;	Chosen strategy is simple_byte
  4890  0118D0  51D9               	movf	(??_swRelease+2)& (0+255),w,b
  4891  0118D2  0A00               	xorlw	0	; case 0
  4892  0118D4  A4D8               	btfss	status,2,c
  4893  0118D6  0012               	return	
  4894  0118D8  D73A               	goto	l1064
  4895  0118DA                     l8025:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ; Switch size 1, requested type "space"
  4899                           ; Number of cases is 1, Range of values is 0 to 0
  4900                           ; switch strategies available:
  4901                           ; Name         Instructions Cycles
  4902                           ; simple_byte            4     3 (average)
  4903                           ;	Chosen strategy is simple_byte
  4904  0118DA  51D9               	movf	(??_swRelease+2)& (0+255),w,b
  4905  0118DC  0A00               	xorlw	0	; case 0
  4906  0118DE  A4D8               	btfss	status,2,c
  4907  0118E0  0012               	return	
  4908  0118E2  D737               	goto	l1066
  4909  0118E4                     l8029:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ; Switch size 1, requested type "space"
  4913                           ; Number of cases is 1, Range of values is 0 to 0
  4914                           ; switch strategies available:
  4915                           ; Name         Instructions Cycles
  4916                           ; simple_byte            4     3 (average)
  4917                           ;	Chosen strategy is simple_byte
  4918  0118E4  51D9               	movf	(??_swRelease+2)& (0+255),w,b
  4919  0118E6  0A00               	xorlw	0	; case 0
  4920  0118E8  A4D8               	btfss	status,2,c
  4921  0118EA  0012               	return	
  4922  0118EC  D750               	goto	l1068
  4923  0118EE                     l8031:
  4924                           
  4925                           ; BSR set to: 0
  4926                           ; Switch size 1, requested type "space"
  4927                           ; Number of cases is 1, Range of values is 0 to 0
  4928                           ; switch strategies available:
  4929                           ; Name         Instructions Cycles
  4930                           ; simple_byte            4     3 (average)
  4931                           ;	Chosen strategy is simple_byte
  4932  0118EE  51D9               	movf	(??_swRelease+2)& (0+255),w,b
  4933  0118F0  0A00               	xorlw	0	; case 0
  4934  0118F2  A4D8               	btfss	status,2,c
  4935  0118F4  0012               	return	
  4936  0118F6  D775               	goto	l1070
  4937  0118F8                     l8033:
  4938                           
  4939                           ; BSR set to: 0
  4940                           ; Switch size 1, requested type "space"
  4941                           ; Number of cases is 1, Range of values is 0 to 0
  4942                           ; switch strategies available:
  4943                           ; Name         Instructions Cycles
  4944                           ; simple_byte            4     3 (average)
  4945                           ;	Chosen strategy is simple_byte
  4946  0118F8  51D9               	movf	(??_swRelease+2)& (0+255),w,b
  4947  0118FA  0A00               	xorlw	0	; case 0
  4948  0118FC  A4D8               	btfss	status,2,c
  4949  0118FE  0012               	return	
  4950  011900  D795               	goto	l1076
  4951  011902                     __end_of_swRelease:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           postinc0	equ	0xFEE
  4961                           wreg	equ	0xFE8
  4962                           indf1	equ	0xFE7
  4963                           postdec1	equ	0xFE5
  4964                           fsr1h	equ	0xFE2
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _swRegister *****************
  4974 ;; Defined at:
  4975 ;;		line 183 in file "swMatrix.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  n               1    wreg     unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  n               1    4[BANK0 ] unsigned char 
  4980 ;;  d               1    6[BANK0 ] unsigned char 
  4981 ;;  d               1    5[BANK0 ] unsigned char 
  4982 ;;  c               1    7[BANK0 ] unsigned char 
  4983 ;;  sameRow         1    3[BANK0 ] unsigned char 
  4984 ;;  sameCol         1    2[BANK0 ] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4995 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4997 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4998 ;;Total ram usage:        8 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    5
  5001 ;; This function calls:
  5002 ;;		Nothing
  5003 ;; This function is called by:
  5004 ;;		_swProcess
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text5
  5009  010F16                     __ptext5:
  5010                           	opt stack 0
  5011  010F16                     _swRegister:
  5012                           	opt stack 24
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;incstack = 0
  5016                           ;swRegister@n stored from wreg
  5017  010F16  0100               	movlb	0	; () banked
  5018  010F18  6FDB               	movwf	swRegister@n& (0+255),b
  5019                           
  5020                           ;swMatrix.c: 183: void swRegister(unsigned char n);swMatrix.c: 184: {;swMatrix.c: 185:  
      +                          unsigned char c;;swMatrix.c: 187:  unsigned char sameCol = 0;
  5021  010F1A  0E00               	movlw	0
  5022  010F1C  0100               	movlb	0	; () banked
  5023  010F1E  6FD9               	movwf	swRegister@sameCol& (0+255),b
  5024                           
  5025                           ;swMatrix.c: 188:  unsigned char sameRow = 0;
  5026  010F20  0E00               	movlw	0
  5027  010F22  6FDA               	movwf	swRegister@sameRow& (0+255),b
  5028                           
  5029                           ;swMatrix.c: 190:  for (c = 0; c < 10; c++)
  5030  010F24  0E00               	movlw	0
  5031  010F26  6FDE               	movwf	swRegister@c& (0+255),b
  5032  010F28                     l6383:
  5033                           
  5034                           ; BSR set to: 0
  5035  010F28  0E09               	movlw	9
  5036  010F2A  65DE               	cpfsgt	swRegister@c& (0+255),b
  5037  010F2C  D001               	goto	l911
  5038  010F2E  D012               	goto	u5760
  5039  010F30                     l911:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;swMatrix.c: 191:  {;swMatrix.c: 192:   if (mSw[c].num == n)
  5043                           
  5044                           ; BSR set to: 0
  5045  010F30  51DE               	movf	swRegister@c& (0+255),w,b
  5046  010F32  0D07               	mullw	7
  5047  010F34  0E02               	movlw	2
  5048  010F36  26F3               	addwf	prodl,f,c
  5049  010F38  0E00               	movlw	0
  5050  010F3A  22F4               	addwfc	prodh,f,c
  5051  010F3C  0E8D               	movlw	low _mSw
  5052  010F3E  24F3               	addwf	prodl,w,c
  5053  010F40  6ED9               	movwf	fsr2l,c
  5054  010F42  0E00               	movlw	high _mSw
  5055  010F44  20F4               	addwfc	prodh,w,c
  5056  010F46  6EDA               	movwf	fsr2h,c
  5057  010F48  51DB               	movf	swRegister@n& (0+255),w,b
  5058  010F4A  18DE               	xorwf	postinc2,w,c
  5059  010F4C  B4D8               	btfsc	status,2,c
  5060  010F4E  0012               	return	
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;swMatrix.c: 196:  }
  5064                           
  5065                           ; BSR set to: 0
  5066                           
  5067                           ;swMatrix.c: 195:   }
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;swMatrix.c: 193:   {;swMatrix.c: 194:    return;
  5071  010F50  2BDE               	incf	swRegister@c& (0+255),f,b
  5072  010F52  D7EA               	goto	l6383
  5073  010F54                     u5760:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;swMatrix.c: 198:  for (c = 0; c < 10; c++)
  5077                           
  5078                           ; BSR set to: 0
  5079  010F54  0E00               	movlw	0
  5080  010F56  6FDE               	movwf	swRegister@c& (0+255),b
  5081  010F58                     l6397:
  5082                           
  5083                           ; BSR set to: 0
  5084  010F58  0E09               	movlw	9
  5085  010F5A  65DE               	cpfsgt	swRegister@c& (0+255),b
  5086  010F5C  D001               	goto	l915
  5087  010F5E  D086               	goto	u5880
  5088  010F60                     l915:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;swMatrix.c: 199:  {;swMatrix.c: 200:   if (((mSw[c].num ^ n) & 0x0f) == 0)
  5092                           
  5093                           ; BSR set to: 0
  5094  010F60  51DE               	movf	swRegister@c& (0+255),w,b
  5095  010F62  0D07               	mullw	7
  5096  010F64  0E02               	movlw	2
  5097  010F66  26F3               	addwf	prodl,f,c
  5098  010F68  0E00               	movlw	0
  5099  010F6A  22F4               	addwfc	prodh,f,c
  5100  010F6C  0E8D               	movlw	low _mSw
  5101  010F6E  24F3               	addwf	prodl,w,c
  5102  010F70  6ED9               	movwf	fsr2l,c
  5103  010F72  0E00               	movlw	high _mSw
  5104  010F74  20F4               	addwfc	prodh,w,c
  5105  010F76  6EDA               	movwf	fsr2h,c
  5106  010F78  50DF               	movf	indf2,w,c
  5107  010F7A  19DB               	xorwf	swRegister@n& (0+255),w,b
  5108  010F7C  6FD7               	movwf	??_swRegister& (0+255),b
  5109  010F7E  0E0F               	movlw	15
  5110  010F80  17D7               	andwf	??_swRegister& (0+255),f,b
  5111  010F82  A4D8               	btfss	status,2,c
  5112  010F84  D02F               	goto	l917
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;swMatrix.c: 201:   {;swMatrix.c: 202:    unsigned char d;;swMatrix.c: 203:    sameCol =
      +                           1;
  5116  010F86  0E01               	movlw	1
  5117  010F88  6FD9               	movwf	swRegister@sameCol& (0+255),b
  5118                           
  5119                           ;swMatrix.c: 204:    for (d = 0; d < 10; d++)
  5120  010F8A  0E00               	movlw	0
  5121  010F8C  6FDC               	movwf	swRegister@d& (0+255),b
  5122  010F8E                     l6405:
  5123                           
  5124                           ; BSR set to: 0
  5125  010F8E  0E09               	movlw	9
  5126  010F90  65DC               	cpfsgt	swRegister@d& (0+255),b
  5127  010F92  D001               	goto	l918
  5128  010F94  D069               	goto	u5870
  5129  010F96                     l918:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;swMatrix.c: 205:    {;swMatrix.c: 206:     if (((mSw[c].num ^ mSw[d].num) & 0xf0) == 0)
  5133                           
  5134                           ; BSR set to: 0
  5135  010F96  51DC               	movf	swRegister@d& (0+255),w,b
  5136  010F98  0D07               	mullw	7
  5137  010F9A  0E02               	movlw	2
  5138  010F9C  26F3               	addwf	prodl,f,c
  5139  010F9E  0E00               	movlw	0
  5140  010FA0  22F4               	addwfc	prodh,f,c
  5141  010FA2  0E8D               	movlw	low _mSw
  5142  010FA4  24F3               	addwf	prodl,w,c
  5143  010FA6  6ED9               	movwf	fsr2l,c
  5144  010FA8  0E00               	movlw	high _mSw
  5145  010FAA  20F4               	addwfc	prodh,w,c
  5146  010FAC  6EDA               	movwf	fsr2h,c
  5147  010FAE  50DF               	movf	indf2,w,c
  5148  010FB0  6FD7               	movwf	??_swRegister& (0+255),b
  5149  010FB2  51DE               	movf	swRegister@c& (0+255),w,b
  5150  010FB4  0D07               	mullw	7
  5151  010FB6  0E02               	movlw	2
  5152  010FB8  26F3               	addwf	prodl,f,c
  5153  010FBA  0E00               	movlw	0
  5154  010FBC  22F4               	addwfc	prodh,f,c
  5155  010FBE  0E8D               	movlw	low _mSw
  5156  010FC0  24F3               	addwf	prodl,w,c
  5157  010FC2  6ED9               	movwf	fsr2l,c
  5158  010FC4  0E00               	movlw	high _mSw
  5159  010FC6  20F4               	addwfc	prodh,w,c
  5160  010FC8  6EDA               	movwf	fsr2h,c
  5161  010FCA  50DF               	movf	indf2,w,c
  5162  010FCC  19D7               	xorwf	??_swRegister& (0+255),w,b
  5163  010FCE  6FD8               	movwf	(??_swRegister+1)& (0+255),b
  5164  010FD0  0EF0               	movlw	240
  5165  010FD2  17D8               	andwf	(??_swRegister+1)& (0+255),f,b
  5166  010FD4  A4D8               	btfss	status,2,c
  5167  010FD6  D004               	goto	l921
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;swMatrix.c: 207:     {;swMatrix.c: 208:      if (d != c)
  5171  010FD8  51DE               	movf	swRegister@c& (0+255),w,b
  5172  010FDA  19DC               	xorwf	swRegister@d& (0+255),w,b
  5173  010FDC  A4D8               	btfss	status,2,c
  5174  010FDE  0012               	return	
  5175  010FE0                     l921:
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;swMatrix.c: 213:    }
  5179                           
  5180                           ; BSR set to: 0
  5181                           
  5182                           ;swMatrix.c: 212:     }
  5183                           
  5184                           ; BSR set to: 0
  5185  010FE0  2BDC               	incf	swRegister@d& (0+255),f,b
  5186  010FE2  D7D5               	goto	l6405
  5187  010FE4                     l917:
  5188                           
  5189                           ; BSR set to: 0
  5190                           
  5191                           ; BSR set to: 0
  5192  010FE4  51DE               	movf	swRegister@c& (0+255),w,b
  5193  010FE6  0D07               	mullw	7
  5194  010FE8  0E02               	movlw	2
  5195  010FEA  26F3               	addwf	prodl,f,c
  5196  010FEC  0E00               	movlw	0
  5197  010FEE  22F4               	addwfc	prodh,f,c
  5198  010FF0  0E8D               	movlw	low _mSw
  5199  010FF2  24F3               	addwf	prodl,w,c
  5200  010FF4  6ED9               	movwf	fsr2l,c
  5201  010FF6  0E00               	movlw	high _mSw
  5202  010FF8  20F4               	addwfc	prodh,w,c
  5203  010FFA  6EDA               	movwf	fsr2h,c
  5204  010FFC  50DF               	movf	indf2,w,c
  5205  010FFE  19DB               	xorwf	swRegister@n& (0+255),w,b
  5206  011000  6FD7               	movwf	??_swRegister& (0+255),b
  5207  011002  0EF0               	movlw	240
  5208  011004  17D7               	andwf	??_swRegister& (0+255),f,b
  5209  011006  A4D8               	btfss	status,2,c
  5210  011008  D02F               	goto	u5870
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;swMatrix.c: 216:   {;swMatrix.c: 217:    unsigned char d;;swMatrix.c: 218:    sameRow =
      +                           1;
  5214  01100A  0E01               	movlw	1
  5215  01100C  6FDA               	movwf	swRegister@sameRow& (0+255),b
  5216                           
  5217                           ;swMatrix.c: 219:    for (d = 0; d < 10; d++)
  5218  01100E  0E00               	movlw	0
  5219  011010  6FDD               	movwf	swRegister@d_1749& (0+255),b
  5220  011012                     l6423:
  5221                           
  5222                           ; BSR set to: 0
  5223  011012  0E09               	movlw	9
  5224  011014  65DD               	cpfsgt	swRegister@d_1749& (0+255),b
  5225  011016  D001               	goto	l924
  5226  011018  D027               	goto	u5870
  5227  01101A                     l924:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;swMatrix.c: 220:    {;swMatrix.c: 221:     if (((mSw[c].num ^ mSw[d].num) & 0x0f) == 0)
  5231                           
  5232                           ; BSR set to: 0
  5233  01101A  51DD               	movf	swRegister@d_1749& (0+255),w,b
  5234  01101C  0D07               	mullw	7
  5235  01101E  0E02               	movlw	2
  5236  011020  26F3               	addwf	prodl,f,c
  5237  011022  0E00               	movlw	0
  5238  011024  22F4               	addwfc	prodh,f,c
  5239  011026  0E8D               	movlw	low _mSw
  5240  011028  24F3               	addwf	prodl,w,c
  5241  01102A  6ED9               	movwf	fsr2l,c
  5242  01102C  0E00               	movlw	high _mSw
  5243  01102E  20F4               	addwfc	prodh,w,c
  5244  011030  6EDA               	movwf	fsr2h,c
  5245  011032  50DF               	movf	indf2,w,c
  5246  011034  6FD7               	movwf	??_swRegister& (0+255),b
  5247  011036  51DE               	movf	swRegister@c& (0+255),w,b
  5248  011038  0D07               	mullw	7
  5249  01103A  0E02               	movlw	2
  5250  01103C  26F3               	addwf	prodl,f,c
  5251  01103E  0E00               	movlw	0
  5252  011040  22F4               	addwfc	prodh,f,c
  5253  011042  0E8D               	movlw	low _mSw
  5254  011044  24F3               	addwf	prodl,w,c
  5255  011046  6ED9               	movwf	fsr2l,c
  5256  011048  0E00               	movlw	high _mSw
  5257  01104A  20F4               	addwfc	prodh,w,c
  5258  01104C  6EDA               	movwf	fsr2h,c
  5259  01104E  50DF               	movf	indf2,w,c
  5260  011050  19D7               	xorwf	??_swRegister& (0+255),w,b
  5261  011052  6FD8               	movwf	(??_swRegister+1)& (0+255),b
  5262  011054  0E0F               	movlw	15
  5263  011056  17D8               	andwf	(??_swRegister+1)& (0+255),f,b
  5264  011058  A4D8               	btfss	status,2,c
  5265  01105A  D004               	goto	l927
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;swMatrix.c: 222:     {;swMatrix.c: 223:      if (d != c)
  5269  01105C  51DE               	movf	swRegister@c& (0+255),w,b
  5270  01105E  19DD               	xorwf	swRegister@d_1749& (0+255),w,b
  5271  011060  A4D8               	btfss	status,2,c
  5272  011062  0012               	return	
  5273  011064                     l927:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;swMatrix.c: 228:    }
  5277                           
  5278                           ; BSR set to: 0
  5279                           
  5280                           ;swMatrix.c: 227:     }
  5281                           
  5282                           ; BSR set to: 0
  5283  011064  2BDD               	incf	swRegister@d_1749& (0+255),f,b
  5284  011066  D7D5               	goto	l6423
  5285  011068                     u5870:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;swMatrix.c: 230:  }
  5289                           
  5290                           ; BSR set to: 0
  5291                           
  5292                           ; BSR set to: 0
  5293                           
  5294                           ;swMatrix.c: 229:   }
  5295                           
  5296                           ; BSR set to: 0
  5297  011068  2BDE               	incf	swRegister@c& (0+255),f,b
  5298  01106A  D776               	goto	l6397
  5299  01106C                     u5880:
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;swMatrix.c: 231:  if (sameCol && sameRow)
  5303                           
  5304                           ; BSR set to: 0
  5305  01106C  51D9               	movf	swRegister@sameCol& (0+255),w,b
  5306  01106E  B4D8               	btfsc	status,2,c
  5307  011070  D003               	goto	l928
  5308                           
  5309                           ; BSR set to: 0
  5310  011072  51DA               	movf	swRegister@sameRow& (0+255),w,b
  5311  011074  A4D8               	btfss	status,2,c
  5312  011076  0012               	return	
  5313  011078                     l928:
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;swMatrix.c: 236:  for (c = 0; c < 10; c++)
  5317                           
  5318                           ; BSR set to: 0
  5319  011078  0E00               	movlw	0
  5320  01107A  6FDE               	movwf	swRegister@c& (0+255),b
  5321  01107C                     l6449:
  5322                           
  5323                           ; BSR set to: 0
  5324  01107C  0E09               	movlw	9
  5325  01107E  65DE               	cpfsgt	swRegister@c& (0+255),b
  5326  011080  D001               	goto	l929
  5327  011082  0012               	return	
  5328  011084                     l929:
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;swMatrix.c: 237:  {;swMatrix.c: 238:   if (mSw[c].num == 0xff)
  5332                           
  5333                           ; BSR set to: 0
  5334  011084  51DE               	movf	swRegister@c& (0+255),w,b
  5335  011086  0D07               	mullw	7
  5336  011088  0E02               	movlw	2
  5337  01108A  26F3               	addwf	prodl,f,c
  5338  01108C  0E00               	movlw	0
  5339  01108E  22F4               	addwfc	prodh,f,c
  5340  011090  0E8D               	movlw	low _mSw
  5341  011092  24F3               	addwf	prodl,w,c
  5342  011094  6ED9               	movwf	fsr2l,c
  5343  011096  0E00               	movlw	high _mSw
  5344  011098  20F4               	addwfc	prodh,w,c
  5345  01109A  6EDA               	movwf	fsr2h,c
  5346  01109C  28DE               	incf	postinc2,w,c
  5347  01109E  A4D8               	btfss	status,2,c
  5348  0110A0  D059               	goto	l931
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;swMatrix.c: 239:   {;swMatrix.c: 240:    mSw[c].num = n;
  5352  0110A2  51DE               	movf	swRegister@c& (0+255),w,b
  5353  0110A4  0D07               	mullw	7
  5354  0110A6  0E02               	movlw	2
  5355  0110A8  26F3               	addwf	prodl,f,c
  5356  0110AA  0E00               	movlw	0
  5357  0110AC  22F4               	addwfc	prodh,f,c
  5358  0110AE  0E8D               	movlw	low _mSw
  5359  0110B0  24F3               	addwf	prodl,w,c
  5360  0110B2  6ED9               	movwf	fsr2l,c
  5361  0110B4  0E00               	movlw	high _mSw
  5362  0110B6  20F4               	addwfc	prodh,w,c
  5363  0110B8  6EDA               	movwf	fsr2h,c
  5364  0110BA  C0DB  FFDF         	movff	swRegister@n,indf2
  5365                           
  5366                           ;swMatrix.c: 241:    mSw[c].count = 1;
  5367  0110BE  51DE               	movf	swRegister@c& (0+255),w,b
  5368  0110C0  0D07               	mullw	7
  5369  0110C2  0E8D               	movlw	low _mSw
  5370  0110C4  24F3               	addwf	prodl,w,c
  5371  0110C6  6ED9               	movwf	fsr2l,c
  5372  0110C8  0E00               	movlw	high _mSw
  5373  0110CA  20F4               	addwfc	prodh,w,c
  5374  0110CC  6EDA               	movwf	fsr2h,c
  5375  0110CE  0E01               	movlw	1
  5376  0110D0  6EDF               	movwf	indf2,c
  5377                           
  5378                           ;swMatrix.c: 242:    mSw[c].next = 0xff;
  5379  0110D2  51DE               	movf	swRegister@c& (0+255),w,b
  5380  0110D4  0D07               	mullw	7
  5381  0110D6  0E04               	movlw	4
  5382  0110D8  26F3               	addwf	prodl,f,c
  5383  0110DA  0E00               	movlw	0
  5384  0110DC  22F4               	addwfc	prodh,f,c
  5385  0110DE  0E8D               	movlw	low _mSw
  5386  0110E0  24F3               	addwf	prodl,w,c
  5387  0110E2  6ED9               	movwf	fsr2l,c
  5388  0110E4  0E00               	movlw	high _mSw
  5389  0110E6  20F4               	addwfc	prodh,w,c
  5390  0110E8  6EDA               	movwf	fsr2h,c
  5391  0110EA  0EFF               	movlw	255
  5392  0110EC  6EDF               	movwf	indf2,c
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;swMatrix.c: 243:    if (firstPush == 0xff)
  5396  0110EE  2846               	incf	_firstPush,w,c
  5397  0110F0  A4D8               	btfss	status,2,c
  5398  0110F2  D011               	goto	l932
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;swMatrix.c: 244:    {;swMatrix.c: 245:     firstPush = c;
  5402  0110F4  C0DE  F046         	movff	swRegister@c,_firstPush
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;swMatrix.c: 246:     mSw[c].pre = 0xff;
  5406  0110F8  51DE               	movf	swRegister@c& (0+255),w,b
  5407  0110FA  0D07               	mullw	7
  5408  0110FC  0E03               	movlw	3
  5409  0110FE  26F3               	addwf	prodl,f,c
  5410  011100  0E00               	movlw	0
  5411  011102  22F4               	addwfc	prodh,f,c
  5412  011104  0E8D               	movlw	low _mSw
  5413  011106  24F3               	addwf	prodl,w,c
  5414  011108  6ED9               	movwf	fsr2l,c
  5415  01110A  0E00               	movlw	high _mSw
  5416  01110C  20F4               	addwfc	prodh,w,c
  5417  01110E  6EDA               	movwf	fsr2h,c
  5418  011110  0EFF               	movlw	255
  5419  011112  6EDF               	movwf	indf2,c
  5420                           
  5421                           ;swMatrix.c: 247:    }
  5422  011114  D01C               	goto	l933
  5423  011116                     l932:
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;swMatrix.c: 249:    {;swMatrix.c: 250:     mSw[lastPush].next = c;
  5427                           
  5428                           ; BSR set to: 0
  5429  011116  5045               	movf	_lastPush,w,c
  5430  011118  0D07               	mullw	7
  5431  01111A  0E04               	movlw	4
  5432  01111C  26F3               	addwf	prodl,f,c
  5433  01111E  0E00               	movlw	0
  5434  011120  22F4               	addwfc	prodh,f,c
  5435  011122  0E8D               	movlw	low _mSw
  5436  011124  24F3               	addwf	prodl,w,c
  5437  011126  6ED9               	movwf	fsr2l,c
  5438  011128  0E00               	movlw	high _mSw
  5439  01112A  20F4               	addwfc	prodh,w,c
  5440  01112C  6EDA               	movwf	fsr2h,c
  5441  01112E  C0DE  FFDF         	movff	swRegister@c,indf2
  5442                           
  5443                           ;swMatrix.c: 251:     mSw[c].pre = lastPush;
  5444  011132  51DE               	movf	swRegister@c& (0+255),w,b
  5445  011134  0D07               	mullw	7
  5446  011136  0E03               	movlw	3
  5447  011138  26F3               	addwf	prodl,f,c
  5448  01113A  0E00               	movlw	0
  5449  01113C  22F4               	addwfc	prodh,f,c
  5450  01113E  0E8D               	movlw	low _mSw
  5451  011140  24F3               	addwf	prodl,w,c
  5452  011142  6ED9               	movwf	fsr2l,c
  5453  011144  0E00               	movlw	high _mSw
  5454  011146  20F4               	addwfc	prodh,w,c
  5455  011148  6EDA               	movwf	fsr2h,c
  5456  01114A  C045  FFDF         	movff	_lastPush,indf2
  5457  01114E                     l933:
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;swMatrix.c: 253:    lastPush = c;
  5461                           
  5462                           ; BSR set to: 0
  5463  01114E  C0DE  F045         	movff	swRegister@c,_lastPush
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;swMatrix.c: 254:    return;
  5467  011152  0012               	return	
  5468  011154                     l931:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;swMatrix.c: 256:  }
  5472                           
  5473                           ; BSR set to: 0
  5474  011154  2BDE               	incf	swRegister@c& (0+255),f,b
  5475  011156  D792               	goto	l6449
  5476  011158                     __end_of_swRegister:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           indf1	equ	0xFE7
  5488                           postdec1	equ	0xFE5
  5489                           fsr1h	equ	0xFE2
  5490                           fsr1l	equ	0xFE1
  5491                           indf2	equ	0xFDF
  5492                           postinc2	equ	0xFDE
  5493                           postdec2	equ	0xFDD
  5494                           fsr2h	equ	0xFDA
  5495                           fsr2l	equ	0xFD9
  5496                           status	equ	0xFD8
  5497                           
  5498 ;; *************** function _swPush *****************
  5499 ;; Defined at:
  5500 ;;		line 265 in file "keys.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  c               1    wreg     unsigned char 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  c               1   11[BANK0 ] unsigned char 
  5505 ;; Return value:  Size  Location     Type
  5506 ;;                  1    wreg      void 
  5507 ;; Registers used:
  5508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5509 ;; Tracked objects:
  5510 ;;		On entry : 0/0
  5511 ;;		On exit  : 0/0
  5512 ;;		Unchanged: 0/0
  5513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5515 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5516 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5517 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5518 ;;Total ram usage:       12 bytes
  5519 ;; Hardware stack levels used:    1
  5520 ;; Hardware stack levels required when called:    5
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_swProcess
  5525 ;; This function uses a non-reentrant model
  5526 ;;
  5527                           
  5528                           	psect	text6
  5529  010000                     __ptext6:
  5530                           	opt stack 0
  5531  010000                     _swPush:
  5532                           	opt stack 24
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;incstack = 0
  5536                           ;swPush@c stored from wreg
  5537  010000  0100               	movlb	0	; () banked
  5538  010002  6FE2               	movwf	swPush@c& (0+255),b
  5539                           
  5540                           ;keys.c: 265: void swPush(unsigned char c);keys.c: 266: {;keys.c: 267:  mSw[c].kc = keyM
      +                          apList[(fnEnable|fnEnableLatch) + keyMode*2][mSw[c].num];
  5541  010004  0100               	movlb	0	; () banked
  5542  010006  51E2               	movf	swPush@c& (0+255),w,b
  5543  010008  0D07               	mullw	7
  5544  01000A  0E02               	movlw	2
  5545  01000C  26F3               	addwf	prodl,f,c
  5546  01000E  0E00               	movlw	0
  5547  010010  22F4               	addwfc	prodh,f,c
  5548  010012  0E8D               	movlw	low _mSw
  5549  010014  24F3               	addwf	prodl,w,c
  5550  010016  6ED9               	movwf	fsr2l,c
  5551  010018  0E00               	movlw	high _mSw
  5552  01001A  20F4               	addwfc	prodh,w,c
  5553  01001C  6EDA               	movwf	fsr2h,c
  5554  01001E  50DF               	movf	indf2,w,c
  5555  010020  6FD7               	movwf	??_swPush& (0+255),b
  5556  010022  51D7               	movf	??_swPush& (0+255),w,b
  5557  010024  0D02               	mullw	2
  5558  010026  518B               	movf	_keyMode& (0+255),w,b
  5559  010028  6FD8               	movwf	(??_swPush+1)& (0+255),b
  5560  01002A  6BD9               	clrf	(??_swPush+2)& (0+255),b
  5561  01002C  90D8               	bcf	status,0,c
  5562  01002E  37D8               	rlcf	(??_swPush+1)& (0+255),f,b
  5563  010030  37D9               	rlcf	(??_swPush+2)& (0+255),f,b
  5564  010032  5189               	movf	_fnEnable& (0+255),w,b
  5565  010034  118A               	iorwf	_fnEnableLatch& (0+255),w,b
  5566  010036  6FDA               	movwf	(??_swPush+3)& (0+255),b
  5567  010038  6BDB               	clrf	(??_swPush+4)& (0+255),b
  5568  01003A  51D8               	movf	(??_swPush+1)& (0+255),w,b
  5569  01003C  27DA               	addwf	(??_swPush+3)& (0+255),f,b
  5570  01003E  51D9               	movf	(??_swPush+2)& (0+255),w,b
  5571  010040  23DB               	addwfc	(??_swPush+4)& (0+255),f,b
  5572  010042  90D8               	bcf	status,0,c
  5573  010044  37DA               	rlcf	(??_swPush+3)& (0+255),f,b
  5574  010046  37DB               	rlcf	(??_swPush+4)& (0+255),f,b
  5575  010048  0EEF               	movlw	low _keyMapList
  5576  01004A  25DA               	addwf	(??_swPush+3)& (0+255),w,b
  5577  01004C  6ED9               	movwf	fsr2l,c
  5578  01004E  0E00               	movlw	high _keyMapList
  5579  010050  21DB               	addwfc	(??_swPush+4)& (0+255),w,b
  5580  010052  6EDA               	movwf	fsr2h,c
  5581  010054  CFDE F0DC          	movff	postinc2,??_swPush+5
  5582  010058  CFDD F0DD          	movff	postdec2,??_swPush+6
  5583  01005C  50F3               	movf	prodl,w,c
  5584  01005E  27DC               	addwf	(??_swPush+5)& (0+255),f,b
  5585  010060  50F4               	movf	prodh,w,c
  5586  010062  23DD               	addwfc	(??_swPush+6)& (0+255),f,b
  5587  010064  C0DC  FFF6         	movff	??_swPush+5,tblptrl
  5588  010068  C0DD  FFF7         	movff	??_swPush+6,tblptrh
  5589  01006C                     	if	0	;tblptru may be non-zero
  5590  01006C                     	endif
  5591  01006C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5592  01006C  0E00               	movlw	low (__mediumconst shr (0+16))
  5593  01006E  6EF8               	movwf	tblptru,c
  5594  010070                     	endif
  5595  010070  51E2               	movf	swPush@c& (0+255),w,b
  5596  010072  0D07               	mullw	7
  5597  010074  0E05               	movlw	5
  5598  010076  26F3               	addwf	prodl,f,c
  5599  010078  0E00               	movlw	0
  5600  01007A  22F4               	addwfc	prodh,f,c
  5601  01007C  0E8D               	movlw	low _mSw
  5602  01007E  24F3               	addwf	prodl,w,c
  5603  010080  6ED9               	movwf	fsr2l,c
  5604  010082  0E00               	movlw	high _mSw
  5605  010084  20F4               	addwfc	prodh,w,c
  5606  010086  6EDA               	movwf	fsr2h,c
  5607  010088  0009               	tblrd		*+
  5608  01008A  CFF5 FFDE          	movff	tablat,postinc2
  5609  01008E  0008               	tblrd		*
  5610  010090  CFF5 FFDD          	movff	tablat,postdec2
  5611                           
  5612                           ;keys.c: 268:  switch ((mSw[c].kc & 0xf000)) {
  5613  010094  D28C               	goto	l1001
  5614  010096                     
  5615                           ; BSR set to: 0
  5616                           ;keys.c: 270:   keyReport.modifierLatch.byte &= ~keyReport.modifier.byte;
  5617                           
  5618                           ; BSR set to: 0
  5619  010096  5179               	movf	(_keyReport+1)& (0+255),w,b
  5620  010098  0AFF               	xorlw	255
  5621  01009A  1778               	andwf	_keyReport& (0+255),f,b
  5622                           
  5623                           ;keys.c: 271:   fnEnableLatch &= ~fnEnable;
  5624  01009C  5189               	movf	_fnEnable& (0+255),w,b
  5625  01009E  0AFF               	xorlw	255
  5626  0100A0  178A               	andwf	_fnEnableLatch& (0+255),f,b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;keys.c: 272:   mainFlags.sendKeyReport = 1;
  5630  0100A2  8433               	bsf	_mainFlags+1,2,c
  5631                           
  5632                           ;keys.c: 273:   break;
  5633  0100A4  0012               	return	
  5634  0100A6                     
  5635                           ; BSR set to: 0
  5636                           ;keys.c: 275:   if ((mSw[c].kc == (0x1000| 0x01)) && keyReport.modifierLatch.bits.ShiftR
      +                          )
  5637                           
  5638                           ; BSR set to: 0
  5639  0100A6  51E2               	movf	swPush@c& (0+255),w,b
  5640  0100A8  0D07               	mullw	7
  5641  0100AA  0E05               	movlw	5
  5642  0100AC  26F3               	addwf	prodl,f,c
  5643  0100AE  0E00               	movlw	0
  5644  0100B0  22F4               	addwfc	prodh,f,c
  5645  0100B2  0E8D               	movlw	low _mSw
  5646  0100B4  24F3               	addwf	prodl,w,c
  5647  0100B6  6ED9               	movwf	fsr2l,c
  5648  0100B8  0E00               	movlw	high _mSw
  5649  0100BA  20F4               	addwfc	prodh,w,c
  5650  0100BC  6EDA               	movwf	fsr2h,c
  5651  0100BE  04DE               	decf	postinc2,w,c
  5652  0100C0  E107               	bnz	l6485
  5653  0100C2  0E10               	movlw	16
  5654  0100C4  18DE               	xorwf	postinc2,w,c
  5655  0100C6  B4D8               	btfsc	status,2,c
  5656                           
  5657                           ; BSR set to: 0
  5658  0100C8  AB78               	btfss	_keyReport& (0+255),5,b
  5659  0100CA  D002               	goto	l1005
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;keys.c: 276:   {;keys.c: 277:    keyReport.modifierLatch.bits.ShiftR = 0;
  5663  0100CC  9B78               	bcf	_keyReport& (0+255),5,b
  5664                           
  5665                           ;keys.c: 278:   } else if ((mSw[c].kc == (0x1000| 0x05)) && keyReport.modifierLatch.bits
      +                          .ShiftL) {
  5666  0100CE  D0B4               	goto	l1020
  5667  0100D0                     l1005:
  5668  0100D0                     l6485:
  5669                           
  5670                           ; BSR set to: 0
  5671  0100D0  51E2               	movf	swPush@c& (0+255),w,b
  5672  0100D2  0D07               	mullw	7
  5673  0100D4  0E05               	movlw	5
  5674  0100D6  26F3               	addwf	prodl,f,c
  5675  0100D8  0E00               	movlw	0
  5676  0100DA  22F4               	addwfc	prodh,f,c
  5677  0100DC  0E8D               	movlw	low _mSw
  5678  0100DE  24F3               	addwf	prodl,w,c
  5679  0100E0  6ED9               	movwf	fsr2l,c
  5680  0100E2  0E00               	movlw	high _mSw
  5681  0100E4  20F4               	addwfc	prodh,w,c
  5682  0100E6  6EDA               	movwf	fsr2h,c
  5683  0100E8  0E05               	movlw	5
  5684  0100EA  18DE               	xorwf	postinc2,w,c
  5685  0100EC  E107               	bnz	l6491
  5686  0100EE  0E10               	movlw	16
  5687  0100F0  18DE               	xorwf	postinc2,w,c
  5688  0100F2  B4D8               	btfsc	status,2,c
  5689                           
  5690                           ; BSR set to: 0
  5691  0100F4  A378               	btfss	_keyReport& (0+255),1,b
  5692  0100F6  D002               	goto	l1007
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;keys.c: 279:    keyReport.modifierLatch.bits.ShiftL = 0;
  5696  0100F8  9378               	bcf	_keyReport& (0+255),1,b
  5697                           
  5698                           ;keys.c: 280:   } else if ((mSw[c].kc == (0x1000| 0x00)) && keyReport.modifierLatch.bits
      +                          .CtrlR)
  5699  0100FA  D09E               	goto	l1020
  5700  0100FC                     l1007:
  5701  0100FC                     l6491:
  5702                           
  5703                           ; BSR set to: 0
  5704  0100FC  51E2               	movf	swPush@c& (0+255),w,b
  5705  0100FE  0D07               	mullw	7
  5706  010100  0E05               	movlw	5
  5707  010102  26F3               	addwf	prodl,f,c
  5708  010104  0E00               	movlw	0
  5709  010106  22F4               	addwfc	prodh,f,c
  5710  010108  0E8D               	movlw	low _mSw
  5711  01010A  24F3               	addwf	prodl,w,c
  5712  01010C  6ED9               	movwf	fsr2l,c
  5713  01010E  0E00               	movlw	high _mSw
  5714  010110  20F4               	addwfc	prodh,w,c
  5715  010112  6EDA               	movwf	fsr2h,c
  5716  010114  50DE               	movf	postinc2,w,c
  5717  010116  E107               	bnz	l6497
  5718  010118  0E10               	movlw	16
  5719  01011A  18DE               	xorwf	postinc2,w,c
  5720  01011C  B4D8               	btfsc	status,2,c
  5721                           
  5722                           ; BSR set to: 0
  5723  01011E  A978               	btfss	_keyReport& (0+255),4,b
  5724  010120  D002               	goto	l1009
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;keys.c: 281:   {;keys.c: 282:    keyReport.modifierLatch.bits.CtrlR = 0;
  5728  010122  9978               	bcf	_keyReport& (0+255),4,b
  5729                           
  5730                           ;keys.c: 283:   } else if ((mSw[c].kc == (0x1000| 0x04)) && keyReport.modifierLatch.bits
      +                          .CtrlL) {
  5731  010124  D089               	goto	l1020
  5732  010126                     l1009:
  5733  010126                     l6497:
  5734                           
  5735                           ; BSR set to: 0
  5736  010126  51E2               	movf	swPush@c& (0+255),w,b
  5737  010128  0D07               	mullw	7
  5738  01012A  0E05               	movlw	5
  5739  01012C  26F3               	addwf	prodl,f,c
  5740  01012E  0E00               	movlw	0
  5741  010130  22F4               	addwfc	prodh,f,c
  5742  010132  0E8D               	movlw	low _mSw
  5743  010134  24F3               	addwf	prodl,w,c
  5744  010136  6ED9               	movwf	fsr2l,c
  5745  010138  0E00               	movlw	high _mSw
  5746  01013A  20F4               	addwfc	prodh,w,c
  5747  01013C  6EDA               	movwf	fsr2h,c
  5748  01013E  0E04               	movlw	4
  5749  010140  18DE               	xorwf	postinc2,w,c
  5750  010142  E107               	bnz	l6503
  5751  010144  0E10               	movlw	16
  5752  010146  18DE               	xorwf	postinc2,w,c
  5753  010148  B4D8               	btfsc	status,2,c
  5754                           
  5755                           ; BSR set to: 0
  5756  01014A  A178               	btfss	_keyReport& (0+255),0,b
  5757  01014C  D002               	goto	l1011
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;keys.c: 284:    keyReport.modifierLatch.bits.CtrlL = 0;
  5761  01014E  9178               	bcf	_keyReport& (0+255),0,b
  5762                           
  5763                           ;keys.c: 285:   } else if ((mSw[c].kc == (0x1000| 0x02)) && keyReport.modifierLatch.bits
      +                          .AltR)
  5764  010150  D073               	goto	l1020
  5765  010152                     l1011:
  5766  010152                     l6503:
  5767                           
  5768                           ; BSR set to: 0
  5769  010152  51E2               	movf	swPush@c& (0+255),w,b
  5770  010154  0D07               	mullw	7
  5771  010156  0E05               	movlw	5
  5772  010158  26F3               	addwf	prodl,f,c
  5773  01015A  0E00               	movlw	0
  5774  01015C  22F4               	addwfc	prodh,f,c
  5775  01015E  0E8D               	movlw	low _mSw
  5776  010160  24F3               	addwf	prodl,w,c
  5777  010162  6ED9               	movwf	fsr2l,c
  5778  010164  0E00               	movlw	high _mSw
  5779  010166  20F4               	addwfc	prodh,w,c
  5780  010168  6EDA               	movwf	fsr2h,c
  5781  01016A  0E02               	movlw	2
  5782  01016C  18DE               	xorwf	postinc2,w,c
  5783  01016E  E107               	bnz	l6509
  5784  010170  0E10               	movlw	16
  5785  010172  18DE               	xorwf	postinc2,w,c
  5786  010174  B4D8               	btfsc	status,2,c
  5787                           
  5788                           ; BSR set to: 0
  5789  010176  AD78               	btfss	_keyReport& (0+255),6,b
  5790  010178  D002               	goto	l1013
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;keys.c: 286:   {;keys.c: 287:    keyReport.modifierLatch.bits.AltR = 0;
  5794  01017A  9D78               	bcf	_keyReport& (0+255),6,b
  5795                           
  5796                           ;keys.c: 288:   } else if ((mSw[c].kc == (0x1000| 0x06)) && keyReport.modifierLatch.bits
      +                          .AltL) {
  5797  01017C  D05D               	goto	l1020
  5798  01017E                     l1013:
  5799  01017E                     l6509:
  5800                           
  5801                           ; BSR set to: 0
  5802  01017E  51E2               	movf	swPush@c& (0+255),w,b
  5803  010180  0D07               	mullw	7
  5804  010182  0E05               	movlw	5
  5805  010184  26F3               	addwf	prodl,f,c
  5806  010186  0E00               	movlw	0
  5807  010188  22F4               	addwfc	prodh,f,c
  5808  01018A  0E8D               	movlw	low _mSw
  5809  01018C  24F3               	addwf	prodl,w,c
  5810  01018E  6ED9               	movwf	fsr2l,c
  5811  010190  0E00               	movlw	high _mSw
  5812  010192  20F4               	addwfc	prodh,w,c
  5813  010194  6EDA               	movwf	fsr2h,c
  5814  010196  0E06               	movlw	6
  5815  010198  18DE               	xorwf	postinc2,w,c
  5816  01019A  E107               	bnz	l6515
  5817  01019C  0E10               	movlw	16
  5818  01019E  18DE               	xorwf	postinc2,w,c
  5819  0101A0  B4D8               	btfsc	status,2,c
  5820                           
  5821                           ; BSR set to: 0
  5822  0101A2  A578               	btfss	_keyReport& (0+255),2,b
  5823  0101A4  D002               	goto	l1015
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;keys.c: 289:    keyReport.modifierLatch.bits.AltL = 0;
  5827  0101A6  9578               	bcf	_keyReport& (0+255),2,b
  5828                           
  5829                           ;keys.c: 290:   } else if ((mSw[c].kc == (0x1000| 0x03)) && keyReport.modifierLatch.bits
      +                          .GuiR)
  5830  0101A8  D047               	goto	l1020
  5831  0101AA                     l1015:
  5832  0101AA                     l6515:
  5833                           
  5834                           ; BSR set to: 0
  5835  0101AA  51E2               	movf	swPush@c& (0+255),w,b
  5836  0101AC  0D07               	mullw	7
  5837  0101AE  0E05               	movlw	5
  5838  0101B0  26F3               	addwf	prodl,f,c
  5839  0101B2  0E00               	movlw	0
  5840  0101B4  22F4               	addwfc	prodh,f,c
  5841  0101B6  0E8D               	movlw	low _mSw
  5842  0101B8  24F3               	addwf	prodl,w,c
  5843  0101BA  6ED9               	movwf	fsr2l,c
  5844  0101BC  0E00               	movlw	high _mSw
  5845  0101BE  20F4               	addwfc	prodh,w,c
  5846  0101C0  6EDA               	movwf	fsr2h,c
  5847  0101C2  0E03               	movlw	3
  5848  0101C4  18DE               	xorwf	postinc2,w,c
  5849  0101C6  E107               	bnz	l6521
  5850  0101C8  0E10               	movlw	16
  5851  0101CA  18DE               	xorwf	postinc2,w,c
  5852  0101CC  B4D8               	btfsc	status,2,c
  5853                           
  5854                           ; BSR set to: 0
  5855  0101CE  AF78               	btfss	_keyReport& (0+255),7,b
  5856  0101D0  D002               	goto	l1017
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;keys.c: 291:   {;keys.c: 292:    keyReport.modifierLatch.bits.GuiR = 0;
  5860  0101D2  9F78               	bcf	_keyReport& (0+255),7,b
  5861                           
  5862                           ;keys.c: 293:   } else if ((mSw[c].kc == (0x1000| 0x07)) && keyReport.modifierLatch.bits
      +                          .GuiL) {
  5863  0101D4  D031               	goto	l1020
  5864  0101D6                     l1017:
  5865  0101D6                     l6521:
  5866                           
  5867                           ; BSR set to: 0
  5868  0101D6  51E2               	movf	swPush@c& (0+255),w,b
  5869  0101D8  0D07               	mullw	7
  5870  0101DA  0E05               	movlw	5
  5871  0101DC  26F3               	addwf	prodl,f,c
  5872  0101DE  0E00               	movlw	0
  5873  0101E0  22F4               	addwfc	prodh,f,c
  5874  0101E2  0E8D               	movlw	low _mSw
  5875  0101E4  24F3               	addwf	prodl,w,c
  5876  0101E6  6ED9               	movwf	fsr2l,c
  5877  0101E8  0E00               	movlw	high _mSw
  5878  0101EA  20F4               	addwfc	prodh,w,c
  5879  0101EC  6EDA               	movwf	fsr2h,c
  5880  0101EE  0E07               	movlw	7
  5881  0101F0  18DE               	xorwf	postinc2,w,c
  5882  0101F2  E107               	bnz	l6527
  5883  0101F4  0E10               	movlw	16
  5884  0101F6  18DE               	xorwf	postinc2,w,c
  5885  0101F8  B4D8               	btfsc	status,2,c
  5886                           
  5887                           ; BSR set to: 0
  5888  0101FA  A778               	btfss	_keyReport& (0+255),3,b
  5889  0101FC  D002               	goto	l1019
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;keys.c: 294:    keyReport.modifierLatch.bits.GuiL = 0;
  5893  0101FE  9778               	bcf	_keyReport& (0+255),3,b
  5894                           
  5895                           ;keys.c: 295:   } else {
  5896  010200  D01B               	goto	l1020
  5897  010202                     l1019:
  5898  010202                     l6527:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;keys.c: 296:    keyReport.modifierLatch.byte ^= 1 << (mSw[c].kc & 0x07);
  5902  010202  51E2               	movf	swPush@c& (0+255),w,b
  5903  010204  0D07               	mullw	7
  5904  010206  0E05               	movlw	5
  5905  010208  26F3               	addwf	prodl,f,c
  5906  01020A  0E00               	movlw	0
  5907  01020C  22F4               	addwfc	prodh,f,c
  5908  01020E  0E8D               	movlw	low _mSw
  5909  010210  24F3               	addwf	prodl,w,c
  5910  010212  6ED9               	movwf	fsr2l,c
  5911  010214  0E00               	movlw	high _mSw
  5912  010216  20F4               	addwfc	prodh,w,c
  5913  010218  6EDA               	movwf	fsr2h,c
  5914  01021A  50DF               	movf	indf2,w,c
  5915  01021C  6FD7               	movwf	??_swPush& (0+255),b
  5916  01021E  0E07               	movlw	7
  5917  010220  17D7               	andwf	??_swPush& (0+255),f,b
  5918  010222  0E01               	movlw	1
  5919  010224  6FD8               	movwf	(??_swPush+1)& (0+255),b
  5920  010226  2BD7               	incf	??_swPush& (0+255),f,b
  5921  010228  D002               	goto	u6114
  5922  01022A                     u6115:
  5923  01022A  90D8               	bcf	status,0,c
  5924  01022C  37D8               	rlcf	(??_swPush+1)& (0+255),f,b
  5925  01022E                     u6114:
  5926  01022E  2FD7               	decfsz	??_swPush& (0+255),f,b
  5927  010230  D7FC               	goto	u6115
  5928  010232  0100               	movlb	0	; () banked
  5929  010234  51D8               	movf	(??_swPush+1)& (0+255),w,b
  5930  010236  1B78               	xorwf	_keyReport& (0+255),f,b
  5931  010238                     l1020:
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;keys.c: 298:   keyReport.modifier.byte |= 1 << (mSw[c].kc & 0x07);
  5935                           
  5936                           ; BSR set to: 0
  5937                           
  5938                           ; BSR set to: 0
  5939                           
  5940                           ; BSR set to: 0
  5941                           
  5942                           ; BSR set to: 0
  5943                           
  5944                           ; BSR set to: 0
  5945                           
  5946                           ; BSR set to: 0
  5947                           
  5948                           ; BSR set to: 0
  5949  010238  51E2               	movf	swPush@c& (0+255),w,b
  5950  01023A  0D07               	mullw	7
  5951  01023C  0E05               	movlw	5
  5952  01023E  26F3               	addwf	prodl,f,c
  5953  010240  0E00               	movlw	0
  5954  010242  22F4               	addwfc	prodh,f,c
  5955  010244  0E8D               	movlw	low _mSw
  5956  010246  24F3               	addwf	prodl,w,c
  5957  010248  6ED9               	movwf	fsr2l,c
  5958  01024A  0E00               	movlw	high _mSw
  5959  01024C  20F4               	addwfc	prodh,w,c
  5960  01024E  6EDA               	movwf	fsr2h,c
  5961  010250  50DF               	movf	indf2,w,c
  5962  010252  6FD7               	movwf	??_swPush& (0+255),b
  5963  010254  0E07               	movlw	7
  5964  010256  17D7               	andwf	??_swPush& (0+255),f,b
  5965  010258  0E01               	movlw	1
  5966  01025A  6FD8               	movwf	(??_swPush+1)& (0+255),b
  5967  01025C  2BD7               	incf	??_swPush& (0+255),f,b
  5968  01025E  D002               	goto	u6124
  5969  010260                     u6125:
  5970  010260  90D8               	bcf	status,0,c
  5971  010262  37D8               	rlcf	(??_swPush+1)& (0+255),f,b
  5972  010264                     u6124:
  5973  010264  2FD7               	decfsz	??_swPush& (0+255),f,b
  5974  010266  D7FC               	goto	u6125
  5975  010268  0100               	movlb	0	; () banked
  5976  01026A  51D8               	movf	(??_swPush+1)& (0+255),w,b
  5977  01026C  1379               	iorwf	(_keyReport+1)& (0+255),f,b
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;keys.c: 299:   mainFlags.sendKeyReport = 1;
  5981  01026E  8433               	bsf	_mainFlags+1,2,c
  5982                           
  5983                           ;keys.c: 300:   break;
  5984  010270  0012               	return	
  5985  010272                     
  5986                           ; BSR set to: 0
  5987                           ;keys.c: 302:   keyReport.modifier.byte |= 1 << (mSw[c].kc & 0x07);
  5988                           
  5989                           ; BSR set to: 0
  5990  010272  51E2               	movf	swPush@c& (0+255),w,b
  5991  010274  0D07               	mullw	7
  5992  010276  0E05               	movlw	5
  5993  010278  26F3               	addwf	prodl,f,c
  5994  01027A  0E00               	movlw	0
  5995  01027C  22F4               	addwfc	prodh,f,c
  5996  01027E  0E8D               	movlw	low _mSw
  5997  010280  24F3               	addwf	prodl,w,c
  5998  010282  6ED9               	movwf	fsr2l,c
  5999  010284  0E00               	movlw	high _mSw
  6000  010286  20F4               	addwfc	prodh,w,c
  6001  010288  6EDA               	movwf	fsr2h,c
  6002  01028A  50DF               	movf	indf2,w,c
  6003  01028C  6FD7               	movwf	??_swPush& (0+255),b
  6004  01028E  0E07               	movlw	7
  6005  010290  17D7               	andwf	??_swPush& (0+255),f,b
  6006  010292  0E01               	movlw	1
  6007  010294  6FD8               	movwf	(??_swPush+1)& (0+255),b
  6008  010296  2BD7               	incf	??_swPush& (0+255),f,b
  6009  010298  D002               	goto	u6134
  6010  01029A                     u6135:
  6011  01029A  90D8               	bcf	status,0,c
  6012  01029C  37D8               	rlcf	(??_swPush+1)& (0+255),f,b
  6013  01029E                     u6134:
  6014  01029E  2FD7               	decfsz	??_swPush& (0+255),f,b
  6015  0102A0  D7FC               	goto	u6135
  6016  0102A2  0100               	movlb	0	; () banked
  6017  0102A4  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6018  0102A6  1379               	iorwf	(_keyReport+1)& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;keys.c: 303:   mainFlags.sendKeyReport = 1;
  6022  0102A8  8433               	bsf	_mainFlags+1,2,c
  6023                           
  6024                           ;keys.c: 304:   break;
  6025  0102AA  0012               	return	
  6026  0102AC                     
  6027                           ; BSR set to: 0
  6028                           ;keys.c: 306:   consumerKey |= 0x01 << (unsigned char) mSw[c].kc;
  6029                           
  6030                           ; BSR set to: 0
  6031  0102AC  51E2               	movf	swPush@c& (0+255),w,b
  6032  0102AE  0D07               	mullw	7
  6033  0102B0  0E05               	movlw	5
  6034  0102B2  26F3               	addwf	prodl,f,c
  6035  0102B4  0E00               	movlw	0
  6036  0102B6  22F4               	addwfc	prodh,f,c
  6037  0102B8  0E8D               	movlw	low _mSw
  6038  0102BA  24F3               	addwf	prodl,w,c
  6039  0102BC  6ED9               	movwf	fsr2l,c
  6040  0102BE  0E00               	movlw	high _mSw
  6041  0102C0  20F4               	addwfc	prodh,w,c
  6042  0102C2  6EDA               	movwf	fsr2h,c
  6043  0102C4  50DF               	movf	indf2,w,c
  6044  0102C6  6FD7               	movwf	??_swPush& (0+255),b
  6045  0102C8  0E01               	movlw	1
  6046  0102CA  6FD8               	movwf	(??_swPush+1)& (0+255),b
  6047  0102CC  0E00               	movlw	0
  6048  0102CE  6FD9               	movwf	(??_swPush+2)& (0+255),b
  6049  0102D0  2BD7               	incf	??_swPush& (0+255),f,b
  6050  0102D2  D003               	goto	u6144
  6051  0102D4                     u6145:
  6052  0102D4  90D8               	bcf	status,0,c
  6053  0102D6  37D8               	rlcf	(??_swPush+1)& (0+255),f,b
  6054  0102D8  37D9               	rlcf	(??_swPush+2)& (0+255),f,b
  6055  0102DA                     u6144:
  6056  0102DA  2FD7               	decfsz	??_swPush& (0+255),f,b
  6057  0102DC  D7FB               	goto	u6145
  6058  0102DE  0100               	movlb	0	; () banked
  6059  0102E0  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6060  0102E2  122C               	iorwf	_consumerKey,f,c
  6061  0102E4  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6062  0102E6  122D               	iorwf	_consumerKey+1,f,c
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;keys.c: 307:   mainFlags.sendComsumerKeyReport = 1;
  6066  0102E8  8233               	bsf	_mainFlags+1,1,c
  6067                           
  6068                           ;keys.c: 308:   break;
  6069  0102EA  0012               	return	
  6070  0102EC                     l1025:
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;keys.c: 312:    mouseReport.mouseButton.bits.Left = 1;
  6074  0102EC  8182               	bsf	_mouseReport& (0+255),0,b
  6075                           
  6076                           ;keys.c: 313:    break;
  6077  0102EE  D073               	goto	l1026
  6078  0102F0                     l1027:
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;keys.c: 315:    mouseReport.mouseButton.bits.Middle = 1;
  6082  0102F0  8582               	bsf	_mouseReport& (0+255),2,b
  6083                           
  6084                           ;keys.c: 316:    break;
  6085  0102F2  D071               	goto	l1026
  6086  0102F4                     l1028:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;keys.c: 318:    mouseReport.mouseButton.bits.Right = 1;
  6090  0102F4  8382               	bsf	_mouseReport& (0+255),1,b
  6091                           
  6092                           ;keys.c: 319:    break;
  6093  0102F6  D06F               	goto	l1026
  6094  0102F8                     
  6095                           ; BSR set to: 0
  6096                           ;keys.c: 321:    mouseSpeed = ((mouseSpeed + 1) < (8) ? (mouseSpeed + 1) : (8));
  6097                           
  6098                           ; BSR set to: 0
  6099  0102F8  C047  F0D7         	movff	_mouseSpeed,??_swPush
  6100  0102FC  6BD8               	clrf	(??_swPush+1)& (0+255),b
  6101  0102FE  BFD7               	btfsc	??_swPush& (0+255),7,b
  6102  010300  07D8               	decf	(??_swPush+1)& (0+255),f,b
  6103  010302  0E01               	movlw	1
  6104  010304  27D7               	addwf	??_swPush& (0+255),f,b
  6105  010306  0E00               	movlw	0
  6106  010308  23D8               	addwfc	(??_swPush+1)& (0+255),f,b
  6107  01030A  BFD8               	btfsc	(??_swPush+1)& (0+255),7,b
  6108  01030C  D00B               	goto	l1031
  6109  01030E  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6110  010310  E104               	bnz	u6150
  6111  010312  0E08               	movlw	8
  6112  010314  5DD7               	subwf	??_swPush& (0+255),w,b
  6113  010316  A0D8               	btfss	status,0,c
  6114  010318  D005               	goto	l1031
  6115  01031A                     u6150:
  6116                           
  6117                           ; BSR set to: 0
  6118  01031A  0E00               	movlw	0
  6119  01031C  6FDF               	movwf	(_swPush$1888+1)& (0+255),b
  6120  01031E  0E08               	movlw	8
  6121  010320  6FDE               	movwf	_swPush$1888& (0+255),b
  6122  010322  D009               	goto	l1033
  6123  010324                     l1031:
  6124                           
  6125                           ; BSR set to: 0
  6126                           
  6127                           ; BSR set to: 0
  6128  010324  0E01               	movlw	1
  6129  010326  2447               	addwf	_mouseSpeed,w,c
  6130  010328  6FDE               	movwf	_swPush$1888& (0+255),b
  6131  01032A  6AE8               	clrf	wreg,c
  6132  01032C  B0D8               	btfsc	status,0,c
  6133  01032E  2AE8               	incf	wreg,f,c
  6134  010330  BE47               	btfsc	_mouseSpeed,7,c
  6135  010332  06E8               	decf	wreg,f,c
  6136  010334  6FDF               	movwf	(_swPush$1888+1)& (0+255),b
  6137  010336                     l1033:
  6138                           
  6139                           ; BSR set to: 0
  6140                           
  6141                           ; BSR set to: 0
  6142  010336  C0DE  F047         	movff	_swPush$1888,_mouseSpeed
  6143                           
  6144                           ;keys.c: 322:    break;
  6145  01033A  D04D               	goto	l1026
  6146  01033C                     
  6147                           ; BSR set to: 0
  6148                           ;keys.c: 324:    mouseSpeed = ((mouseSpeed - 1) > (3) ? (mouseSpeed - 1) : (3));
  6149                           
  6150                           ; BSR set to: 0
  6151  01033C  0EFF               	movlw	255
  6152  01033E  6FD7               	movwf	??_swPush& (0+255),b
  6153  010340  0EFF               	movlw	255
  6154  010342  6FD8               	movwf	(??_swPush+1)& (0+255),b
  6155  010344  C047  F0D9         	movff	_mouseSpeed,??_swPush+2
  6156  010348  6BDA               	clrf	(??_swPush+3)& (0+255),b
  6157  01034A  BFD9               	btfsc	(??_swPush+2)& (0+255),7,b
  6158  01034C  07DA               	decf	(??_swPush+3)& (0+255),f,b
  6159  01034E  51D7               	movf	??_swPush& (0+255),w,b
  6160  010350  27D9               	addwf	(??_swPush+2)& (0+255),f,b
  6161  010352  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6162  010354  23DA               	addwfc	(??_swPush+3)& (0+255),f,b
  6163  010356  BFDA               	btfsc	(??_swPush+3)& (0+255),7,b
  6164  010358  D006               	goto	u6160
  6165  01035A  51DA               	movf	(??_swPush+3)& (0+255),w,b
  6166  01035C  E109               	bnz	l6551
  6167  01035E  0E04               	movlw	4
  6168  010360  5DD9               	subwf	(??_swPush+2)& (0+255),w,b
  6169  010362  B0D8               	btfsc	status,0,c
  6170  010364  D005               	goto	l1036
  6171  010366                     u6160:
  6172                           
  6173                           ; BSR set to: 0
  6174  010366  0E00               	movlw	0
  6175  010368  6FE1               	movwf	(_swPush$1889+1)& (0+255),b
  6176  01036A  0E03               	movlw	3
  6177  01036C  6FE0               	movwf	_swPush$1889& (0+255),b
  6178  01036E  D00C               	goto	l1038
  6179  010370                     l1036:
  6180  010370                     l6551:
  6181                           
  6182                           ; BSR set to: 0
  6183  010370  0EFF               	movlw	255
  6184  010372  6FD7               	movwf	??_swPush& (0+255),b
  6185  010374  0EFF               	movlw	255
  6186  010376  6FD8               	movwf	(??_swPush+1)& (0+255),b
  6187  010378  51D7               	movf	??_swPush& (0+255),w,b
  6188  01037A  2447               	addwf	_mouseSpeed,w,c
  6189  01037C  6FE0               	movwf	_swPush$1889& (0+255),b
  6190  01037E  0E00               	movlw	0
  6191  010380  BE47               	btfsc	_mouseSpeed,7,c
  6192  010382  0EFF               	movlw	255
  6193  010384  21D8               	addwfc	(??_swPush+1)& (0+255),w,b
  6194  010386  6FE1               	movwf	(_swPush$1889+1)& (0+255),b
  6195  010388                     l1038:
  6196                           
  6197                           ; BSR set to: 0
  6198                           
  6199                           ; BSR set to: 0
  6200  010388  C0E0  F047         	movff	_swPush$1889,_mouseSpeed
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;keys.c: 326:   }
  6204                           
  6205                           ;keys.c: 325:    break;
  6206  01038C  D024               	goto	l1026
  6207  01038E                     
  6208                           ; BSR set to: 0
  6209                           
  6210                           ; BSR set to: 0
  6211  01038E  51E2               	movf	swPush@c& (0+255),w,b
  6212  010390  0D07               	mullw	7
  6213  010392  0E05               	movlw	5
  6214  010394  26F3               	addwf	prodl,f,c
  6215  010396  0E00               	movlw	0
  6216  010398  22F4               	addwfc	prodh,f,c
  6217  01039A  0E8D               	movlw	low _mSw
  6218  01039C  24F3               	addwf	prodl,w,c
  6219  01039E  6ED9               	movwf	fsr2l,c
  6220  0103A0  0E00               	movlw	high _mSw
  6221  0103A2  20F4               	addwfc	prodh,w,c
  6222  0103A4  6EDA               	movwf	fsr2h,c
  6223  0103A6  CFDE F0D7          	movff	postinc2,??_swPush
  6224  0103AA  CFDD F0D8          	movff	postdec2,??_swPush+1
  6225                           
  6226                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6227                           ; Switch size 1, requested type "space"
  6228                           ; Number of cases is 1, Range of values is 80 to 80
  6229                           ; switch strategies available:
  6230                           ; Name         Instructions Cycles
  6231                           ; simple_byte            4     3 (average)
  6232                           ;	Chosen strategy is simple_byte
  6233  0103AE  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6234  0103B0  0A50               	xorlw	80	; case 80
  6235  0103B2  A4D8               	btfss	status,2,c
  6236  0103B4  D010               	goto	l1026
  6237                           
  6238                           ; BSR set to: 0
  6239                           ; Switch size 1, requested type "space"
  6240                           ; Number of cases is 5, Range of values is 1 to 5
  6241                           ; switch strategies available:
  6242                           ; Name         Instructions Cycles
  6243                           ; simple_byte           16     9 (average)
  6244                           ;	Chosen strategy is simple_byte
  6245  0103B6  51D7               	movf	??_swPush& (0+255),w,b
  6246  0103B8  0A01               	xorlw	1	; case 1
  6247  0103BA  B4D8               	btfsc	status,2,c
  6248  0103BC  D797               	goto	l1025
  6249  0103BE  0A03               	xorlw	3	; case 2
  6250  0103C0  B4D8               	btfsc	status,2,c
  6251  0103C2  D796               	goto	l1027
  6252  0103C4  0A01               	xorlw	1	; case 3
  6253  0103C6  B4D8               	btfsc	status,2,c
  6254  0103C8  D795               	goto	l1028
  6255  0103CA  0A07               	xorlw	7	; case 4
  6256  0103CC  B4D8               	btfsc	status,2,c
  6257  0103CE  D794               	goto	l1029
  6258  0103D0  0A01               	xorlw	1	; case 5
  6259  0103D2  B4D8               	btfsc	status,2,c
  6260  0103D4  D7B3               	goto	l1034
  6261  0103D6                     l1026:
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;keys.c: 327:   mainFlags.sendMouseReport = 1;
  6265  0103D6  8833               	bsf	_mainFlags+1,4,c
  6266                           
  6267                           ;keys.c: 328:   break;
  6268  0103D8  0012               	return	
  6269  0103DA                     l1039:
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;keys.c: 330:   mainFlags.sendMouseReport = 1;
  6273  0103DA  8833               	bsf	_mainFlags+1,4,c
  6274                           
  6275                           ;keys.c: 331:   break;
  6276  0103DC  0012               	return	
  6277  0103DE                     
  6278                           ; BSR set to: 0
  6279                           ;keys.c: 336:    fnEnable = 1;
  6280                           
  6281                           ; BSR set to: 0
  6282                           
  6283                           ;keys.c: 335:   case (0xf000|0x01):
  6284                           
  6285                           ; BSR set to: 0
  6286  0103DE  0E01               	movlw	1
  6287  0103E0  6F89               	movwf	_fnEnable& (0+255),b
  6288                           
  6289                           ;keys.c: 337:    break;
  6290  0103E2  0012               	return	
  6291  0103E4                     
  6292                           ; BSR set to: 0
  6293                           ;keys.c: 340:    fnEnable = 1;
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ;keys.c: 339:   case (0xf000|0x03):
  6298                           
  6299                           ; BSR set to: 0
  6300  0103E4  0E01               	movlw	1
  6301  0103E6  6F89               	movwf	_fnEnable& (0+255),b
  6302                           
  6303                           ;keys.c: 341:    fnEnableLatch = !fnEnableLatch;
  6304  0103E8  518A               	movf	_fnEnableLatch& (0+255),w,b
  6305  0103EA  A4D8               	btfss	status,2,c
  6306  0103EC  D002               	goto	u6170
  6307  0103EE  0E01               	movlw	1
  6308  0103F0  D001               	goto	u6180
  6309  0103F2                     u6170:
  6310  0103F2  0E00               	movlw	0
  6311  0103F4                     u6180:
  6312  0103F4  6F8A               	movwf	_fnEnableLatch& (0+255),b
  6313                           
  6314                           ;keys.c: 342:    break;
  6315  0103F6  0012               	return	
  6316  0103F8                     
  6317                           ; BSR set to: 0
  6318                           ;keys.c: 347:    keyMode = 0;
  6319                           
  6320                           ; BSR set to: 0
  6321  0103F8  0E00               	movlw	0
  6322  0103FA  6F8B               	movwf	_keyMode& (0+255),b
  6323                           
  6324                           ;keys.c: 348:    break;
  6325  0103FC  0012               	return	
  6326  0103FE                     
  6327                           ; BSR set to: 0
  6328                           ;keys.c: 350:    keyMode = 1;
  6329                           
  6330                           ; BSR set to: 0
  6331  0103FE  0E01               	movlw	1
  6332  010400  6F8B               	movwf	_keyMode& (0+255),b
  6333                           
  6334                           ;keys.c: 351:    break;
  6335  010402  0012               	return	
  6336  010404                     
  6337                           ; BSR set to: 0
  6338                           ;keys.c: 353:    keyMode = 2;
  6339                           
  6340                           ; BSR set to: 0
  6341  010404  0E02               	movlw	2
  6342  010406  6F8B               	movwf	_keyMode& (0+255),b
  6343                           
  6344                           ;keys.c: 354:    break;
  6345  010408  0012               	return	
  6346  01040A                     l1050:
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;keys.c: 356:    mainFlags.showBattery = 1;
  6350  01040A  8C32               	bsf	_mainFlags,6,c
  6351                           
  6352                           ;keys.c: 357:    break;
  6353  01040C  0012               	return	
  6354  01040E                     l1051:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;keys.c: 359:    LATHbits.LATH0 = 1;
  6358  01040E  8080               	bsf	3968,0,c	;volatile
  6359                           
  6360                           ;keys.c: 360:    break;
  6361  010410  0012               	return	
  6362  010412                     l1052:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;keys.c: 362:    mainFlags.connectToggle = 1;
  6366  010412  8A32               	bsf	_mainFlags,5,c
  6367                           
  6368                           ;keys.c: 363:    break;
  6369  010414  0012               	return	
  6370  010416                     l1053:
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;keys.c: 365:    mainFlags.shutdown = 1;
  6374  010416  8432               	bsf	_mainFlags,2,c
  6375                           
  6376                           ;keys.c: 366:    break;
  6377  010418  0012               	return	
  6378  01041A                     l1054:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;keys.c: 368:    mainFlags.sendToggleKey = 1;
  6382  01041A  8633               	bsf	_mainFlags+1,3,c
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;keys.c: 370:   }
  6386                           
  6387                           ;keys.c: 369:    break;
  6388  01041C  0012               	return	
  6389  01041E                     
  6390                           ; BSR set to: 0
  6391                           
  6392                           ; BSR set to: 0
  6393  01041E  51E2               	movf	swPush@c& (0+255),w,b
  6394  010420  0D07               	mullw	7
  6395  010422  0E05               	movlw	5
  6396  010424  26F3               	addwf	prodl,f,c
  6397  010426  0E00               	movlw	0
  6398  010428  22F4               	addwfc	prodh,f,c
  6399  01042A  0E8D               	movlw	low _mSw
  6400  01042C  24F3               	addwf	prodl,w,c
  6401  01042E  6ED9               	movwf	fsr2l,c
  6402  010430  0E00               	movlw	high _mSw
  6403  010432  20F4               	addwfc	prodh,w,c
  6404  010434  6EDA               	movwf	fsr2h,c
  6405  010436  CFDE F0D7          	movff	postinc2,??_swPush
  6406  01043A  CFDD F0D8          	movff	postdec2,??_swPush+1
  6407                           
  6408                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6409                           ; Switch size 1, requested type "space"
  6410                           ; Number of cases is 1, Range of values is 240 to 240
  6411                           ; switch strategies available:
  6412                           ; Name         Instructions Cycles
  6413                           ; simple_byte            4     3 (average)
  6414                           ;	Chosen strategy is simple_byte
  6415  01043E  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6416  010440  0AF0               	xorlw	240	; case 240
  6417  010442  A4D8               	btfss	status,2,c
  6418  010444  0012               	return	
  6419                           
  6420                           ; BSR set to: 0
  6421                           ; Switch size 1, requested type "space"
  6422                           ; Number of cases is 12, Range of values is 0 to 36
  6423                           ; switch strategies available:
  6424                           ; Name         Instructions Cycles
  6425                           ; simple_byte           37    19 (average)
  6426                           ;	Chosen strategy is simple_byte
  6427  010446  51D7               	movf	??_swPush& (0+255),w,b
  6428  010448  0A00               	xorlw	0	; case 0
  6429  01044A  B4D8               	btfsc	status,2,c
  6430  01044C  D7C8               	goto	l1042
  6431  01044E  0A01               	xorlw	1	; case 1
  6432  010450  B4D8               	btfsc	status,2,c
  6433  010452  D7C5               	goto	l1042
  6434  010454  0A03               	xorlw	3	; case 2
  6435  010456  B4D8               	btfsc	status,2,c
  6436  010458  D7C5               	goto	l1045
  6437  01045A  0A01               	xorlw	1	; case 3
  6438  01045C  B4D8               	btfsc	status,2,c
  6439  01045E  D7C2               	goto	l1045
  6440  010460  0A0E               	xorlw	14	; case 13
  6441  010462  B4D8               	btfsc	status,2,c
  6442  010464  D7DA               	goto	l1054
  6443  010466  0A1D               	xorlw	29	; case 16
  6444  010468  B4D8               	btfsc	status,2,c
  6445  01046A  D7C6               	goto	l1047
  6446  01046C  0A01               	xorlw	1	; case 17
  6447  01046E  B4D8               	btfsc	status,2,c
  6448  010470  D7C6               	goto	l1048
  6449  010472  0A03               	xorlw	3	; case 18
  6450  010474  B4D8               	btfsc	status,2,c
  6451  010476  D7C6               	goto	l1049
  6452  010478  0A32               	xorlw	50	; case 32
  6453  01047A  B4D8               	btfsc	status,2,c
  6454  01047C  D7CA               	goto	l1052
  6455  01047E  0A02               	xorlw	2	; case 34
  6456  010480  B4D8               	btfsc	status,2,c
  6457  010482  D7C9               	goto	l1053
  6458  010484  0A01               	xorlw	1	; case 35
  6459  010486  B4D8               	btfsc	status,2,c
  6460  010488  D7C0               	goto	l1050
  6461  01048A  0A07               	xorlw	7	; case 36
  6462  01048C  A4D8               	btfss	status,2,c
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;keys.c: 371:   break;
  6466  01048E  0012               	return	
  6467  010490  D7BE               	goto	l1051
  6468  010492                     
  6469                           ; BSR set to: 0
  6470                           ;keys.c: 373:   if (keyReport.modifierLatch.bits.ShiftL | keyReport.modifierLatch.bits.S
      +                          hiftR | keyReport.modifier.bits.ShiftL | keyReport.modifier.bits.ShiftR | keyReport.modi
      +                          fier2.bits.ShiftL | keyReport.modifier2.bits.ShiftR) {
  6471                           
  6472                           ; BSR set to: 0
  6473  010492  AB7A               	btfss	(_keyReport+2)& (0+255),5,b
  6474  010494  D003               	goto	u6190
  6475  010496  6BD7               	clrf	??_swPush& (0+255),b
  6476  010498  2BD7               	incf	??_swPush& (0+255),f,b
  6477  01049A  D002               	goto	u6198
  6478  01049C                     u6190:
  6479  01049C  0100               	movlb	0	; () banked
  6480  01049E  6BD7               	clrf	??_swPush& (0+255),b
  6481  0104A0                     u6198:
  6482  0104A0  A37A               	btfss	(_keyReport+2)& (0+255),1,b
  6483  0104A2  D003               	goto	u6200
  6484  0104A4  6BD8               	clrf	(??_swPush+1)& (0+255),b
  6485  0104A6  2BD8               	incf	(??_swPush+1)& (0+255),f,b
  6486  0104A8  D002               	goto	u6208
  6487  0104AA                     u6200:
  6488  0104AA  0100               	movlb	0	; () banked
  6489  0104AC  6BD8               	clrf	(??_swPush+1)& (0+255),b
  6490  0104AE                     u6208:
  6491  0104AE  AB79               	btfss	(_keyReport+1)& (0+255),5,b
  6492  0104B0  D003               	goto	u6210
  6493  0104B2  6BD9               	clrf	(??_swPush+2)& (0+255),b
  6494  0104B4  2BD9               	incf	(??_swPush+2)& (0+255),f,b
  6495  0104B6  D002               	goto	u6218
  6496  0104B8                     u6210:
  6497  0104B8  0100               	movlb	0	; () banked
  6498  0104BA  6BD9               	clrf	(??_swPush+2)& (0+255),b
  6499  0104BC                     u6218:
  6500  0104BC  A379               	btfss	(_keyReport+1)& (0+255),1,b
  6501  0104BE  D003               	goto	u6220
  6502  0104C0  6BDA               	clrf	(??_swPush+3)& (0+255),b
  6503  0104C2  2BDA               	incf	(??_swPush+3)& (0+255),f,b
  6504  0104C4  D002               	goto	u6228
  6505  0104C6                     u6220:
  6506  0104C6  0100               	movlb	0	; () banked
  6507  0104C8  6BDA               	clrf	(??_swPush+3)& (0+255),b
  6508  0104CA                     u6228:
  6509  0104CA  AB78               	btfss	_keyReport& (0+255),5,b
  6510  0104CC  D003               	goto	u6230
  6511  0104CE  6BDB               	clrf	(??_swPush+4)& (0+255),b
  6512  0104D0  2BDB               	incf	(??_swPush+4)& (0+255),f,b
  6513  0104D2  D002               	goto	u6238
  6514  0104D4                     u6230:
  6515  0104D4  0100               	movlb	0	; () banked
  6516  0104D6  6BDB               	clrf	(??_swPush+4)& (0+255),b
  6517  0104D8                     u6238:
  6518  0104D8  A378               	btfss	_keyReport& (0+255),1,b
  6519  0104DA  D002               	goto	u6240
  6520  0104DC  0E01               	movlw	1
  6521  0104DE  D001               	goto	u6246
  6522  0104E0                     u6240:
  6523  0104E0  0E00               	movlw	0
  6524  0104E2                     u6246:
  6525  0104E2  11DB               	iorwf	(??_swPush+4)& (0+255),w,b
  6526  0104E4  11DA               	iorwf	(??_swPush+3)& (0+255),w,b
  6527  0104E6  11D9               	iorwf	(??_swPush+2)& (0+255),w,b
  6528  0104E8  11D8               	iorwf	(??_swPush+1)& (0+255),w,b
  6529  0104EA  11D7               	iorwf	??_swPush& (0+255),w,b
  6530  0104EC  0900               	iorlw	0
  6531  0104EE  B4D8               	btfsc	status,2,c
  6532  0104F0  D046               	goto	l1059
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;keys.c: 374:    if (mSw[c].kc == (0x6000|0x092)) {
  6536  0104F2  51E2               	movf	swPush@c& (0+255),w,b
  6537  0104F4  0D07               	mullw	7
  6538  0104F6  0E05               	movlw	5
  6539  0104F8  26F3               	addwf	prodl,f,c
  6540  0104FA  0E00               	movlw	0
  6541  0104FC  22F4               	addwfc	prodh,f,c
  6542  0104FE  0E8D               	movlw	low _mSw
  6543  010500  24F3               	addwf	prodl,w,c
  6544  010502  6ED9               	movwf	fsr2l,c
  6545  010504  0E00               	movlw	high _mSw
  6546  010506  20F4               	addwfc	prodh,w,c
  6547  010508  6EDA               	movwf	fsr2h,c
  6548  01050A  0E92               	movlw	146
  6549  01050C  18DE               	xorwf	postinc2,w,c
  6550  01050E  E114               	bnz	l6579
  6551  010510  0E60               	movlw	96
  6552  010512  18DE               	xorwf	postinc2,w,c
  6553  010514  A4D8               	btfss	status,2,c
  6554  010516  D010               	goto	l1057
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;keys.c: 375:     mSw[c].kc = (0x6000|0x095);
  6558  010518  51E2               	movf	swPush@c& (0+255),w,b
  6559  01051A  0D07               	mullw	7
  6560  01051C  0E05               	movlw	5
  6561  01051E  26F3               	addwf	prodl,f,c
  6562  010520  0E00               	movlw	0
  6563  010522  22F4               	addwfc	prodh,f,c
  6564  010524  0E8D               	movlw	low _mSw
  6565  010526  24F3               	addwf	prodl,w,c
  6566  010528  6ED9               	movwf	fsr2l,c
  6567  01052A  0E00               	movlw	high _mSw
  6568  01052C  20F4               	addwfc	prodh,w,c
  6569  01052E  6EDA               	movwf	fsr2h,c
  6570  010530  0E95               	movlw	149
  6571  010532  6EDE               	movwf	postinc2,c
  6572  010534  0E60               	movlw	96
  6573  010536  D022               	goto	L1
  6574  010538                     l1057:
  6575  010538                     l6579:
  6576                           
  6577                           ; BSR set to: 0
  6578  010538  51E2               	movf	swPush@c& (0+255),w,b
  6579  01053A  0D07               	mullw	7
  6580  01053C  0E05               	movlw	5
  6581  01053E  26F3               	addwf	prodl,f,c
  6582  010540  0E00               	movlw	0
  6583  010542  22F4               	addwfc	prodh,f,c
  6584  010544  0E8D               	movlw	low _mSw
  6585  010546  24F3               	addwf	prodl,w,c
  6586  010548  6ED9               	movwf	fsr2l,c
  6587  01054A  0E00               	movlw	high _mSw
  6588  01054C  20F4               	addwfc	prodh,w,c
  6589  01054E  6EDA               	movwf	fsr2h,c
  6590  010550  0E57               	movlw	87
  6591  010552  18DE               	xorwf	postinc2,w,c
  6592  010554  E114               	bnz	l1056
  6593  010556  0E61               	movlw	97
  6594  010558  18DE               	xorwf	postinc2,w,c
  6595  01055A  A4D8               	btfss	status,2,c
  6596  01055C  D010               	goto	l1059
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;keys.c: 377:     mSw[c].kc = (0x6000|0x124);
  6600  01055E  51E2               	movf	swPush@c& (0+255),w,b
  6601  010560  0D07               	mullw	7
  6602  010562  0E05               	movlw	5
  6603  010564  26F3               	addwf	prodl,f,c
  6604  010566  0E00               	movlw	0
  6605  010568  22F4               	addwfc	prodh,f,c
  6606  01056A  0E8D               	movlw	low _mSw
  6607  01056C  24F3               	addwf	prodl,w,c
  6608  01056E  6ED9               	movwf	fsr2l,c
  6609  010570  0E00               	movlw	high _mSw
  6610  010572  20F4               	addwfc	prodh,w,c
  6611  010574  6EDA               	movwf	fsr2h,c
  6612  010576  0E24               	movlw	36
  6613  010578  6EDE               	movwf	postinc2,c
  6614  01057A  0E61               	movlw	97
  6615  01057C                     L1:
  6616  01057C  6EDD               	movwf	postdec2,c
  6617  01057E                     l1059:
  6618  01057E                     l1056:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;keys.c: 380:   altCode = 0xfff & mSw[c].kc;
  6622  01057E  51E2               	movf	swPush@c& (0+255),w,b
  6623  010580  0D07               	mullw	7
  6624  010582  0E05               	movlw	5
  6625  010584  26F3               	addwf	prodl,f,c
  6626  010586  0E00               	movlw	0
  6627  010588  22F4               	addwfc	prodh,f,c
  6628  01058A  0E8D               	movlw	low _mSw
  6629  01058C  24F3               	addwf	prodl,w,c
  6630  01058E  6ED9               	movwf	fsr2l,c
  6631  010590  0E00               	movlw	high _mSw
  6632  010592  20F4               	addwfc	prodh,w,c
  6633  010594  6EDA               	movwf	fsr2h,c
  6634  010596  CFDE F0D7          	movff	postinc2,??_swPush
  6635  01059A  CFDD F0D8          	movff	postdec2,??_swPush+1
  6636  01059E  0EFF               	movlw	255
  6637  0105A0  15D7               	andwf	??_swPush& (0+255),w,b
  6638  0105A2  6E2E               	movwf	_altCode,c
  6639  0105A4  0E0F               	movlw	15
  6640  0105A6  15D8               	andwf	(??_swPush+1)& (0+255),w,b
  6641  0105A8  6E2F               	movwf	_altCode+1,c
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;keys.c: 381:   mainFlags.sendAltCodeReport = 1;
  6645  0105AA  8A33               	bsf	_mainFlags+1,5,c
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;keys.c: 383:  }
  6649                           
  6650                           ;keys.c: 382:   break;
  6651  0105AC  0012               	return	
  6652  0105AE                     l1001:
  6653                           
  6654                           ; BSR set to: 0
  6655                           
  6656                           ; BSR set to: 0
  6657  0105AE  0E00               	movlw	0
  6658  0105B0  6FD7               	movwf	??_swPush& (0+255),b
  6659  0105B2  0EF0               	movlw	240
  6660  0105B4  6FD8               	movwf	(??_swPush+1)& (0+255),b
  6661  0105B6  51E2               	movf	swPush@c& (0+255),w,b
  6662  0105B8  0D07               	mullw	7
  6663  0105BA  0E05               	movlw	5
  6664  0105BC  26F3               	addwf	prodl,f,c
  6665  0105BE  0E00               	movlw	0
  6666  0105C0  22F4               	addwfc	prodh,f,c
  6667  0105C2  0E8D               	movlw	low _mSw
  6668  0105C4  24F3               	addwf	prodl,w,c
  6669  0105C6  6ED9               	movwf	fsr2l,c
  6670  0105C8  0E00               	movlw	high _mSw
  6671  0105CA  20F4               	addwfc	prodh,w,c
  6672  0105CC  6EDA               	movwf	fsr2h,c
  6673  0105CE  CFDE F0D9          	movff	postinc2,??_swPush+2
  6674  0105D2  CFDD F0DA          	movff	postdec2,??_swPush+3
  6675  0105D6  51D7               	movf	??_swPush& (0+255),w,b
  6676  0105D8  17D9               	andwf	(??_swPush+2)& (0+255),f,b
  6677  0105DA  51D8               	movf	(??_swPush+1)& (0+255),w,b
  6678  0105DC  17DA               	andwf	(??_swPush+3)& (0+255),f,b
  6679                           
  6680                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 8 sub-sw
      +                          itches
  6681                           ; Switch size 1, requested type "space"
  6682                           ; Number of cases is 8, Range of values is 0 to 240
  6683                           ; switch strategies available:
  6684                           ; Name         Instructions Cycles
  6685                           ; simple_byte           25    13 (average)
  6686                           ;	Chosen strategy is simple_byte
  6687  0105DE  51DA               	movf	(??_swPush+3)& (0+255),w,b
  6688  0105E0  0A00               	xorlw	0	; case 0
  6689  0105E2  B4D8               	btfsc	status,2,c
  6690  0105E4  D016               	goto	l8039
  6691  0105E6  0A10               	xorlw	16	; case 16
  6692  0105E8  B4D8               	btfsc	status,2,c
  6693  0105EA  D018               	goto	l8041
  6694  0105EC  0A30               	xorlw	48	; case 32
  6695  0105EE  B4D8               	btfsc	status,2,c
  6696  0105F0  D01A               	goto	l8043
  6697  0105F2  0A10               	xorlw	16	; case 48
  6698  0105F4  B4D8               	btfsc	status,2,c
  6699  0105F6  D01C               	goto	l8045
  6700  0105F8  0A70               	xorlw	112	; case 64
  6701  0105FA  B4D8               	btfsc	status,2,c
  6702  0105FC  D01E               	goto	l8047
  6703  0105FE  0A10               	xorlw	16	; case 80
  6704  010600  B4D8               	btfsc	status,2,c
  6705  010602  D020               	goto	l8049
  6706  010604  0A30               	xorlw	48	; case 96
  6707  010606  B4D8               	btfsc	status,2,c
  6708  010608  D022               	goto	l8051
  6709  01060A  0A90               	xorlw	144	; case 240
  6710  01060C  A4D8               	btfss	status,2,c
  6711  01060E  0012               	return	
  6712  010610  D023               	goto	l8053
  6713  010612                     l8039:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ; Switch size 1, requested type "space"
  6717                           ; Number of cases is 1, Range of values is 0 to 0
  6718                           ; switch strategies available:
  6719                           ; Name         Instructions Cycles
  6720                           ; simple_byte            4     3 (average)
  6721                           ;	Chosen strategy is simple_byte
  6722  010612  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6723  010614  0A00               	xorlw	0	; case 0
  6724  010616  A4D8               	btfss	status,2,c
  6725  010618  0012               	return	
  6726  01061A  D53D               	goto	l1002
  6727  01061C                     l8041:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ; Switch size 1, requested type "space"
  6731                           ; Number of cases is 1, Range of values is 0 to 0
  6732                           ; switch strategies available:
  6733                           ; Name         Instructions Cycles
  6734                           ; simple_byte            4     3 (average)
  6735                           ;	Chosen strategy is simple_byte
  6736  01061C  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6737  01061E  0A00               	xorlw	0	; case 0
  6738  010620  A4D8               	btfss	status,2,c
  6739  010622  0012               	return	
  6740  010624  D540               	goto	l1004
  6741  010626                     l8043:
  6742                           
  6743                           ; BSR set to: 0
  6744                           ; Switch size 1, requested type "space"
  6745                           ; Number of cases is 1, Range of values is 0 to 0
  6746                           ; switch strategies available:
  6747                           ; Name         Instructions Cycles
  6748                           ; simple_byte            4     3 (average)
  6749                           ;	Chosen strategy is simple_byte
  6750  010626  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6751  010628  0A00               	xorlw	0	; case 0
  6752  01062A  A4D8               	btfss	status,2,c
  6753  01062C  0012               	return	
  6754  01062E  D621               	goto	l1021
  6755  010630                     l8045:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ; Switch size 1, requested type "space"
  6759                           ; Number of cases is 1, Range of values is 0 to 0
  6760                           ; switch strategies available:
  6761                           ; Name         Instructions Cycles
  6762                           ; simple_byte            4     3 (average)
  6763                           ;	Chosen strategy is simple_byte
  6764  010630  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6765  010632  0A00               	xorlw	0	; case 0
  6766  010634  A4D8               	btfss	status,2,c
  6767  010636  0012               	return	
  6768  010638  D639               	goto	l1022
  6769  01063A                     l8047:
  6770                           
  6771                           ; BSR set to: 0
  6772                           ; Switch size 1, requested type "space"
  6773                           ; Number of cases is 1, Range of values is 0 to 0
  6774                           ; switch strategies available:
  6775                           ; Name         Instructions Cycles
  6776                           ; simple_byte            4     3 (average)
  6777                           ;	Chosen strategy is simple_byte
  6778  01063A  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6779  01063C  0A00               	xorlw	0	; case 0
  6780  01063E  A4D8               	btfss	status,2,c
  6781  010640  0012               	return	
  6782  010642  D6CB               	goto	l1039
  6783  010644                     l8049:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ; Switch size 1, requested type "space"
  6787                           ; Number of cases is 1, Range of values is 0 to 0
  6788                           ; switch strategies available:
  6789                           ; Name         Instructions Cycles
  6790                           ; simple_byte            4     3 (average)
  6791                           ;	Chosen strategy is simple_byte
  6792  010644  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6793  010646  0A00               	xorlw	0	; case 0
  6794  010648  A4D8               	btfss	status,2,c
  6795  01064A  0012               	return	
  6796  01064C  D6A0               	goto	l1024
  6797  01064E                     l8051:
  6798                           
  6799                           ; BSR set to: 0
  6800                           ; Switch size 1, requested type "space"
  6801                           ; Number of cases is 1, Range of values is 0 to 0
  6802                           ; switch strategies available:
  6803                           ; Name         Instructions Cycles
  6804                           ; simple_byte            4     3 (average)
  6805                           ;	Chosen strategy is simple_byte
  6806  01064E  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6807  010650  0A00               	xorlw	0	; case 0
  6808  010652  A4D8               	btfss	status,2,c
  6809  010654  0012               	return	
  6810  010656  D71D               	goto	l1055
  6811  010658                     l8053:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ; Switch size 1, requested type "space"
  6815                           ; Number of cases is 1, Range of values is 0 to 0
  6816                           ; switch strategies available:
  6817                           ; Name         Instructions Cycles
  6818                           ; simple_byte            4     3 (average)
  6819                           ;	Chosen strategy is simple_byte
  6820  010658  51D9               	movf	(??_swPush+2)& (0+255),w,b
  6821  01065A  0A00               	xorlw	0	; case 0
  6822  01065C  A4D8               	btfss	status,2,c
  6823  01065E  0012               	return	
  6824  010660  D6DE               	goto	l1041
  6825  010662                     __end_of_swPush:
  6826                           	opt stack 0
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           postinc0	equ	0xFEE
  6835                           wreg	equ	0xFE8
  6836                           indf1	equ	0xFE7
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _sw1Process *****************
  6848 ;; Defined at:
  6849 ;;		line 57 in file "user.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg, status,2, status,0
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6867 ;;Total ram usage:        0 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:    5
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_main
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text7
  6878  012150                     __ptext7:
  6879                           	opt stack 0
  6880  012150                     _sw1Process:
  6881                           	opt stack 25
  6882                           
  6883                           ;user.c: 60:  static unsigned char sw1Count = 0;;user.c: 61:  static unsigned char sw1St
      +                          ate = 0;;user.c: 62:  static unsigned short sw1Count2 = 0;;user.c: 63:  if (sw1State != 
      +                          !RD6)
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;incstack = 0
  6887  012150  BC8C               	btfsc	3980,6,c	;volatile
  6888  012152  D002               	goto	u6350
  6889  012154  0E01               	movlw	1
  6890  012156  D001               	goto	u6360
  6891  012158                     u6350:
  6892  012158  0E00               	movlw	0
  6893  01215A                     u6360:
  6894  01215A  1834               	xorwf	sw1Process@sw1State,w,c
  6895  01215C  B4D8               	btfsc	status,2,c
  6896  01215E  D017               	goto	l504
  6897                           
  6898                           ;user.c: 64:  {;user.c: 65:   if (++sw1Count == 10)
  6899  012160  2A35               	incf	sw1Process@sw1Count,f,c
  6900  012162  0E0A               	movlw	10
  6901  012164  1835               	xorwf	sw1Process@sw1Count,w,c
  6902  012166  A4D8               	btfss	status,2,c
  6903  012168  D014               	goto	l508
  6904                           
  6905                           ;user.c: 66:   {;user.c: 67:    sw1State = !sw1State;
  6906  01216A  5034               	movf	sw1Process@sw1State,w,c
  6907  01216C  A4D8               	btfss	status,2,c
  6908  01216E  D002               	goto	u6390
  6909  012170  0E01               	movlw	1
  6910  012172  D001               	goto	u6400
  6911  012174                     u6390:
  6912  012174  0E00               	movlw	0
  6913  012176                     u6400:
  6914  012176  6E34               	movwf	sw1Process@sw1State,c
  6915                           
  6916                           ;user.c: 68:    if (!sw1State)
  6917  012178  5034               	movf	sw1Process@sw1State,w,c
  6918  01217A  A4D8               	btfss	status,2,c
  6919  01217C  D00A               	goto	l508
  6920                           
  6921                           ;user.c: 69:    {;user.c: 70:     if (sw1Count2 < 2000)
  6922  01217E  0ED0               	movlw	208
  6923  012180  5C30               	subwf	sw1Process@sw1Count2,w,c
  6924  012182  0E07               	movlw	7
  6925  012184  5831               	subwfb	sw1Process@sw1Count2+1,w,c
  6926  012186  B0D8               	btfsc	status,0,c
  6927  012188  D004               	goto	l508
  6928                           
  6929                           ;user.c: 71:     {;user.c: 72:      mainFlags.sw1Pushed = 1;
  6930  01218A  8032               	bsf	_mainFlags,0,c
  6931                           
  6932                           ;user.c: 76:  }
  6933                           
  6934                           ;user.c: 75:   }
  6935                           
  6936                           ;user.c: 74:    }
  6937                           
  6938                           ;user.c: 73:     }
  6939  01218C  D002               	goto	l508
  6940  01218E                     l504:
  6941                           
  6942                           ;user.c: 78:  {;user.c: 79:   sw1Count = 0;
  6943  01218E  0E00               	movlw	0
  6944  012190  6E35               	movwf	sw1Process@sw1Count,c
  6945  012192                     l508:
  6946                           
  6947                           ;user.c: 82:  if (sw1State)
  6948  012192  5034               	movf	sw1Process@sw1State,w,c
  6949  012194  B4D8               	btfsc	status,2,c
  6950  012196  D010               	goto	l509
  6951                           
  6952                           ;user.c: 83:  {;user.c: 84:   if (sw1Count2 == 2000)
  6953  012198  0ED0               	movlw	208
  6954  01219A  1830               	xorwf	sw1Process@sw1Count2,w,c
  6955  01219C  E10A               	bnz	l6815
  6956  01219E  0E07               	movlw	7
  6957  0121A0  1831               	xorwf	sw1Process@sw1Count2+1,w,c
  6958  0121A2  A4D8               	btfss	status,2,c
  6959  0121A4  D006               	goto	l510
  6960                           
  6961                           ;user.c: 85:   {;user.c: 86:    mainFlags.sw1LongPushing = 1;
  6962  0121A6  8232               	bsf	_mainFlags,1,c
  6963                           
  6964                           ;user.c: 87:    sw1Count2 = 2000 + 1;
  6965  0121A8  0E07               	movlw	7
  6966  0121AA  6E31               	movwf	sw1Process@sw1Count2+1,c
  6967  0121AC  0ED1               	movlw	209
  6968  0121AE  6E30               	movwf	sw1Process@sw1Count2,c
  6969                           
  6970                           ;user.c: 88:   }
  6971  0121B0  0012               	return	
  6972  0121B2                     l510:
  6973  0121B2                     l6815:
  6974                           
  6975                           ;user.c: 90:   {;user.c: 91:    sw1Count2++;
  6976  0121B2  4A30               	infsnz	sw1Process@sw1Count2,f,c
  6977  0121B4  2A31               	incf	sw1Process@sw1Count2+1,f,c
  6978                           
  6979                           ;user.c: 93:  }
  6980                           
  6981                           ;user.c: 92:   }
  6982  0121B6  0012               	return	
  6983  0121B8                     l509:
  6984                           
  6985                           ;user.c: 95:  {;user.c: 96:   sw1Count2 = 0;
  6986  0121B8  0E00               	movlw	0
  6987  0121BA  6E31               	movwf	sw1Process@sw1Count2+1,c
  6988  0121BC  0E00               	movlw	0
  6989  0121BE  6E30               	movwf	sw1Process@sw1Count2,c
  6990  0121C0  0012               	return	
  6991  0121C2                     __end_of_sw1Process:
  6992                           	opt stack 0
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           postinc0	equ	0xFEE
  7001                           wreg	equ	0xFE8
  7002                           indf1	equ	0xFE7
  7003                           postdec1	equ	0xFE5
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           indf2	equ	0xFDF
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _showBatteryState *****************
  7014 ;; Defined at:
  7015 ;;		line 333 in file "user.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  v               2   22[BANK0 ] unsigned short 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7030 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;Total ram usage:        2 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    8
  7036 ;; This function calls:
  7037 ;;		_GetFuel
  7038 ;;		_showState
  7039 ;;		_waitMs
  7040 ;; This function is called by:
  7041 ;;		_main
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           	psect	text8
  7046  011FE6                     __ptext8:
  7047                           	opt stack 0
  7048  011FE6                     _showBatteryState:
  7049                           	opt stack 22
  7050                           
  7051                           ;user.c: 335:  unsigned short v = GetFuel();
  7052                           
  7053                           ;incstack = 0
  7054  011FE6  EC6E  F090         	call	_GetFuel	;wreg free
  7055  011FEA  C0DD  F0ED         	movff	?_GetFuel,showBatteryState@v
  7056  011FEE  C0DE  F0EE         	movff	?_GetFuel+1,showBatteryState@v+1
  7057                           
  7058                           ;user.c: 337:  showState(v);
  7059  011FF2  C0ED  F0EB         	movff	showBatteryState@v,showState@v
  7060  011FF6  C0EE  F0EC         	movff	showBatteryState@v+1,showState@v+1
  7061  011FFA  EC5C  F08D         	call	_showState	;wreg free
  7062                           
  7063                           ;user.c: 371:  led[3] = v > 400;
  7064  011FFE  0E91               	movlw	145
  7065  012000  0100               	movlb	0	; () banked
  7066  012002  5DED               	subwf	showBatteryState@v& (0+255),w,b
  7067  012004  0E01               	movlw	1
  7068  012006  59EE               	subwfb	(showBatteryState@v+1)& (0+255),w,b
  7069  012008  A0D8               	btfss	status,0,c
  7070  01200A  D002               	goto	u6820
  7071  01200C  0E01               	movlw	1
  7072  01200E  D001               	goto	u6830
  7073  012010                     u6820:
  7074  012010  0E00               	movlw	0
  7075  012012                     u6830:
  7076  012012  6F6F               	movwf	(_led+3)& (0+255),b
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;user.c: 372:  led[6] = v > 370;
  7080  012014  0E73               	movlw	115
  7081  012016  5DED               	subwf	showBatteryState@v& (0+255),w,b
  7082  012018  0E01               	movlw	1
  7083  01201A  59EE               	subwfb	(showBatteryState@v+1)& (0+255),w,b
  7084  01201C  A0D8               	btfss	status,0,c
  7085  01201E  D002               	goto	u6840
  7086  012020  0E01               	movlw	1
  7087  012022  D001               	goto	u6850
  7088  012024                     u6840:
  7089  012024  0E00               	movlw	0
  7090  012026                     u6850:
  7091  012026  6F72               	movwf	(_led+6)& (0+255),b
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;user.c: 373:  led[7] = v > 350;
  7095  012028  0E5F               	movlw	95
  7096  01202A  5DED               	subwf	showBatteryState@v& (0+255),w,b
  7097  01202C  0E01               	movlw	1
  7098  01202E  59EE               	subwfb	(showBatteryState@v+1)& (0+255),w,b
  7099  012030  A0D8               	btfss	status,0,c
  7100  012032  D002               	goto	u6860
  7101  012034  0E01               	movlw	1
  7102  012036  D001               	goto	u6870
  7103  012038                     u6860:
  7104  012038  0E00               	movlw	0
  7105  01203A                     u6870:
  7106  01203A  6F73               	movwf	(_led+7)& (0+255),b
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;user.c: 374:  led[5] = v > 330;
  7110  01203C  0E4B               	movlw	75
  7111  01203E  5DED               	subwf	showBatteryState@v& (0+255),w,b
  7112  012040  0E01               	movlw	1
  7113  012042  59EE               	subwfb	(showBatteryState@v+1)& (0+255),w,b
  7114  012044  A0D8               	btfss	status,0,c
  7115  012046  D002               	goto	u6880
  7116  012048  0E01               	movlw	1
  7117  01204A  D001               	goto	u6890
  7118  01204C                     u6880:
  7119  01204C  0E00               	movlw	0
  7120  01204E                     u6890:
  7121  01204E  6F71               	movwf	(_led+5)& (0+255),b
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;user.c: 376:  waitMs(500);
  7125  012050  0EF4               	movlw	244
  7126  012052  6FD7               	movwf	waitMs@t& (0+255),b
  7127  012054  0E01               	movlw	1
  7128  012056  6FD8               	movwf	(waitMs@t+1)& (0+255),b
  7129  012058  0E00               	movlw	0
  7130  01205A  6FD9               	movwf	(waitMs@t+2)& (0+255),b
  7131  01205C  0E00               	movlw	0
  7132  01205E  6FDA               	movwf	(waitMs@t+3)& (0+255),b
  7133  012060  EC3F  F093         	call	_waitMs	;wreg free
  7134  012064  0012               	return		;funcret
  7135  012066                     __end_of_showBatteryState:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           postinc0	equ	0xFEE
  7145                           wreg	equ	0xFE8
  7146                           indf1	equ	0xFE7
  7147                           postdec1	equ	0xFE5
  7148                           fsr1h	equ	0xFE2
  7149                           fsr1l	equ	0xFE1
  7150                           indf2	equ	0xFDF
  7151                           postinc2	equ	0xFDE
  7152                           postdec2	equ	0xFDD
  7153                           fsr2h	equ	0xFDA
  7154                           fsr2l	equ	0xFD9
  7155                           status	equ	0xFD8
  7156                           
  7157 ;; *************** function _showState *****************
  7158 ;; Defined at:
  7159 ;;		line 44 in file "FT230X.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  v               2   20[BANK0 ] unsigned short 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;		None
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  1    wreg      void 
  7166 ;; Registers used:
  7167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7173 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7177 ;;Total ram usage:        2 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    7
  7180 ;; This function calls:
  7181 ;;		___lwdiv
  7182 ;;		___lwmod
  7183 ;;		_bufWrite
  7184 ;;		_showText
  7185 ;; This function is called by:
  7186 ;;		_showBatteryState
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text9
  7191  011AB8                     __ptext9:
  7192                           	opt stack 0
  7193  011AB8                     _showState:
  7194                           	opt stack 22
  7195                           
  7196                           ;FT230X.c: 44: void showState(unsigned short v);FT230X.c: 45: {;FT230X.c: 46:  showText(
      +                          "Vbat=");
  7197                           
  7198                           ;incstack = 0
  7199  011AB8  0EF9               	movlw	low STR_2
  7200  011ABA  0100               	movlb	0	; () banked
  7201  011ABC  6FE9               	movwf	showText@text& (0+255),b
  7202  011ABE  0EFF               	movlw	high STR_2
  7203  011AC0  6FEA               	movwf	(showText@text+1)& (0+255),b
  7204  011AC2  EC81  F093         	call	_showText	;wreg free
  7205                           
  7206                           ;FT230X.c: 47:  bufWrite(&bufU5_main, '0' + v / 100);
  7207  011AC6  0E39               	movlw	low _bufU5_main
  7208  011AC8  0100               	movlb	0	; () banked
  7209  011ACA  6FE3               	movwf	bufWrite@b& (0+255),b
  7210  011ACC  0E00               	movlw	high _bufU5_main
  7211  011ACE  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7212  011AD0  C0EB  F0D7         	movff	showState@v,___lwdiv@dividend
  7213  011AD4  C0EC  F0D8         	movff	showState@v+1,___lwdiv@dividend+1
  7214  011AD8  0E00               	movlw	0
  7215  011ADA  6FDA               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7216  011ADC  0E64               	movlw	100
  7217  011ADE  6FD9               	movwf	___lwdiv@divisor& (0+255),b
  7218  011AE0  EC68  F092         	call	___lwdiv	;wreg free
  7219  011AE4  0100               	movlb	0	; () banked
  7220  011AE6  51D7               	movf	?___lwdiv& (0+255),w,b
  7221  011AE8  0F30               	addlw	48
  7222  011AEA  6FE5               	movwf	bufWrite@d& (0+255),b
  7223  011AEC  EC84  F091         	call	_bufWrite	;wreg free
  7224                           
  7225                           ;FT230X.c: 48:  bufWrite(&bufU5_main, '.');
  7226  011AF0  0E39               	movlw	low _bufU5_main
  7227  011AF2  0100               	movlb	0	; () banked
  7228  011AF4  6FE3               	movwf	bufWrite@b& (0+255),b
  7229  011AF6  0E00               	movlw	high _bufU5_main
  7230  011AF8  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7231  011AFA  0E2E               	movlw	46
  7232  011AFC  6FE5               	movwf	bufWrite@d& (0+255),b
  7233  011AFE  EC84  F091         	call	_bufWrite	;wreg free
  7234                           
  7235                           ;FT230X.c: 49:  bufWrite(&bufU5_main, '0' + v / 10 % 10);
  7236  011B02  0E39               	movlw	low _bufU5_main
  7237  011B04  0100               	movlb	0	; () banked
  7238  011B06  6FE3               	movwf	bufWrite@b& (0+255),b
  7239  011B08  0E00               	movlw	high _bufU5_main
  7240  011B0A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7241  011B0C  0E00               	movlw	0
  7242  011B0E  6FDA               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7243  011B10  0E0A               	movlw	10
  7244  011B12  6FD9               	movwf	___lwdiv@divisor& (0+255),b
  7245  011B14  C0EB  F0D7         	movff	showState@v,___lwdiv@dividend
  7246  011B18  C0EC  F0D8         	movff	showState@v+1,___lwdiv@dividend+1
  7247  011B1C  EC68  F092         	call	___lwdiv	;wreg free
  7248  011B20  C0D7  F0DE         	movff	?___lwdiv,___lwmod@dividend
  7249  011B24  C0D8  F0DF         	movff	?___lwdiv+1,___lwmod@dividend+1
  7250  011B28  0E00               	movlw	0
  7251  011B2A  0100               	movlb	0	; () banked
  7252  011B2C  6FE1               	movwf	(___lwmod@divisor+1)& (0+255),b
  7253  011B2E  0E0A               	movlw	10
  7254  011B30  6FE0               	movwf	___lwmod@divisor& (0+255),b
  7255  011B32  ECDA  F092         	call	___lwmod	;wreg free
  7256  011B36  0100               	movlb	0	; () banked
  7257  011B38  51DE               	movf	?___lwmod& (0+255),w,b
  7258  011B3A  0F30               	addlw	48
  7259  011B3C  6FE5               	movwf	bufWrite@d& (0+255),b
  7260  011B3E  EC84  F091         	call	_bufWrite	;wreg free
  7261                           
  7262                           ;FT230X.c: 50:  bufWrite(&bufU5_main, '0' + v % 10);
  7263  011B42  0E39               	movlw	low _bufU5_main
  7264  011B44  0100               	movlb	0	; () banked
  7265  011B46  6FE3               	movwf	bufWrite@b& (0+255),b
  7266  011B48  0E00               	movlw	high _bufU5_main
  7267  011B4A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7268  011B4C  C0EB  F0DE         	movff	showState@v,___lwmod@dividend
  7269  011B50  C0EC  F0DF         	movff	showState@v+1,___lwmod@dividend+1
  7270  011B54  0E00               	movlw	0
  7271  011B56  6FE1               	movwf	(___lwmod@divisor+1)& (0+255),b
  7272  011B58  0E0A               	movlw	10
  7273  011B5A  6FE0               	movwf	___lwmod@divisor& (0+255),b
  7274  011B5C  ECDA  F092         	call	___lwmod	;wreg free
  7275  011B60  0100               	movlb	0	; () banked
  7276  011B62  51DE               	movf	?___lwmod& (0+255),w,b
  7277  011B64  0F30               	addlw	48
  7278  011B66  6FE5               	movwf	bufWrite@d& (0+255),b
  7279  011B68  EC84  F091         	call	_bufWrite	;wreg free
  7280                           
  7281                           ;FT230X.c: 51:  bufWrite(&bufU5_main, 'V');
  7282  011B6C  0E39               	movlw	low _bufU5_main
  7283  011B6E  0100               	movlb	0	; () banked
  7284  011B70  6FE3               	movwf	bufWrite@b& (0+255),b
  7285  011B72  0E00               	movlw	high _bufU5_main
  7286  011B74  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7287  011B76  0E56               	movlw	86
  7288  011B78  6FE5               	movwf	bufWrite@d& (0+255),b
  7289  011B7A  EC84  F091         	call	_bufWrite	;wreg free
  7290                           
  7291                           ;FT230X.c: 52:  bufWrite(&bufU5_main, ' ');
  7292  011B7E  0E39               	movlw	low _bufU5_main
  7293  011B80  0100               	movlb	0	; () banked
  7294  011B82  6FE3               	movwf	bufWrite@b& (0+255),b
  7295  011B84  0E00               	movlw	high _bufU5_main
  7296  011B86  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7297  011B88  0E20               	movlw	32
  7298  011B8A  6FE5               	movwf	bufWrite@d& (0+255),b
  7299  011B8C  EC84  F091         	call	_bufWrite	;wreg free
  7300                           
  7301                           ;FT230X.c: 53:  bufWrite(&bufU5_main, '\r');
  7302  011B90  0E39               	movlw	low _bufU5_main
  7303  011B92  0100               	movlb	0	; () banked
  7304  011B94  6FE3               	movwf	bufWrite@b& (0+255),b
  7305  011B96  0E00               	movlw	high _bufU5_main
  7306  011B98  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7307  011B9A  0E0D               	movlw	13
  7308  011B9C  6FE5               	movwf	bufWrite@d& (0+255),b
  7309  011B9E  EC84  F091         	call	_bufWrite	;wreg free
  7310                           
  7311                           ;FT230X.c: 54:  bufWrite(&bufU5_main, '\r');
  7312  011BA2  0E39               	movlw	low _bufU5_main
  7313  011BA4  0100               	movlb	0	; () banked
  7314  011BA6  6FE3               	movwf	bufWrite@b& (0+255),b
  7315  011BA8  0E00               	movlw	high _bufU5_main
  7316  011BAA  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7317  011BAC  0E0D               	movlw	13
  7318  011BAE  6FE5               	movwf	bufWrite@d& (0+255),b
  7319  011BB0  EC84  F091         	call	_bufWrite	;wreg free
  7320  011BB4  0012               	return		;funcret
  7321  011BB6                     __end_of_showState:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           intcon	equ	0xFF2
  7330                           postinc0	equ	0xFEE
  7331                           wreg	equ	0xFE8
  7332                           indf1	equ	0xFE7
  7333                           postdec1	equ	0xFE5
  7334                           fsr1h	equ	0xFE2
  7335                           fsr1l	equ	0xFE1
  7336                           indf2	equ	0xFDF
  7337                           postinc2	equ	0xFDE
  7338                           postdec2	equ	0xFDD
  7339                           fsr2h	equ	0xFDA
  7340                           fsr2l	equ	0xFD9
  7341                           status	equ	0xFD8
  7342                           
  7343 ;; *************** function _showText *****************
  7344 ;; Defined at:
  7345 ;;		line 16 in file "FT230X.c"
  7346 ;; Parameters:    Size  Location     Type
  7347 ;;  text            2   18[BANK0 ] PTR unsigned char 
  7348 ;;		 -> STR_2(6), STR_1(12), 
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      void 
  7353 ;; Registers used:
  7354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7360 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;Total ram usage:        2 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    6
  7367 ;; This function calls:
  7368 ;;		_bufWrite
  7369 ;; This function is called by:
  7370 ;;		_main
  7371 ;;		_showState
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text10
  7376  012702                     __ptext10:
  7377                           	opt stack 0
  7378  012702                     _showText:
  7379                           	opt stack 24
  7380                           
  7381                           ;FT230X.c: 16: void showText(unsigned char* text);FT230X.c: 17: {;FT230X.c: 18:  while (
      +                          *text)
  7382                           
  7383                           ;incstack = 0
  7384  012702  D013               	goto	l680
  7385  012704                     
  7386                           ;FT230X.c: 19:  {;FT230X.c: 20:   bufWrite(&bufU5_main,*text++);
  7387  012704  0E39               	movlw	low _bufU5_main
  7388  012706  0100               	movlb	0	; () banked
  7389  012708  6FE3               	movwf	bufWrite@b& (0+255),b
  7390  01270A  0E00               	movlw	high _bufU5_main
  7391  01270C  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  7392  01270E  C0E9  FFF6         	movff	showText@text,tblptrl
  7393  012712  C0EA  FFF7         	movff	showText@text+1,tblptrh
  7394  012716                     	if	0	;tblptru may be non-zero
  7395  012716                     	endif
  7396  012716                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7397  012716  0E00               	movlw	low (__mediumconst shr (0+16))
  7398  012718  6EF8               	movwf	tblptru,c
  7399  01271A                     	endif
  7400  01271A  0008               	tblrd		*
  7401  01271C  CFF5 F0E5          	movff	tablat,bufWrite@d
  7402  012720  EC84  F091         	call	_bufWrite	;wreg free
  7403  012724  0100               	movlb	0	; () banked
  7404  012726  4BE9               	infsnz	showText@text& (0+255),f,b
  7405  012728  2BEA               	incf	(showText@text+1)& (0+255),f,b
  7406  01272A                     l680:
  7407                           
  7408                           ;FT230X.c: 18:  while (*text)
  7409                           
  7410                           ; BSR set to: 0
  7411  01272A  C0E9  FFF6         	movff	showText@text,tblptrl
  7412  01272E  C0EA  FFF7         	movff	showText@text+1,tblptrh
  7413  012732                     	if	0	;tblptru may be non-zero
  7414  012732                     	endif
  7415  012732                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7416  012732  0E00               	movlw	low (__mediumconst shr (0+16))
  7417  012734  6EF8               	movwf	tblptru,c
  7418  012736                     	endif
  7419  012736  0008               	tblrd		*
  7420  012738  50F5               	movf	tablat,w,c
  7421  01273A  0900               	iorlw	0
  7422  01273C  B4D8               	btfsc	status,2,c
  7423  01273E  0012               	return	
  7424  012740  D7E1               	goto	l681
  7425  012742                     __end_of_showText:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           postinc0	equ	0xFEE
  7435                           wreg	equ	0xFE8
  7436                           indf1	equ	0xFE7
  7437                           postdec1	equ	0xFE5
  7438                           fsr1h	equ	0xFE2
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function ___lwmod *****************
  7448 ;; Defined at:
  7449 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  dividend        2    7[BANK0 ] unsigned int 
  7452 ;;  divisor         2    9[BANK0 ] unsigned int 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  counter         1   11[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  2    7[BANK0 ] unsigned int 
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7464 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7467 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7468 ;;Total ram usage:        5 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    5
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_showState
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           	psect	text11
  7479  0125B4                     __ptext11:
  7480                           	opt stack 0
  7481  0125B4                     ___lwmod:
  7482                           	opt stack 23
  7483                           
  7484                           ;incstack = 0
  7485  0125B4  0100               	movlb	0	; () banked
  7486  0125B6  51E0               	movf	___lwmod@divisor& (0+255),w,b
  7487  0125B8  11E1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7488  0125BA  B4D8               	btfsc	status,2,c
  7489  0125BC  D018               	goto	l1655
  7490                           
  7491                           ; BSR set to: 0
  7492  0125BE  0E01               	movlw	1
  7493  0125C0  6FE2               	movwf	___lwmod@counter& (0+255),b
  7494  0125C2  D004               	goto	l1650
  7495  0125C4                     
  7496                           ; BSR set to: 0
  7497                           
  7498                           ; BSR set to: 0
  7499  0125C4  90D8               	bcf	status,0,c
  7500  0125C6  37E0               	rlcf	___lwmod@divisor& (0+255),f,b
  7501  0125C8  37E1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7502  0125CA  2BE2               	incf	___lwmod@counter& (0+255),f,b
  7503  0125CC                     l1650:
  7504                           
  7505                           ; BSR set to: 0
  7506                           
  7507                           ; BSR set to: 0
  7508  0125CC  AFE1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7509  0125CE  D7FA               	goto	l1651
  7510  0125D0                     u5540:
  7511                           
  7512                           ; BSR set to: 0
  7513                           
  7514                           ; BSR set to: 0
  7515                           
  7516                           ; BSR set to: 0
  7517  0125D0  51E0               	movf	___lwmod@divisor& (0+255),w,b
  7518  0125D2  5DDE               	subwf	___lwmod@dividend& (0+255),w,b
  7519  0125D4  51E1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7520  0125D6  59DF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7521  0125D8  A0D8               	btfss	status,0,c
  7522  0125DA  D004               	goto	l1654
  7523                           
  7524                           ; BSR set to: 0
  7525  0125DC  51E0               	movf	___lwmod@divisor& (0+255),w,b
  7526  0125DE  5FDE               	subwf	___lwmod@dividend& (0+255),f,b
  7527  0125E0  51E1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7528  0125E2  5BDF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7529  0125E4                     l1654:
  7530                           
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534  0125E4  90D8               	bcf	status,0,c
  7535  0125E6  33E1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7536  0125E8  33E0               	rrcf	___lwmod@divisor& (0+255),f,b
  7537                           
  7538                           ; BSR set to: 0
  7539  0125EA  2FE2               	decfsz	___lwmod@counter& (0+255),f,b
  7540  0125EC  D7F1               	goto	u5540
  7541  0125EE                     l1655:
  7542                           
  7543                           ; BSR set to: 0
  7544                           
  7545                           ; BSR set to: 0
  7546  0125EE  C0DE  F0DE         	movff	___lwmod@dividend,?___lwmod
  7547  0125F2  C0DF  F0DF         	movff	___lwmod@dividend+1,?___lwmod+1
  7548                           
  7549                           ; BSR set to: 0
  7550  0125F6  0012               	return		;funcret
  7551  0125F8                     __end_of___lwmod:
  7552                           	opt stack 0
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           postinc0	equ	0xFEE
  7561                           wreg	equ	0xFE8
  7562                           indf1	equ	0xFE7
  7563                           postdec1	equ	0xFE5
  7564                           fsr1h	equ	0xFE2
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function ___lwdiv *****************
  7574 ;; Defined at:
  7575 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  dividend        2    0[BANK0 ] unsigned int 
  7578 ;;  divisor         2    2[BANK0 ] unsigned int 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  quotient        2    5[BANK0 ] unsigned int 
  7581 ;;  counter         1    4[BANK0 ] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  2    0[BANK0 ] unsigned int 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, status,0
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7591 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7592 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7594 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7595 ;;Total ram usage:        7 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    5
  7598 ;; This function calls:
  7599 ;;		Nothing
  7600 ;; This function is called by:
  7601 ;;		_showState
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text12
  7606  0124D0                     __ptext12:
  7607                           	opt stack 0
  7608  0124D0                     ___lwdiv:
  7609                           	opt stack 23
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;incstack = 0
  7613  0124D0  0E00               	movlw	0
  7614  0124D2  0100               	movlb	0	; () banked
  7615  0124D4  6FDD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7616  0124D6  0E00               	movlw	0
  7617  0124D8  6FDC               	movwf	___lwdiv@quotient& (0+255),b
  7618                           
  7619                           ; BSR set to: 0
  7620  0124DA  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  7621  0124DC  11DA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7622  0124DE  B4D8               	btfsc	status,2,c
  7623  0124E0  D01C               	goto	l1645
  7624                           
  7625                           ; BSR set to: 0
  7626  0124E2  0E01               	movlw	1
  7627  0124E4  6FDB               	movwf	___lwdiv@counter& (0+255),b
  7628  0124E6  D004               	goto	l1640
  7629  0124E8                     
  7630                           ; BSR set to: 0
  7631                           
  7632                           ; BSR set to: 0
  7633  0124E8  90D8               	bcf	status,0,c
  7634  0124EA  37D9               	rlcf	___lwdiv@divisor& (0+255),f,b
  7635  0124EC  37DA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7636  0124EE  2BDB               	incf	___lwdiv@counter& (0+255),f,b
  7637  0124F0                     l1640:
  7638                           
  7639                           ; BSR set to: 0
  7640                           
  7641                           ; BSR set to: 0
  7642  0124F0  AFDA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7643  0124F2  D7FA               	goto	l1641
  7644  0124F4                     u5510:
  7645                           
  7646                           ; BSR set to: 0
  7647                           
  7648                           ; BSR set to: 0
  7649                           
  7650                           ; BSR set to: 0
  7651  0124F4  90D8               	bcf	status,0,c
  7652  0124F6  37DC               	rlcf	___lwdiv@quotient& (0+255),f,b
  7653  0124F8  37DD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7654                           
  7655                           ; BSR set to: 0
  7656  0124FA  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  7657  0124FC  5DD7               	subwf	___lwdiv@dividend& (0+255),w,b
  7658  0124FE  51DA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7659  012500  59D8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7660  012502  A0D8               	btfss	status,0,c
  7661  012504  D005               	goto	l1644
  7662                           
  7663                           ; BSR set to: 0
  7664  012506  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  7665  012508  5FD7               	subwf	___lwdiv@dividend& (0+255),f,b
  7666  01250A  51DA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7667  01250C  5BD8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7668                           
  7669                           ; BSR set to: 0
  7670  01250E  81DC               	bsf	___lwdiv@quotient& (0+255),0,b
  7671  012510                     l1644:
  7672                           
  7673                           ; BSR set to: 0
  7674                           
  7675                           ; BSR set to: 0
  7676  012510  90D8               	bcf	status,0,c
  7677  012512  33DA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7678  012514  33D9               	rrcf	___lwdiv@divisor& (0+255),f,b
  7679                           
  7680                           ; BSR set to: 0
  7681  012516  2FDB               	decfsz	___lwdiv@counter& (0+255),f,b
  7682  012518  D7ED               	goto	u5510
  7683  01251A                     l1645:
  7684                           
  7685                           ; BSR set to: 0
  7686                           
  7687                           ; BSR set to: 0
  7688  01251A  C0DC  F0D7         	movff	___lwdiv@quotient,?___lwdiv
  7689  01251E  C0DD  F0D8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7690                           
  7691                           ; BSR set to: 0
  7692  012522  0012               	return		;funcret
  7693  012524                     __end_of___lwdiv:
  7694                           	opt stack 0
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           intcon	equ	0xFF2
  7702                           postinc0	equ	0xFEE
  7703                           wreg	equ	0xFE8
  7704                           indf1	equ	0xFE7
  7705                           postdec1	equ	0xFE5
  7706                           fsr1h	equ	0xFE2
  7707                           fsr1l	equ	0xFE1
  7708                           indf2	equ	0xFDF
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function _GetFuel *****************
  7716 ;; Defined at:
  7717 ;;		line 380 in file "user.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;		None
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  r               2    9[BANK0 ] unsigned short 
  7722 ;;  ret             2   11[BANK0 ] unsigned short 
  7723 ;;  c               1   13[BANK0 ] unsigned char 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  2    6[BANK0 ] unsigned short 
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7734 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7736 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7737 ;;Total ram usage:        8 bytes
  7738 ;; Hardware stack levels used:    1
  7739 ;; Hardware stack levels required when called:    6
  7740 ;; This function calls:
  7741 ;;		_ADCC_GetSingleConversion
  7742 ;;		___wmul
  7743 ;; This function is called by:
  7744 ;;		_main
  7745 ;;		_showBatteryState
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           	psect	text13
  7750  0120DC                     __ptext13:
  7751                           	opt stack 0
  7752  0120DC                     _GetFuel:
  7753                           	opt stack 23
  7754                           
  7755                           ;user.c: 382:  unsigned char c = 0;
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;incstack = 0
  7759  0120DC  0E00               	movlw	0
  7760  0120DE  0100               	movlb	0	; () banked
  7761  0120E0  6FE4               	movwf	GetFuel@c& (0+255),b
  7762                           
  7763                           ;user.c: 383:  unsigned short ret = 0;
  7764  0120E2  0E00               	movlw	0
  7765  0120E4  6FE3               	movwf	(GetFuel@ret+1)& (0+255),b
  7766  0120E6  0E00               	movlw	0
  7767  0120E8  6FE2               	movwf	GetFuel@ret& (0+255),b
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;user.c: 384:  (LATA5=1);
  7771  0120EA  8A79               	bsf	3961,5,c	;volatile
  7772                           
  7773                           ;user.c: 386:  for (c = 0; c < 10; c++)
  7774  0120EC  0E00               	movlw	0
  7775  0120EE  6FE4               	movwf	GetFuel@c& (0+255),b
  7776  0120F0                     l6191:
  7777                           
  7778                           ; BSR set to: 0
  7779  0120F0  0E09               	movlw	9
  7780  0120F2  65E4               	cpfsgt	GetFuel@c& (0+255),b
  7781  0120F4  D001               	goto	l552
  7782  0120F6  D014               	goto	u5620
  7783  0120F8                     l552:
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;user.c: 387:  {;user.c: 388:   unsigned short r = ADCC_GetSingleConversion(0);
  7787                           
  7788                           ; BSR set to: 0
  7789  0120F8  0E00               	movlw	0
  7790  0120FA  EC3E  F094         	call	_ADCC_GetSingleConversion
  7791  0120FE  C0D7  F0E0         	movff	?_ADCC_GetSingleConversion,GetFuel@r
  7792  012102  C0D8  F0E1         	movff	?_ADCC_GetSingleConversion+1,GetFuel@r+1
  7793                           
  7794                           ;user.c: 389:   if (ret < r)
  7795  012106  0100               	movlb	0	; () banked
  7796  012108  51E0               	movf	GetFuel@r& (0+255),w,b
  7797  01210A  5DE2               	subwf	GetFuel@ret& (0+255),w,b
  7798  01210C  51E1               	movf	(GetFuel@r+1)& (0+255),w,b
  7799  01210E  59E3               	subwfb	(GetFuel@ret+1)& (0+255),w,b
  7800  012110  B0D8               	btfsc	status,0,c
  7801  012112  D004               	goto	l554
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;user.c: 390:   {;user.c: 391:    ret = r;
  7805  012114  C0E0  F0E2         	movff	GetFuel@r,GetFuel@ret
  7806  012118  C0E1  F0E3         	movff	GetFuel@r+1,GetFuel@ret+1
  7807  01211C                     l554:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;user.c: 393:  }
  7811                           
  7812                           ; BSR set to: 0
  7813  01211C  2BE4               	incf	GetFuel@c& (0+255),f,b
  7814  01211E  D7E8               	goto	l6191
  7815  012120                     u5620:
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;user.c: 395:  (LATA5=0);
  7819  012120  9A79               	bcf	3961,5,c	;volatile
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;user.c: 397:  return ret * 108 / 128;
  7823  012122  C0E2  F0D7         	movff	GetFuel@ret,___wmul@multiplier
  7824  012126  C0E3  F0D8         	movff	GetFuel@ret+1,___wmul@multiplier+1
  7825  01212A  0E00               	movlw	0
  7826  01212C  6FDA               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7827  01212E  0E6C               	movlw	108
  7828  012130  6FD9               	movwf	___wmul@multiplicand& (0+255),b
  7829  012132  EC2A  F094         	call	___wmul	;wreg free
  7830  012136  0E07               	movlw	7
  7831  012138  0100               	movlb	0	; () banked
  7832  01213A  6FDF               	movwf	??_GetFuel& (0+255),b
  7833  01213C                     u5635:
  7834  01213C  90D8               	bcf	status,0,c
  7835  01213E  33D8               	rrcf	(?___wmul+1)& (0+255),f,b
  7836  012140  33D7               	rrcf	?___wmul& (0+255),f,b
  7837  012142  2FDF               	decfsz	??_GetFuel& (0+255),f,b
  7838  012144  D7FB               	goto	u5635
  7839  012146  C0D7  F0DD         	movff	?___wmul,?_GetFuel
  7840  01214A  C0D8  F0DE         	movff	?___wmul+1,?_GetFuel+1
  7841  01214E  0012               	return	
  7842  012150                     __end_of_GetFuel:
  7843                           	opt stack 0
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           intcon	equ	0xFF2
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           indf1	equ	0xFE7
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           postdec2	equ	0xFDD
  7860                           fsr2h	equ	0xFDA
  7861                           fsr2l	equ	0xFD9
  7862                           status	equ	0xFD8
  7863                           
  7864 ;; *************** function ___wmul *****************
  7865 ;; Defined at:
  7866 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7869 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  product         2    4[BANK0 ] unsigned int 
  7872 ;; Return value:  Size  Location     Type
  7873 ;;                  2    0[BANK0 ] unsigned int 
  7874 ;; Registers used:
  7875 ;;		wreg, status,2, status,0, prodl, prodh
  7876 ;; Tracked objects:
  7877 ;;		On entry : 0/0
  7878 ;;		On exit  : 0/0
  7879 ;;		Unchanged: 0/0
  7880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7882 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7884 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7885 ;;Total ram usage:        6 bytes
  7886 ;; Hardware stack levels used:    1
  7887 ;; Hardware stack levels required when called:    5
  7888 ;; This function calls:
  7889 ;;		Nothing
  7890 ;; This function is called by:
  7891 ;;		_GetFuel
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895                           	psect	text14
  7896  012854                     __ptext14:
  7897                           	opt stack 0
  7898  012854                     ___wmul:
  7899                           	opt stack 23
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;incstack = 0
  7903  012854  0100               	movlb	0	; () banked
  7904  012856  51D7               	movf	___wmul@multiplier& (0+255),w,b
  7905  012858  03D9               	mulwf	___wmul@multiplicand& (0+255),b
  7906  01285A  CFF3 F0DB          	movff	prodl,___wmul@product
  7907  01285E  CFF4 F0DC          	movff	prodh,___wmul@product+1
  7908  012862  51D7               	movf	___wmul@multiplier& (0+255),w,b
  7909  012864  03DA               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7910  012866  50F3               	movf	prodl,w,c
  7911  012868  27DC               	addwf	(___wmul@product+1)& (0+255),f,b
  7912  01286A  51D8               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7913  01286C  03D9               	mulwf	___wmul@multiplicand& (0+255),b
  7914  01286E  50F3               	movf	prodl,w,c
  7915  012870  27DC               	addwf	(___wmul@product+1)& (0+255),f,b
  7916                           
  7917                           ; BSR set to: 0
  7918  012872  C0DB  F0D7         	movff	___wmul@product,?___wmul
  7919  012876  C0DC  F0D8         	movff	___wmul@product+1,?___wmul+1
  7920  01287A  0012               	return	
  7921  01287C                     __end_of___wmul:
  7922                           	opt stack 0
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodh	equ	0xFF4
  7928                           prodl	equ	0xFF3
  7929                           intcon	equ	0xFF2
  7930                           postinc0	equ	0xFEE
  7931                           wreg	equ	0xFE8
  7932                           indf1	equ	0xFE7
  7933                           postdec1	equ	0xFE5
  7934                           fsr1h	equ	0xFE2
  7935                           fsr1l	equ	0xFE1
  7936                           indf2	equ	0xFDF
  7937                           postinc2	equ	0xFDE
  7938                           postdec2	equ	0xFDD
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function _ADCC_GetSingleConversion *****************
  7944 ;; Defined at:
  7945 ;;		line 127 in file "adcc.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  channel         1    wreg     enum E14205
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;  channel         1    4[BANK0 ] enum E14205
  7950 ;; Return value:  Size  Location     Type
  7951 ;;                  2    0[BANK0 ] unsigned short 
  7952 ;; Registers used:
  7953 ;;		wreg, status,2, status,0
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7959 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7962 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7963 ;;Total ram usage:        5 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    5
  7966 ;; This function calls:
  7967 ;;		Nothing
  7968 ;; This function is called by:
  7969 ;;		_GetFuel
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text15
  7974  01287C                     __ptext15:
  7975                           	opt stack 0
  7976  01287C                     _ADCC_GetSingleConversion:
  7977                           	opt stack 23
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;incstack = 0
  7981                           ;ADCC_GetSingleConversion@channel stored from wreg
  7982  01287C  0100               	movlb	0	; () banked
  7983  01287E  6FDB               	movwf	ADCC_GetSingleConversion@channel& (0+255),b
  7984                           
  7985                           ;adcc.c: 127: adc_result_t ADCC_GetSingleConversion(adcc_channel_t channel);adcc.c: 128:
      +                           {;adcc.c: 130:  ADPCH = channel;
  7986  012880  C0DB  FF5F         	movff	ADCC_GetSingleConversion@channel,3935	;volatile
  7987                           
  7988                           ;adcc.c: 133:  ADCON0bits.ADON = 1;
  7989  012884  8E60               	bsf	3936,7,c	;volatile
  7990                           
  7991                           ;adcc.c: 136:  ADCON0bits.ADCONT = 0;
  7992  012886  9C60               	bcf	3936,6,c	;volatile
  7993                           
  7994                           ;adcc.c: 139:  ADCON0bits.ADGO = 1;
  7995  012888  8060               	bsf	3936,0,c	;volatile
  7996  01288A                     
  7997                           ;adcc.c: 143:  while (ADCON0bits.ADGO)
  7998                           
  7999                           ;adcc.c: 144:  {;adcc.c: 145:  }
  8000  01288A  B060               	btfsc	3936,0,c	;volatile
  8001  01288C  D7FE               	goto	l608
  8002                           
  8003                           ;adcc.c: 149:  return ((adc_result_t) ((ADRESH << 8) + ADRESL));
  8004  01288E  5064               	movf	3940,w,c	;volatile
  8005  012890  0100               	movlb	0	; () banked
  8006  012892  6FDA               	movwf	(??_ADCC_GetSingleConversion+1)& (0+255),b
  8007  012894  6BD9               	clrf	??_ADCC_GetSingleConversion& (0+255),b
  8008  012896  5063               	movf	3939,w,c	;volatile
  8009  012898  25D9               	addwf	??_ADCC_GetSingleConversion& (0+255),w,b
  8010  01289A  6FD7               	movwf	?_ADCC_GetSingleConversion& (0+255),b
  8011  01289C  0E00               	movlw	0
  8012  01289E  21DA               	addwfc	(??_ADCC_GetSingleConversion+1)& (0+255),w,b
  8013  0128A0  6FD8               	movwf	(?_ADCC_GetSingleConversion+1)& (0+255),b
  8014  0128A2  0012               	return	
  8015  0128A4                     __end_of_ADCC_GetSingleConversion:
  8016                           	opt stack 0
  8017                           tblptru	equ	0xFF8
  8018                           tblptrh	equ	0xFF7
  8019                           tblptrl	equ	0xFF6
  8020                           tablat	equ	0xFF5
  8021                           prodh	equ	0xFF4
  8022                           prodl	equ	0xFF3
  8023                           intcon	equ	0xFF2
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           indf1	equ	0xFE7
  8027                           postdec1	equ	0xFE5
  8028                           fsr1h	equ	0xFE2
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function _setXY *****************
  8038 ;; Defined at:
  8039 ;;		line 469 in file "keys.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;		None
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;  kc              2    7[BANK0 ] unsigned short 
  8044 ;;  c               1    9[BANK0 ] unsigned char 
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      void 
  8047 ;; Registers used:
  8048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/0
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8055 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8056 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8057 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8058 ;;Total ram usage:       10 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    5
  8061 ;; This function calls:
  8062 ;;		Nothing
  8063 ;; This function is called by:
  8064 ;;		_main
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text16
  8069  011158                     __ptext16:
  8070                           	opt stack 0
  8071  011158                     _setXY:
  8072                           	opt stack 25
  8073                           
  8074                           ;keys.c: 471:  unsigned char c = lastPush;
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;incstack = 0
  8078  011158  C045  F0E0         	movff	_lastPush,setXY@c
  8079                           
  8080                           ;keys.c: 473:  mouseReport.X = 0;
  8081  01115C  0E00               	movlw	0
  8082  01115E  0100               	movlb	0	; () banked
  8083  011160  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8084                           
  8085                           ;keys.c: 474:  mouseReport.Y = 0;
  8086  011162  0E00               	movlw	0
  8087  011164  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8088                           
  8089                           ;keys.c: 475:  mouseReport.W = 0;
  8090  011166  0E00               	movlw	0
  8091  011168  6F85               	movwf	(_mouseReport+3)& (0+255),b
  8092                           
  8093                           ;keys.c: 477:  while (c != 0xff) {
  8094  01116A  D108               	goto	l1102
  8095  01116C                     
  8096                           ; BSR set to: 0
  8097                           ;keys.c: 478:   unsigned short kc = keyMapList[(fnEnable|fnEnableLatch) + keyMode*2][mSw
      +                          [c].num];
  8098                           
  8099                           ; BSR set to: 0
  8100  01116C  51E0               	movf	setXY@c& (0+255),w,b
  8101  01116E  0D07               	mullw	7
  8102  011170  0E02               	movlw	2
  8103  011172  26F3               	addwf	prodl,f,c
  8104  011174  0E00               	movlw	0
  8105  011176  22F4               	addwfc	prodh,f,c
  8106  011178  0E8D               	movlw	low _mSw
  8107  01117A  24F3               	addwf	prodl,w,c
  8108  01117C  6ED9               	movwf	fsr2l,c
  8109  01117E  0E00               	movlw	high _mSw
  8110  011180  20F4               	addwfc	prodh,w,c
  8111  011182  6EDA               	movwf	fsr2h,c
  8112  011184  50DF               	movf	indf2,w,c
  8113  011186  6FD7               	movwf	??_setXY& (0+255),b
  8114  011188  51D7               	movf	??_setXY& (0+255),w,b
  8115  01118A  0D02               	mullw	2
  8116  01118C  518B               	movf	_keyMode& (0+255),w,b
  8117  01118E  6FD8               	movwf	(??_setXY+1)& (0+255),b
  8118  011190  6BD9               	clrf	(??_setXY+2)& (0+255),b
  8119  011192  90D8               	bcf	status,0,c
  8120  011194  37D8               	rlcf	(??_setXY+1)& (0+255),f,b
  8121  011196  37D9               	rlcf	(??_setXY+2)& (0+255),f,b
  8122  011198  5189               	movf	_fnEnable& (0+255),w,b
  8123  01119A  118A               	iorwf	_fnEnableLatch& (0+255),w,b
  8124  01119C  6FDA               	movwf	(??_setXY+3)& (0+255),b
  8125  01119E  6BDB               	clrf	(??_setXY+4)& (0+255),b
  8126  0111A0  51D8               	movf	(??_setXY+1)& (0+255),w,b
  8127  0111A2  27DA               	addwf	(??_setXY+3)& (0+255),f,b
  8128  0111A4  51D9               	movf	(??_setXY+2)& (0+255),w,b
  8129  0111A6  23DB               	addwfc	(??_setXY+4)& (0+255),f,b
  8130  0111A8  90D8               	bcf	status,0,c
  8131  0111AA  37DA               	rlcf	(??_setXY+3)& (0+255),f,b
  8132  0111AC  37DB               	rlcf	(??_setXY+4)& (0+255),f,b
  8133  0111AE  0EEF               	movlw	low _keyMapList
  8134  0111B0  25DA               	addwf	(??_setXY+3)& (0+255),w,b
  8135  0111B2  6ED9               	movwf	fsr2l,c
  8136  0111B4  0E00               	movlw	high _keyMapList
  8137  0111B6  21DB               	addwfc	(??_setXY+4)& (0+255),w,b
  8138  0111B8  6EDA               	movwf	fsr2h,c
  8139  0111BA  CFDE F0DC          	movff	postinc2,??_setXY+5
  8140  0111BE  CFDD F0DD          	movff	postdec2,??_setXY+6
  8141  0111C2  50F3               	movf	prodl,w,c
  8142  0111C4  27DC               	addwf	(??_setXY+5)& (0+255),f,b
  8143  0111C6  50F4               	movf	prodh,w,c
  8144  0111C8  23DD               	addwfc	(??_setXY+6)& (0+255),f,b
  8145  0111CA  C0DC  FFF6         	movff	??_setXY+5,tblptrl
  8146  0111CE  C0DD  FFF7         	movff	??_setXY+6,tblptrh
  8147  0111D2                     	if	0	;tblptru may be non-zero
  8148  0111D2                     	endif
  8149  0111D2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8150  0111D2  0E00               	movlw	low (__mediumconst shr (0+16))
  8151  0111D4  6EF8               	movwf	tblptru,c
  8152  0111D6                     	endif
  8153  0111D6  0009               	tblrd		*+
  8154  0111D8  CFF5 F0DE          	movff	tablat,setXY@kc
  8155  0111DC  000A               	tblrd		*-
  8156  0111DE  CFF5 F0DF          	movff	tablat,setXY@kc+1
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;keys.c: 479:   if ((kc & 0xf000) == 0x4000) {
  8160  0111E2  0E00               	movlw	0
  8161  0111E4  6FD7               	movwf	??_setXY& (0+255),b
  8162  0111E6  0EF0               	movlw	240
  8163  0111E8  6FD8               	movwf	(??_setXY+1)& (0+255),b
  8164  0111EA  C0DE  F0D9         	movff	setXY@kc,??_setXY+2
  8165  0111EE  C0DF  F0DA         	movff	setXY@kc+1,??_setXY+3
  8166  0111F2  51D7               	movf	??_setXY& (0+255),w,b
  8167  0111F4  17D9               	andwf	(??_setXY+2)& (0+255),f,b
  8168  0111F6  51D8               	movf	(??_setXY+1)& (0+255),w,b
  8169  0111F8  17DA               	andwf	(??_setXY+3)& (0+255),f,b
  8170  0111FA  0E40               	movlw	64
  8171  0111FC  19DA               	xorwf	(??_setXY+3)& (0+255),w,b
  8172  0111FE  11D9               	iorwf	(??_setXY+2)& (0+255),w,b
  8173  011200  B4D8               	btfsc	status,2,c
  8174  011202  D06E               	goto	l1105
  8175  011204  D0AD               	goto	l1104
  8176  011206                     
  8177                           ; BSR set to: 0
  8178                           ;keys.c: 482:     mouseReport.X = 0;
  8179                           
  8180                           ; BSR set to: 0
  8181  011206  0E00               	movlw	0
  8182  011208  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;keys.c: 483:     mouseReport.Y = -1;
  8186  01120A  6984               	setf	(_mouseReport+2)& (0+255),b
  8187                           
  8188                           ;keys.c: 484:     break;
  8189  01120C  0012               	return	
  8190  01120E                     l1108:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;keys.c: 486:     mouseReport.X = -1;
  8194  01120E  6983               	setf	(_mouseReport+1)& (0+255),b
  8195                           
  8196                           ;keys.c: 487:     mouseReport.Y = -1;
  8197  011210  6984               	setf	(_mouseReport+2)& (0+255),b
  8198                           
  8199                           ;keys.c: 488:     break;
  8200  011212  0012               	return	
  8201  011214                     l1109:
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;keys.c: 490:     mouseReport.X = -1;
  8205  011214  6983               	setf	(_mouseReport+1)& (0+255),b
  8206                           
  8207                           ; BSR set to: 0
  8208                           ;keys.c: 491:     mouseReport.Y = 0;
  8209  011216  0E00               	movlw	0
  8210  011218  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8211                           
  8212                           ;keys.c: 492:     break;
  8213  01121A  0012               	return	
  8214  01121C                     l1110:
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;keys.c: 494:     mouseReport.X = -1;
  8218  01121C  6983               	setf	(_mouseReport+1)& (0+255),b
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;keys.c: 495:     mouseReport.Y = 1;
  8222  01121E  0E01               	movlw	1
  8223  011220  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8224                           
  8225                           ;keys.c: 496:     break;
  8226  011222  0012               	return	
  8227  011224                     
  8228                           ; BSR set to: 0
  8229                           ;keys.c: 498:     mouseReport.X = 0;
  8230                           
  8231                           ; BSR set to: 0
  8232  011224  0E00               	movlw	0
  8233  011226  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8234                           
  8235                           ;keys.c: 499:     mouseReport.Y = 1;
  8236  011228  0E01               	movlw	1
  8237  01122A  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8238                           
  8239                           ;keys.c: 500:     break;
  8240  01122C  0012               	return	
  8241  01122E                     
  8242                           ; BSR set to: 0
  8243                           ;keys.c: 502:     mouseReport.X = 1;
  8244                           
  8245                           ; BSR set to: 0
  8246  01122E  0E01               	movlw	1
  8247  011230  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8248                           
  8249                           ;keys.c: 503:     mouseReport.Y = 1;
  8250  011232  0E01               	movlw	1
  8251  011234  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8252                           
  8253                           ;keys.c: 504:     break;
  8254  011236  0012               	return	
  8255  011238                     
  8256                           ; BSR set to: 0
  8257                           ;keys.c: 506:     mouseReport.X = 1;
  8258                           
  8259                           ; BSR set to: 0
  8260  011238  0E01               	movlw	1
  8261  01123A  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8262                           
  8263                           ;keys.c: 507:     mouseReport.Y = 0;
  8264  01123C  0E00               	movlw	0
  8265  01123E  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8266                           
  8267                           ;keys.c: 508:     break;
  8268  011240  0012               	return	
  8269  011242                     
  8270                           ; BSR set to: 0
  8271                           ;keys.c: 510:     mouseReport.X = 1;
  8272                           
  8273                           ; BSR set to: 0
  8274  011242  0E01               	movlw	1
  8275  011244  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;keys.c: 511:     mouseReport.Y = -1;
  8279  011246  6984               	setf	(_mouseReport+2)& (0+255),b
  8280                           
  8281                           ;keys.c: 512:     break;
  8282  011248  0012               	return	
  8283  01124A                     
  8284                           ; BSR set to: 0
  8285                           ;keys.c: 514:     mouseReport.X = 0;
  8286                           
  8287                           ; BSR set to: 0
  8288  01124A  0E00               	movlw	0
  8289  01124C  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;keys.c: 515:     mouseReport.Y = -1 * mouseSpeed;
  8293  01124E  5047               	movf	_mouseSpeed,w,c
  8294  011250  0D01               	mullw	1
  8295  011252  50F3               	movf	prodl,w,c
  8296  011254  0800               	sublw	0
  8297  011256  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8298                           
  8299                           ;keys.c: 516:     break;
  8300  011258  0012               	return	
  8301  01125A                     
  8302                           ; BSR set to: 0
  8303                           ;keys.c: 518:     mouseReport.X = -1 * mouseSpeed;
  8304                           
  8305                           ; BSR set to: 0
  8306  01125A  5047               	movf	_mouseSpeed,w,c
  8307  01125C  0D01               	mullw	1
  8308  01125E  50F3               	movf	prodl,w,c
  8309  011260  0800               	sublw	0
  8310  011262  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8311                           
  8312                           ;keys.c: 519:     mouseReport.Y = -1 * mouseSpeed;
  8313  011264  5047               	movf	_mouseSpeed,w,c
  8314  011266  0D01               	mullw	1
  8315  011268  50F3               	movf	prodl,w,c
  8316  01126A  0800               	sublw	0
  8317  01126C  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8318                           
  8319                           ;keys.c: 520:     break;
  8320  01126E  0012               	return	
  8321  011270                     
  8322                           ; BSR set to: 0
  8323                           ;keys.c: 522:     mouseReport.X = -1 * mouseSpeed;
  8324                           
  8325                           ; BSR set to: 0
  8326  011270  5047               	movf	_mouseSpeed,w,c
  8327  011272  0D01               	mullw	1
  8328  011274  50F3               	movf	prodl,w,c
  8329  011276  0800               	sublw	0
  8330  011278  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8331                           
  8332                           ; BSR set to: 0
  8333                           ;keys.c: 523:     mouseReport.Y = 0;
  8334  01127A  0E00               	movlw	0
  8335  01127C  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8336                           
  8337                           ;keys.c: 524:     break;
  8338  01127E  0012               	return	
  8339  011280                     
  8340                           ; BSR set to: 0
  8341                           ;keys.c: 526:     mouseReport.X = -1 * mouseSpeed;
  8342                           
  8343                           ; BSR set to: 0
  8344  011280  5047               	movf	_mouseSpeed,w,c
  8345  011282  0D01               	mullw	1
  8346  011284  50F3               	movf	prodl,w,c
  8347  011286  0800               	sublw	0
  8348  011288  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8349                           
  8350                           ;keys.c: 527:     mouseReport.Y = 1 * mouseSpeed;
  8351  01128A  5047               	movf	_mouseSpeed,w,c
  8352  01128C  0D01               	mullw	1
  8353  01128E  CFF3 F084          	movff	prodl,_mouseReport+2
  8354                           
  8355                           ;keys.c: 528:     break;
  8356  011292  0012               	return	
  8357  011294                     
  8358                           ; BSR set to: 0
  8359                           ;keys.c: 530:     mouseReport.X = 0;
  8360                           
  8361                           ; BSR set to: 0
  8362  011294  0E00               	movlw	0
  8363  011296  6F83               	movwf	(_mouseReport+1)& (0+255),b
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;keys.c: 531:     mouseReport.Y = 1 * mouseSpeed;
  8367  011298  5047               	movf	_mouseSpeed,w,c
  8368  01129A  0D01               	mullw	1
  8369  01129C  CFF3 F084          	movff	prodl,_mouseReport+2
  8370                           
  8371                           ;keys.c: 532:     break;
  8372  0112A0  0012               	return	
  8373  0112A2                     
  8374                           ; BSR set to: 0
  8375                           ;keys.c: 534:     mouseReport.X = 1 * mouseSpeed;
  8376                           
  8377                           ; BSR set to: 0
  8378  0112A2  5047               	movf	_mouseSpeed,w,c
  8379  0112A4  0D01               	mullw	1
  8380  0112A6  CFF3 F083          	movff	prodl,_mouseReport+1
  8381                           
  8382                           ;keys.c: 535:     mouseReport.Y = 1 * mouseSpeed;
  8383  0112AA  5047               	movf	_mouseSpeed,w,c
  8384  0112AC  0D01               	mullw	1
  8385  0112AE  CFF3 F084          	movff	prodl,_mouseReport+2
  8386                           
  8387                           ;keys.c: 536:     break;
  8388  0112B2  0012               	return	
  8389  0112B4                     
  8390                           ; BSR set to: 0
  8391                           ;keys.c: 538:     mouseReport.X = 1 * mouseSpeed;
  8392                           
  8393                           ; BSR set to: 0
  8394  0112B4  5047               	movf	_mouseSpeed,w,c
  8395  0112B6  0D01               	mullw	1
  8396  0112B8  CFF3 F083          	movff	prodl,_mouseReport+1
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;keys.c: 539:     mouseReport.Y = 0;
  8400  0112BC  0E00               	movlw	0
  8401  0112BE  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8402                           
  8403                           ;keys.c: 540:     break;
  8404  0112C0  0012               	return	
  8405  0112C2                     
  8406                           ; BSR set to: 0
  8407                           ;keys.c: 542:     mouseReport.X = 1 * mouseSpeed;
  8408                           
  8409                           ; BSR set to: 0
  8410  0112C2  5047               	movf	_mouseSpeed,w,c
  8411  0112C4  0D01               	mullw	1
  8412  0112C6  CFF3 F083          	movff	prodl,_mouseReport+1
  8413                           
  8414                           ;keys.c: 543:     mouseReport.Y = -1 * mouseSpeed;
  8415  0112CA  5047               	movf	_mouseSpeed,w,c
  8416  0112CC  0D01               	mullw	1
  8417  0112CE  50F3               	movf	prodl,w,c
  8418  0112D0  0800               	sublw	0
  8419  0112D2  6F84               	movwf	(_mouseReport+2)& (0+255),b
  8420                           
  8421                           ;keys.c: 544:     break;
  8422  0112D4  0012               	return	
  8423  0112D6                     
  8424                           ; BSR set to: 0
  8425                           ;keys.c: 546:     mouseReport.W = 1;
  8426                           
  8427                           ; BSR set to: 0
  8428  0112D6  0E01               	movlw	1
  8429  0112D8  6F85               	movwf	(_mouseReport+3)& (0+255),b
  8430                           
  8431                           ;keys.c: 547:     break;
  8432  0112DA  0012               	return	
  8433  0112DC                     l1124:
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;keys.c: 549:     mouseReport.W = -1;
  8437  0112DC  6985               	setf	(_mouseReport+3)& (0+255),b
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;keys.c: 551:    }
  8441                           
  8442                           ;keys.c: 550:     break;
  8443  0112DE  0012               	return	
  8444  0112E0                     l1105:
  8445                           
  8446                           ; BSR set to: 0
  8447                           
  8448                           ; BSR set to: 0
  8449  0112E0  C0DE  F0D7         	movff	setXY@kc,??_setXY
  8450  0112E4  C0DF  F0D8         	movff	setXY@kc+1,??_setXY+1
  8451                           
  8452                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8453                           ; Switch size 1, requested type "space"
  8454                           ; Number of cases is 1, Range of values is 64 to 64
  8455                           ; switch strategies available:
  8456                           ; Name         Instructions Cycles
  8457                           ; simple_byte            4     3 (average)
  8458                           ;	Chosen strategy is simple_byte
  8459  0112E8  51D8               	movf	(??_setXY+1)& (0+255),w,b
  8460  0112EA  0A40               	xorlw	64	; case 64
  8461  0112EC  A4D8               	btfss	status,2,c
  8462  0112EE  0012               	return	
  8463                           
  8464                           ; BSR set to: 0
  8465                           ; Switch size 1, requested type "space"
  8466                           ; Number of cases is 18, Range of values is 0 to 241
  8467                           ; switch strategies available:
  8468                           ; Name         Instructions Cycles
  8469                           ; simple_byte           55    28 (average)
  8470                           ;	Chosen strategy is simple_byte
  8471  0112F0  51D7               	movf	??_setXY& (0+255),w,b
  8472  0112F2  0A00               	xorlw	0	; case 0
  8473  0112F4  B4D8               	btfsc	status,2,c
  8474  0112F6  D787               	goto	l1106
  8475  0112F8  0A01               	xorlw	1	; case 1
  8476  0112FA  B4D8               	btfsc	status,2,c
  8477  0112FC  D788               	goto	l1108
  8478  0112FE  0A03               	xorlw	3	; case 2
  8479  011300  B4D8               	btfsc	status,2,c
  8480  011302  D788               	goto	l1109
  8481  011304  0A01               	xorlw	1	; case 3
  8482  011306  B4D8               	btfsc	status,2,c
  8483  011308  D789               	goto	l1110
  8484  01130A  0A07               	xorlw	7	; case 4
  8485  01130C  B4D8               	btfsc	status,2,c
  8486  01130E  D78A               	goto	l1111
  8487  011310  0A01               	xorlw	1	; case 5
  8488  011312  B4D8               	btfsc	status,2,c
  8489  011314  D78C               	goto	l1112
  8490  011316  0A03               	xorlw	3	; case 6
  8491  011318  B4D8               	btfsc	status,2,c
  8492  01131A  D78E               	goto	l1113
  8493  01131C  0A01               	xorlw	1	; case 7
  8494  01131E  B4D8               	btfsc	status,2,c
  8495  011320  D790               	goto	l1114
  8496  011322  0A17               	xorlw	23	; case 16
  8497  011324  B4D8               	btfsc	status,2,c
  8498  011326  D791               	goto	l1115
  8499  011328  0A01               	xorlw	1	; case 17
  8500  01132A  B4D8               	btfsc	status,2,c
  8501  01132C  D796               	goto	l1116
  8502  01132E  0A03               	xorlw	3	; case 18
  8503  011330  B4D8               	btfsc	status,2,c
  8504  011332  D79E               	goto	l1117
  8505  011334  0A01               	xorlw	1	; case 19
  8506  011336  B4D8               	btfsc	status,2,c
  8507  011338  D7A3               	goto	l1118
  8508  01133A  0A07               	xorlw	7	; case 20
  8509  01133C  B4D8               	btfsc	status,2,c
  8510  01133E  D7AA               	goto	l1119
  8511  011340  0A01               	xorlw	1	; case 21
  8512  011342  B4D8               	btfsc	status,2,c
  8513  011344  D7AE               	goto	l1120
  8514  011346  0A03               	xorlw	3	; case 22
  8515  011348  B4D8               	btfsc	status,2,c
  8516  01134A  D7B4               	goto	l1121
  8517  01134C  0A01               	xorlw	1	; case 23
  8518  01134E  B4D8               	btfsc	status,2,c
  8519  011350  D7B8               	goto	l1122
  8520  011352  0AE7               	xorlw	231	; case 240
  8521  011354  B4D8               	btfsc	status,2,c
  8522  011356  D7BF               	goto	l1123
  8523  011358  0A01               	xorlw	1	; case 241
  8524  01135A  A4D8               	btfss	status,2,c
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;keys.c: 552:    return;
  8528  01135C  0012               	return	
  8529  01135E  D7BE               	goto	l1124
  8530  011360                     l1104:
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;keys.c: 554:   c = mSw[c].pre;
  8534                           
  8535                           ; BSR set to: 0
  8536  011360  51E0               	movf	setXY@c& (0+255),w,b
  8537  011362  0D07               	mullw	7
  8538  011364  0E03               	movlw	3
  8539  011366  26F3               	addwf	prodl,f,c
  8540  011368  0E00               	movlw	0
  8541  01136A  22F4               	addwfc	prodh,f,c
  8542  01136C  0E8D               	movlw	low _mSw
  8543  01136E  24F3               	addwf	prodl,w,c
  8544  011370  6ED9               	movwf	fsr2l,c
  8545  011372  0E00               	movlw	high _mSw
  8546  011374  20F4               	addwfc	prodh,w,c
  8547  011376  6EDA               	movwf	fsr2h,c
  8548  011378  50DF               	movf	indf2,w,c
  8549  01137A  6FE0               	movwf	setXY@c& (0+255),b
  8550  01137C                     l1102:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;keys.c: 477:  while (c != 0xff) {
  8554                           
  8555                           ; BSR set to: 0
  8556  01137C  29E0               	incf	setXY@c& (0+255),w,b
  8557  01137E  B4D8               	btfsc	status,2,c
  8558  011380  0012               	return	
  8559  011382  D6F4               	goto	l1103
  8560  011384                     __end_of_setXY:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           wreg	equ	0xFE8
  8571                           indf1	equ	0xFE7
  8572                           postdec1	equ	0xFE5
  8573                           fsr1h	equ	0xFE2
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _setSleepDelay *****************
  8583 ;; Defined at:
  8584 ;;		line 400 in file "user.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  second          2   12[BANK0 ] unsigned short 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  t               4   15[BANK0 ] unsigned long 
  8589 ;;  gie             1   14[BANK0 ] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  1    wreg      void 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8599 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8600 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8602 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8603 ;;Total ram usage:        7 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:    6
  8606 ;; This function calls:
  8607 ;;		___lmul
  8608 ;; This function is called by:
  8609 ;;		_main
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text17
  8614  012234                     __ptext17:
  8615                           	opt stack 0
  8616  012234                     _setSleepDelay:
  8617                           	opt stack 24
  8618                           
  8619                           ;user.c: 400: void setSleepDelay(unsigned short second);user.c: 401: {;user.c: 402:  uns
      +                          igned long t = (unsigned long) second * 1953;
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;incstack = 0
  8623  012234  C0E3  F0D7         	movff	setSleepDelay@second,___lmul@multiplier
  8624  012238  C0E4  F0D8         	movff	setSleepDelay@second+1,___lmul@multiplier+1
  8625  01223C  0100               	movlb	0	; () banked
  8626  01223E  6BD9               	clrf	(___lmul@multiplier+2)& (0+255),b
  8627  012240  6BDA               	clrf	(___lmul@multiplier+3)& (0+255),b
  8628  012242  0EA1               	movlw	161
  8629  012244  6FDB               	movwf	___lmul@multiplicand& (0+255),b
  8630  012246  0E07               	movlw	7
  8631  012248  6FDC               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8632  01224A  0E00               	movlw	0
  8633  01224C  6FDD               	movwf	(___lmul@multiplicand+2)& (0+255),b
  8634  01224E  0E00               	movlw	0
  8635  012250  6FDE               	movwf	(___lmul@multiplicand+3)& (0+255),b
  8636  012252  EC10  F092         	call	___lmul	;wreg free
  8637  012256  C0D7  F0E6         	movff	?___lmul,setSleepDelay@t
  8638  01225A  C0D8  F0E7         	movff	?___lmul+1,setSleepDelay@t+1
  8639  01225E  C0D9  F0E8         	movff	?___lmul+2,setSleepDelay@t+2
  8640  012262  C0DA  F0E9         	movff	?___lmul+3,setSleepDelay@t+3
  8641                           
  8642                           ;user.c: 403:  unsigned char gie = INTCONbits.GIE ;
  8643  012266  0E00               	movlw	0
  8644  012268  BEF2               	btfsc	intcon,7,c	;volatile
  8645  01226A  0E01               	movlw	1
  8646  01226C  0100               	movlb	0	; () banked
  8647  01226E  6FE5               	movwf	setSleepDelay@gie& (0+255),b
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;user.c: 405:  INTCONbits.GIE = 0;
  8651  012270  9EF2               	bcf	intcon,7,c	;volatile
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;user.c: 406:  if (sleepCountDown < t)
  8655  012272  51E6               	movf	setSleepDelay@t& (0+255),w,b
  8656  012274  5C24               	subwf	_sleepCountDown,w,c
  8657  012276  51E7               	movf	(setSleepDelay@t+1)& (0+255),w,b
  8658  012278  5825               	subwfb	_sleepCountDown+1,w,c
  8659  01227A  51E8               	movf	(setSleepDelay@t+2)& (0+255),w,b
  8660  01227C  5826               	subwfb	_sleepCountDown+2,w,c
  8661  01227E  51E9               	movf	(setSleepDelay@t+3)& (0+255),w,b
  8662  012280  5827               	subwfb	_sleepCountDown+3,w,c
  8663  012282  B0D8               	btfsc	status,0,c
  8664  012284  D008               	goto	l558
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;user.c: 407:  {;user.c: 408:   sleepCountDown = t;
  8668  012286  C0E6  F024         	movff	setSleepDelay@t,_sleepCountDown
  8669  01228A  C0E7  F025         	movff	setSleepDelay@t+1,_sleepCountDown+1
  8670  01228E  C0E8  F026         	movff	setSleepDelay@t+2,_sleepCountDown+2
  8671  012292  C0E9  F027         	movff	setSleepDelay@t+3,_sleepCountDown+3
  8672  012296                     l558:
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;user.c: 410:  INTCONbits.GIE = gie;
  8676  012296  B1E5               	btfsc	setSleepDelay@gie& (0+255),0,b
  8677  012298  D002               	bra	u6325
  8678  01229A  9EF2               	bcf	intcon,7,c	;volatile
  8679  01229C  D001               	bra	u6326
  8680  01229E                     u6325:
  8681  01229E  8EF2               	bsf	intcon,7,c	;volatile
  8682  0122A0                     u6326:
  8683  0122A0  0012               	return		;funcret
  8684  0122A2                     __end_of_setSleepDelay:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           postinc0	equ	0xFEE
  8694                           wreg	equ	0xFE8
  8695                           indf1	equ	0xFE7
  8696                           postdec1	equ	0xFE5
  8697                           fsr1h	equ	0xFE2
  8698                           fsr1l	equ	0xFE1
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           postdec2	equ	0xFDD
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706 ;; *************** function ___lmul *****************
  8707 ;; Defined at:
  8708 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  multiplier      4    0[BANK0 ] unsigned long 
  8711 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  product         4    8[BANK0 ] unsigned long 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  4    0[BANK0 ] unsigned long 
  8716 ;; Registers used:
  8717 ;;		wreg, status,2, status,0
  8718 ;; Tracked objects:
  8719 ;;		On entry : 0/0
  8720 ;;		On exit  : 0/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8723 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8724 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8726 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8727 ;;Total ram usage:       12 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    5
  8730 ;; This function calls:
  8731 ;;		Nothing
  8732 ;; This function is called by:
  8733 ;;		_setSleepDelay
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text18
  8738  012420                     __ptext18:
  8739                           	opt stack 0
  8740  012420                     ___lmul:
  8741                           	opt stack 24
  8742                           
  8743                           ;incstack = 0
  8744  012420  0E00               	movlw	0
  8745  012422  0100               	movlb	0	; () banked
  8746  012424  6FDF               	movwf	___lmul@product& (0+255),b
  8747  012426  0E00               	movlw	0
  8748  012428  6FE0               	movwf	(___lmul@product+1)& (0+255),b
  8749  01242A  0E00               	movlw	0
  8750  01242C  6FE1               	movwf	(___lmul@product+2)& (0+255),b
  8751  01242E  0E00               	movlw	0
  8752  012430  6FE2               	movwf	(___lmul@product+3)& (0+255),b
  8753  012432                     
  8754                           ; BSR set to: 0
  8755                           
  8756                           ; BSR set to: 0
  8757  012432  A1D7               	btfss	___lmul@multiplier& (0+255),0,b
  8758  012434  D008               	goto	l1158
  8759                           
  8760                           ; BSR set to: 0
  8761  012436  51DB               	movf	___lmul@multiplicand& (0+255),w,b
  8762  012438  27DF               	addwf	___lmul@product& (0+255),f,b
  8763  01243A  51DC               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  8764  01243C  23E0               	addwfc	(___lmul@product+1)& (0+255),f,b
  8765  01243E  51DD               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  8766  012440  23E1               	addwfc	(___lmul@product+2)& (0+255),f,b
  8767  012442  51DE               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  8768  012444  23E2               	addwfc	(___lmul@product+3)& (0+255),f,b
  8769  012446                     l1158:
  8770                           
  8771                           ; BSR set to: 0
  8772                           
  8773                           ; BSR set to: 0
  8774  012446  90D8               	bcf	status,0,c
  8775  012448  37DB               	rlcf	___lmul@multiplicand& (0+255),f,b
  8776  01244A  37DC               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  8777  01244C  37DD               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  8778  01244E  37DE               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  8779                           
  8780                           ; BSR set to: 0
  8781  012450  90D8               	bcf	status,0,c
  8782  012452  33DA               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  8783  012454  33D9               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  8784  012456  33D8               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  8785  012458  33D7               	rrcf	___lmul@multiplier& (0+255),f,b
  8786  01245A  51D7               	movf	___lmul@multiplier& (0+255),w,b
  8787  01245C  11D8               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  8788  01245E  11D9               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  8789  012460  11DA               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  8790  012462  A4D8               	btfss	status,2,c
  8791  012464  D7E6               	goto	l1157
  8792                           
  8793                           ; BSR set to: 0
  8794  012466  C0DF  F0D7         	movff	___lmul@product,?___lmul
  8795  01246A  C0E0  F0D8         	movff	___lmul@product+1,?___lmul+1
  8796  01246E  C0E1  F0D9         	movff	___lmul@product+2,?___lmul+2
  8797  012472  C0E2  F0DA         	movff	___lmul@product+3,?___lmul+3
  8798                           
  8799                           ; BSR set to: 0
  8800  012476  0012               	return		;funcret
  8801  012478                     __end_of___lmul:
  8802                           	opt stack 0
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           indf1	equ	0xFE7
  8813                           postdec1	equ	0xFE5
  8814                           fsr1h	equ	0xFE2
  8815                           fsr1l	equ	0xFE1
  8816                           indf2	equ	0xFDF
  8817                           postinc2	equ	0xFDE
  8818                           postdec2	equ	0xFDD
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function _setScanCodes *****************
  8824 ;; Defined at:
  8825 ;;		line 432 in file "keys.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;		None
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  e               1    1[BANK0 ] unsigned char 
  8830 ;;  kc              2    2[BANK0 ] unsigned short 
  8831 ;;  d               1    5[BANK0 ] unsigned char 
  8832 ;;  c               1    4[BANK0 ] unsigned char 
  8833 ;; Return value:  Size  Location     Type
  8834 ;;                  1    wreg      void 
  8835 ;; Registers used:
  8836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8845 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8846 ;;Total ram usage:        6 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    5
  8849 ;; This function calls:
  8850 ;;		Nothing
  8851 ;; This function is called by:
  8852 ;;		_main
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text19
  8857  011BB6                     __ptext19:
  8858                           	opt stack 0
  8859  011BB6                     _setScanCodes:
  8860                           	opt stack 25
  8861                           
  8862                           ;keys.c: 434:  unsigned char c = firstPush;
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;incstack = 0
  8866  011BB6  C046  F0DB         	movff	_firstPush,setScanCodes@c
  8867                           
  8868                           ;keys.c: 435:  unsigned char d = 0;
  8869  011BBA  0E00               	movlw	0
  8870  011BBC  0100               	movlb	0	; () banked
  8871  011BBE  6FDC               	movwf	setScanCodes@d& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;keys.c: 437:  keyReport.modifier2delay.byte = keyReport.modifier2.byte;
  8875  011BC0  C07A  F07B         	movff	_keyReport+2,_keyReport+3
  8876                           
  8877                           ;keys.c: 438:  keyReport.modifier2.byte = 0;
  8878  011BC4  0E00               	movlw	0
  8879  011BC6  6F7A               	movwf	(_keyReport+2)& (0+255),b
  8880                           
  8881                           ;keys.c: 440:  while (c != 0xff) {
  8882  011BC8  D056               	goto	l1086
  8883  011BCA                     
  8884                           ; BSR set to: 0
  8885                           ;keys.c: 441:   if (mSw[c].state) {
  8886                           
  8887                           ; BSR set to: 0
  8888  011BCA  51DB               	movf	setScanCodes@c& (0+255),w,b
  8889  011BCC  0D07               	mullw	7
  8890  011BCE  0E01               	movlw	1
  8891  011BD0  26F3               	addwf	prodl,f,c
  8892  011BD2  0E00               	movlw	0
  8893  011BD4  22F4               	addwfc	prodh,f,c
  8894  011BD6  0E8D               	movlw	low _mSw
  8895  011BD8  24F3               	addwf	prodl,w,c
  8896  011BDA  6ED9               	movwf	fsr2l,c
  8897  011BDC  0E00               	movlw	high _mSw
  8898  011BDE  20F4               	addwfc	prodh,w,c
  8899  011BE0  6EDA               	movwf	fsr2h,c
  8900  011BE2  50DF               	movf	indf2,w,c
  8901  011BE4  B4D8               	btfsc	status,2,c
  8902  011BE6  D039               	goto	l1090
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;keys.c: 442:    unsigned short kc = mSw[c].kc;
  8906  011BE8  51DB               	movf	setScanCodes@c& (0+255),w,b
  8907  011BEA  0D07               	mullw	7
  8908  011BEC  0E05               	movlw	5
  8909  011BEE  26F3               	addwf	prodl,f,c
  8910  011BF0  0E00               	movlw	0
  8911  011BF2  22F4               	addwfc	prodh,f,c
  8912  011BF4  0E8D               	movlw	low _mSw
  8913  011BF6  24F3               	addwf	prodl,w,c
  8914  011BF8  6ED9               	movwf	fsr2l,c
  8915  011BFA  0E00               	movlw	high _mSw
  8916  011BFC  20F4               	addwfc	prodh,w,c
  8917  011BFE  6EDA               	movwf	fsr2h,c
  8918  011C00  CFDE F0D9          	movff	postinc2,setScanCodes@kc
  8919  011C04  CFDD F0DA          	movff	postdec2,setScanCodes@kc+1
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;keys.c: 444:    if ((kc & 0xf000) == 0x0000) {
  8923  011C08  0EF0               	movlw	240
  8924  011C0A  15DA               	andwf	(setScanCodes@kc+1)& (0+255),w,b
  8925  011C0C  A4D8               	btfss	status,2,c
  8926  011C0E  D025               	goto	l1090
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;keys.c: 445:     if (d < 6) {
  8930  011C10  0E06               	movlw	6
  8931  011C12  61DC               	cpfslt	setScanCodes@d& (0+255),b
  8932  011C14  D022               	goto	l1090
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;keys.c: 446:      for (unsigned char e = 0; e < d; e++) {
  8936  011C16  0E00               	movlw	0
  8937  011C18  6FD8               	movwf	setScanCodes@e& (0+255),b
  8938  011C1A  D00D               	goto	l1091
  8939  011C1C                     
  8940                           ; BSR set to: 0
  8941                           ;keys.c: 447:       if (keyReport.scanCodes[e] == (unsigned char) kc) {
  8942                           
  8943                           ; BSR set to: 0
  8944  011C1C  51D8               	movf	setScanCodes@e& (0+255),w,b
  8945  011C1E  0D01               	mullw	1
  8946  011C20  0E7C               	movlw	low (_keyReport+4)
  8947  011C22  24F3               	addwf	prodl,w,c
  8948  011C24  6ED9               	movwf	fsr2l,c
  8949  011C26  0E00               	movlw	high (_keyReport+4)
  8950  011C28  20F4               	addwfc	prodh,w,c
  8951  011C2A  6EDA               	movwf	fsr2h,c
  8952  011C2C  51D9               	movf	setScanCodes@kc& (0+255),w,b
  8953  011C2E  18DE               	xorwf	postinc2,w,c
  8954  011C30  B4D8               	btfsc	status,2,c
  8955  011C32  D013               	goto	l1090
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;keys.c: 452:      }
  8959                           
  8960                           ; BSR set to: 0
  8961                           
  8962                           ;keys.c: 451:       }
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;keys.c: 450:        goto cancel;
  8966  011C34  2BD8               	incf	setScanCodes@e& (0+255),f,b
  8967  011C36                     l1091:
  8968                           
  8969                           ; BSR set to: 0
  8970                           
  8971                           ; BSR set to: 0
  8972  011C36  51DC               	movf	setScanCodes@d& (0+255),w,b
  8973  011C38  5DD8               	subwf	setScanCodes@e& (0+255),w,b
  8974  011C3A  A0D8               	btfss	status,0,c
  8975  011C3C  D7EF               	goto	l1092
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;keys.c: 454:      keyReport.modifier2.byte |= (kc >> 8) & 0x0f;
  8979                           
  8980                           ; BSR set to: 0
  8981  011C3E  51DA               	movf	(setScanCodes@kc+1)& (0+255),w,b
  8982  011C40  0B0F               	andlw	15
  8983  011C42  137A               	iorwf	(_keyReport+2)& (0+255),f,b
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;keys.c: 455:      keyReport.scanCodes[d++] = kc;
  8987  011C44  51DC               	movf	setScanCodes@d& (0+255),w,b
  8988  011C46  0D01               	mullw	1
  8989  011C48  0E7C               	movlw	low (_keyReport+4)
  8990  011C4A  24F3               	addwf	prodl,w,c
  8991  011C4C  6ED9               	movwf	fsr2l,c
  8992  011C4E  0E00               	movlw	high (_keyReport+4)
  8993  011C50  20F4               	addwfc	prodh,w,c
  8994  011C52  6EDA               	movwf	fsr2h,c
  8995  011C54  C0D9  FFDF         	movff	setScanCodes@kc,indf2
  8996                           
  8997                           ; BSR set to: 0
  8998  011C58  2BDC               	incf	setScanCodes@d& (0+255),f,b
  8999  011C5A                     l1090:
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;keys.c: 460:   c = mSw[c].next;
  9003                           
  9004                           ; BSR set to: 0
  9005                           
  9006                           ;keys.c: 459:  cancel:
  9007                           
  9008                           ; BSR set to: 0
  9009                           
  9010                           ;keys.c: 458:   }
  9011                           
  9012                           ; BSR set to: 0
  9013                           
  9014                           ;keys.c: 457:    }
  9015                           
  9016                           ; BSR set to: 0
  9017  011C5A  51DB               	movf	setScanCodes@c& (0+255),w,b
  9018  011C5C  0D07               	mullw	7
  9019  011C5E  0E04               	movlw	4
  9020  011C60  26F3               	addwf	prodl,f,c
  9021  011C62  0E00               	movlw	0
  9022  011C64  22F4               	addwfc	prodh,f,c
  9023  011C66  0E8D               	movlw	low _mSw
  9024  011C68  24F3               	addwf	prodl,w,c
  9025  011C6A  6ED9               	movwf	fsr2l,c
  9026  011C6C  0E00               	movlw	high _mSw
  9027  011C6E  20F4               	addwfc	prodh,w,c
  9028  011C70  6EDA               	movwf	fsr2h,c
  9029  011C72  50DF               	movf	indf2,w,c
  9030  011C74  6FDB               	movwf	setScanCodes@c& (0+255),b
  9031  011C76                     l1086:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;keys.c: 440:  while (c != 0xff) {
  9035                           
  9036                           ; BSR set to: 0
  9037  011C76  29DB               	incf	setScanCodes@c& (0+255),w,b
  9038  011C78  A4D8               	btfss	status,2,c
  9039  011C7A  D7A7               	goto	l1087
  9040  011C7C                     u6690:
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;keys.c: 464:  for (; d < 6; d++) {
  9044                           
  9045                           ; BSR set to: 0
  9046  011C7C  0E05               	movlw	5
  9047  011C7E  65DC               	cpfsgt	setScanCodes@d& (0+255),b
  9048  011C80  D001               	goto	l1097
  9049  011C82  0012               	return	
  9050  011C84                     l1097:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;keys.c: 465:   keyReport.scanCodes[d] = 0;
  9054                           
  9055                           ; BSR set to: 0
  9056  011C84  51DC               	movf	setScanCodes@d& (0+255),w,b
  9057  011C86  0D01               	mullw	1
  9058  011C88  0E7C               	movlw	low (_keyReport+4)
  9059  011C8A  24F3               	addwf	prodl,w,c
  9060  011C8C  6ED9               	movwf	fsr2l,c
  9061  011C8E  0E00               	movlw	high (_keyReport+4)
  9062  011C90  20F4               	addwfc	prodh,w,c
  9063  011C92  6EDA               	movwf	fsr2h,c
  9064  011C94  0E00               	movlw	0
  9065  011C96  6EDF               	movwf	indf2,c
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;keys.c: 466:  }
  9069  011C98  2BDC               	incf	setScanCodes@d& (0+255),f,b
  9070  011C9A  D7F0               	goto	u6690
  9071  011C9C                     __end_of_setScanCodes:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           postinc0	equ	0xFEE
  9081                           wreg	equ	0xFE8
  9082                           indf1	equ	0xFE7
  9083                           postdec1	equ	0xFE5
  9084                           fsr1h	equ	0xFE2
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           fsr2h	equ	0xFDA
  9090                           fsr2l	equ	0xFD9
  9091                           status	equ	0xFD8
  9092                           
  9093 ;; *************** function _sendToggle *****************
  9094 ;; Defined at:
  9095 ;;		line 154 in file "RN42.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;		None
  9098 ;; Auto vars:     Size  Location     Type
  9099 ;;		None
  9100 ;; Return value:  Size  Location     Type
  9101 ;;                  1    wreg      void 
  9102 ;; Registers used:
  9103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9104 ;; Tracked objects:
  9105 ;;		On entry : 0/0
  9106 ;;		On exit  : 0/0
  9107 ;;		Unchanged: 0/0
  9108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9113 ;;Total ram usage:        0 bytes
  9114 ;; Hardware stack levels used:    1
  9115 ;; Hardware stack levels required when called:    7
  9116 ;; This function calls:
  9117 ;;		_bufWrite
  9118 ;;		_waitOutputReport
  9119 ;; This function is called by:
  9120 ;;		_main
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           	psect	text20
  9125  0128CC                     __ptext20:
  9126                           	opt stack 0
  9127  0128CC                     _sendToggle:
  9128                           	opt stack 23
  9129                           
  9130                           ;RN42.c: 156:  if (BtConnected)
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;incstack = 0
  9134  0128CC  0100               	movlb	0	; () banked
  9135  0128CE  5188               	movf	_BtConnected& (0+255),w,b
  9136  0128D0  B4D8               	btfsc	status,2,c
  9137  0128D2  0012               	return	
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;RN42.c: 157:  {;RN42.c: 158:   bufWrite(&bufU2_main, 0x7f);
  9141  0128D4  0E3D               	movlw	low _bufU2_main
  9142  0128D6  6FE3               	movwf	bufWrite@b& (0+255),b
  9143  0128D8  0E00               	movlw	high _bufU2_main
  9144  0128DA  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9145  0128DC  0E7F               	movlw	127
  9146  0128DE  6FE5               	movwf	bufWrite@d& (0+255),b
  9147  0128E0  EC84  F091         	call	_bufWrite	;wreg free
  9148                           
  9149                           ;RN42.c: 159:   waitOutputReport();
  9150  0128E4  EC1E  F093         	call	_waitOutputReport	;wreg free
  9151  0128E8  0012               	return	
  9152  0128EA                     __end_of_sendToggle:
  9153                           	opt stack 0
  9154                           tblptru	equ	0xFF8
  9155                           tblptrh	equ	0xFF7
  9156                           tblptrl	equ	0xFF6
  9157                           tablat	equ	0xFF5
  9158                           prodh	equ	0xFF4
  9159                           prodl	equ	0xFF3
  9160                           intcon	equ	0xFF2
  9161                           postinc0	equ	0xFEE
  9162                           wreg	equ	0xFE8
  9163                           indf1	equ	0xFE7
  9164                           postdec1	equ	0xFE5
  9165                           fsr1h	equ	0xFE2
  9166                           fsr1l	equ	0xFE1
  9167                           indf2	equ	0xFDF
  9168                           postinc2	equ	0xFDE
  9169                           postdec2	equ	0xFDD
  9170                           fsr2h	equ	0xFDA
  9171                           fsr2l	equ	0xFD9
  9172                           status	equ	0xFD8
  9173                           
  9174 ;; *************** function _sendMouse *****************
  9175 ;; Defined at:
  9176 ;;		line 120 in file "RN42.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;		None
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;		None
  9181 ;; Return value:  Size  Location     Type
  9182 ;;                  1    wreg      void 
  9183 ;; Registers used:
  9184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9185 ;; Tracked objects:
  9186 ;;		On entry : 0/0
  9187 ;;		On exit  : 0/0
  9188 ;;		Unchanged: 0/0
  9189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9194 ;;Total ram usage:        0 bytes
  9195 ;; Hardware stack levels used:    1
  9196 ;; Hardware stack levels required when called:    7
  9197 ;; This function calls:
  9198 ;;		_bufWrite
  9199 ;;		_waitOutputReport
  9200 ;; This function is called by:
  9201 ;;		_main
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text21
  9206  011F5C                     __ptext21:
  9207                           	opt stack 0
  9208  011F5C                     _sendMouse:
  9209                           	opt stack 23
  9210                           
  9211                           ;RN42.c: 122:  if (BtConnected)
  9212                           
  9213                           ;incstack = 0
  9214  011F5C  0100               	movlb	0	; () banked
  9215  011F5E  5188               	movf	_BtConnected& (0+255),w,b
  9216  011F60  B4D8               	btfsc	status,2,c
  9217  011F62  0012               	return	
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;RN42.c: 123:  {;RN42.c: 124:   bufWrite(&bufU2_main, 0xfd);
  9221  011F64  0E3D               	movlw	low _bufU2_main
  9222  011F66  6FE3               	movwf	bufWrite@b& (0+255),b
  9223  011F68  0E00               	movlw	high _bufU2_main
  9224  011F6A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9225  011F6C  0EFD               	movlw	253
  9226  011F6E  6FE5               	movwf	bufWrite@d& (0+255),b
  9227  011F70  EC84  F091         	call	_bufWrite	;wreg free
  9228                           
  9229                           ;RN42.c: 125:   bufWrite(&bufU2_main, 0x05);
  9230  011F74  0E3D               	movlw	low _bufU2_main
  9231  011F76  0100               	movlb	0	; () banked
  9232  011F78  6FE3               	movwf	bufWrite@b& (0+255),b
  9233  011F7A  0E00               	movlw	high _bufU2_main
  9234  011F7C  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9235  011F7E  0E05               	movlw	5
  9236  011F80  6FE5               	movwf	bufWrite@d& (0+255),b
  9237  011F82  EC84  F091         	call	_bufWrite	;wreg free
  9238                           
  9239                           ;RN42.c: 126:   bufWrite(&bufU2_main, 0x02);
  9240  011F86  0E3D               	movlw	low _bufU2_main
  9241  011F88  0100               	movlb	0	; () banked
  9242  011F8A  6FE3               	movwf	bufWrite@b& (0+255),b
  9243  011F8C  0E00               	movlw	high _bufU2_main
  9244  011F8E  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9245  011F90  0E02               	movlw	2
  9246  011F92  6FE5               	movwf	bufWrite@d& (0+255),b
  9247  011F94  EC84  F091         	call	_bufWrite	;wreg free
  9248                           
  9249                           ;RN42.c: 127:   bufWrite(&bufU2_main, mouseReport.mouseButton.byte);
  9250  011F98  0E3D               	movlw	low _bufU2_main
  9251  011F9A  0100               	movlb	0	; () banked
  9252  011F9C  6FE3               	movwf	bufWrite@b& (0+255),b
  9253  011F9E  0E00               	movlw	high _bufU2_main
  9254  011FA0  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9255  011FA2  C082  F0E5         	movff	_mouseReport,bufWrite@d
  9256  011FA6  EC84  F091         	call	_bufWrite	;wreg free
  9257                           
  9258                           ;RN42.c: 128:   bufWrite(&bufU2_main, mouseReport.X);
  9259  011FAA  0E3D               	movlw	low _bufU2_main
  9260  011FAC  0100               	movlb	0	; () banked
  9261  011FAE  6FE3               	movwf	bufWrite@b& (0+255),b
  9262  011FB0  0E00               	movlw	high _bufU2_main
  9263  011FB2  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9264  011FB4  C083  F0E5         	movff	_mouseReport+1,bufWrite@d
  9265  011FB8  EC84  F091         	call	_bufWrite	;wreg free
  9266                           
  9267                           ;RN42.c: 129:   bufWrite(&bufU2_main, mouseReport.Y);
  9268  011FBC  0E3D               	movlw	low _bufU2_main
  9269  011FBE  0100               	movlb	0	; () banked
  9270  011FC0  6FE3               	movwf	bufWrite@b& (0+255),b
  9271  011FC2  0E00               	movlw	high _bufU2_main
  9272  011FC4  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9273  011FC6  C084  F0E5         	movff	_mouseReport+2,bufWrite@d
  9274  011FCA  EC84  F091         	call	_bufWrite	;wreg free
  9275                           
  9276                           ;RN42.c: 130:   bufWrite(&bufU2_main, mouseReport.W);
  9277  011FCE  0E3D               	movlw	low _bufU2_main
  9278  011FD0  0100               	movlb	0	; () banked
  9279  011FD2  6FE3               	movwf	bufWrite@b& (0+255),b
  9280  011FD4  0E00               	movlw	high _bufU2_main
  9281  011FD6  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9282  011FD8  C085  F0E5         	movff	_mouseReport+3,bufWrite@d
  9283  011FDC  EC84  F091         	call	_bufWrite	;wreg free
  9284                           
  9285                           ;RN42.c: 131:   waitOutputReport();
  9286  011FE0  EC1E  F093         	call	_waitOutputReport	;wreg free
  9287  011FE4  0012               	return	
  9288  011FE6                     __end_of_sendMouse:
  9289                           	opt stack 0
  9290                           tblptru	equ	0xFF8
  9291                           tblptrh	equ	0xFF7
  9292                           tblptrl	equ	0xFF6
  9293                           tablat	equ	0xFF5
  9294                           prodh	equ	0xFF4
  9295                           prodl	equ	0xFF3
  9296                           intcon	equ	0xFF2
  9297                           postinc0	equ	0xFEE
  9298                           wreg	equ	0xFE8
  9299                           indf1	equ	0xFE7
  9300                           postdec1	equ	0xFE5
  9301                           fsr1h	equ	0xFE2
  9302                           fsr1l	equ	0xFE1
  9303                           indf2	equ	0xFDF
  9304                           postinc2	equ	0xFDE
  9305                           postdec2	equ	0xFDD
  9306                           fsr2h	equ	0xFDA
  9307                           fsr2l	equ	0xFD9
  9308                           status	equ	0xFD8
  9309                           
  9310 ;; *************** function _sendKey *****************
  9311 ;; Defined at:
  9312 ;;		line 135 in file "RN42.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;		None
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;		None
  9317 ;; Return value:  Size  Location     Type
  9318 ;;                  1    wreg      void 
  9319 ;; Registers used:
  9320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9321 ;; Tracked objects:
  9322 ;;		On entry : 0/0
  9323 ;;		On exit  : 0/0
  9324 ;;		Unchanged: 0/0
  9325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9330 ;;Total ram usage:        0 bytes
  9331 ;; Hardware stack levels used:    1
  9332 ;; Hardware stack levels required when called:    7
  9333 ;; This function calls:
  9334 ;;		_bufWrite
  9335 ;;		_waitOutputReport
  9336 ;; This function is called by:
  9337 ;;		_main
  9338 ;; This function uses a non-reentrant model
  9339 ;;
  9340                           
  9341                           	psect	text22
  9342  011C9C                     __ptext22:
  9343                           	opt stack 0
  9344  011C9C                     _sendKey:
  9345                           	opt stack 23
  9346                           
  9347                           ;RN42.c: 137:  if (BtConnected)
  9348                           
  9349                           ;incstack = 0
  9350  011C9C  0100               	movlb	0	; () banked
  9351  011C9E  5188               	movf	_BtConnected& (0+255),w,b
  9352  011CA0  B4D8               	btfsc	status,2,c
  9353  011CA2  0012               	return	
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;RN42.c: 138:  {;RN42.c: 139:   bufWrite(&bufU2_main, 0xfd);
  9357  011CA4  0E3D               	movlw	low _bufU2_main
  9358  011CA6  6FE3               	movwf	bufWrite@b& (0+255),b
  9359  011CA8  0E00               	movlw	high _bufU2_main
  9360  011CAA  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9361  011CAC  0EFD               	movlw	253
  9362  011CAE  6FE5               	movwf	bufWrite@d& (0+255),b
  9363  011CB0  EC84  F091         	call	_bufWrite	;wreg free
  9364                           
  9365                           ;RN42.c: 140:   bufWrite(&bufU2_main, 0x09);
  9366  011CB4  0E3D               	movlw	low _bufU2_main
  9367  011CB6  0100               	movlb	0	; () banked
  9368  011CB8  6FE3               	movwf	bufWrite@b& (0+255),b
  9369  011CBA  0E00               	movlw	high _bufU2_main
  9370  011CBC  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9371  011CBE  0E09               	movlw	9
  9372  011CC0  6FE5               	movwf	bufWrite@d& (0+255),b
  9373  011CC2  EC84  F091         	call	_bufWrite	;wreg free
  9374                           
  9375                           ;RN42.c: 141:   bufWrite(&bufU2_main, 0x01);
  9376  011CC6  0E3D               	movlw	low _bufU2_main
  9377  011CC8  0100               	movlb	0	; () banked
  9378  011CCA  6FE3               	movwf	bufWrite@b& (0+255),b
  9379  011CCC  0E00               	movlw	high _bufU2_main
  9380  011CCE  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9381  011CD0  0E01               	movlw	1
  9382  011CD2  6FE5               	movwf	bufWrite@d& (0+255),b
  9383  011CD4  EC84  F091         	call	_bufWrite	;wreg free
  9384                           
  9385                           ;RN42.c: 142:   bufWrite(&bufU2_main, keyReport.modifier.byte | keyReport.modifier2.byte
      +                           | keyReport.modifier2delay.byte | keyReport.modifierLatch.byte);
  9386  011CD8  0E3D               	movlw	low _bufU2_main
  9387  011CDA  0100               	movlb	0	; () banked
  9388  011CDC  6FE3               	movwf	bufWrite@b& (0+255),b
  9389  011CDE  0E00               	movlw	high _bufU2_main
  9390  011CE0  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9391  011CE2  5179               	movf	(_keyReport+1)& (0+255),w,b
  9392  011CE4  117A               	iorwf	(_keyReport+2)& (0+255),w,b
  9393  011CE6  117B               	iorwf	(_keyReport+3)& (0+255),w,b
  9394  011CE8  1178               	iorwf	_keyReport& (0+255),w,b
  9395  011CEA  6FE5               	movwf	bufWrite@d& (0+255),b
  9396  011CEC  EC84  F091         	call	_bufWrite	;wreg free
  9397                           
  9398                           ;RN42.c: 143:   bufWrite(&bufU2_main, 0x00);
  9399  011CF0  0E3D               	movlw	low _bufU2_main
  9400  011CF2  0100               	movlb	0	; () banked
  9401  011CF4  6FE3               	movwf	bufWrite@b& (0+255),b
  9402  011CF6  0E00               	movlw	high _bufU2_main
  9403  011CF8  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9404  011CFA  0E00               	movlw	0
  9405  011CFC  6FE5               	movwf	bufWrite@d& (0+255),b
  9406  011CFE  EC84  F091         	call	_bufWrite	;wreg free
  9407                           
  9408                           ;RN42.c: 144:   bufWrite(&bufU2_main, keyReport.scanCodes[0]);
  9409  011D02  0E3D               	movlw	low _bufU2_main
  9410  011D04  0100               	movlb	0	; () banked
  9411  011D06  6FE3               	movwf	bufWrite@b& (0+255),b
  9412  011D08  0E00               	movlw	high _bufU2_main
  9413  011D0A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9414  011D0C  C07C  F0E5         	movff	_keyReport+4,bufWrite@d
  9415  011D10  EC84  F091         	call	_bufWrite	;wreg free
  9416                           
  9417                           ;RN42.c: 145:   bufWrite(&bufU2_main, keyReport.scanCodes[1]);
  9418  011D14  0E3D               	movlw	low _bufU2_main
  9419  011D16  0100               	movlb	0	; () banked
  9420  011D18  6FE3               	movwf	bufWrite@b& (0+255),b
  9421  011D1A  0E00               	movlw	high _bufU2_main
  9422  011D1C  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9423  011D1E  C07D  F0E5         	movff	_keyReport+5,bufWrite@d
  9424  011D22  EC84  F091         	call	_bufWrite	;wreg free
  9425                           
  9426                           ;RN42.c: 146:   bufWrite(&bufU2_main, keyReport.scanCodes[2]);
  9427  011D26  0E3D               	movlw	low _bufU2_main
  9428  011D28  0100               	movlb	0	; () banked
  9429  011D2A  6FE3               	movwf	bufWrite@b& (0+255),b
  9430  011D2C  0E00               	movlw	high _bufU2_main
  9431  011D2E  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9432  011D30  C07E  F0E5         	movff	_keyReport+6,bufWrite@d
  9433  011D34  EC84  F091         	call	_bufWrite	;wreg free
  9434                           
  9435                           ;RN42.c: 147:   bufWrite(&bufU2_main, keyReport.scanCodes[3]);
  9436  011D38  0E3D               	movlw	low _bufU2_main
  9437  011D3A  0100               	movlb	0	; () banked
  9438  011D3C  6FE3               	movwf	bufWrite@b& (0+255),b
  9439  011D3E  0E00               	movlw	high _bufU2_main
  9440  011D40  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9441  011D42  C07F  F0E5         	movff	_keyReport+7,bufWrite@d
  9442  011D46  EC84  F091         	call	_bufWrite	;wreg free
  9443                           
  9444                           ;RN42.c: 148:   bufWrite(&bufU2_main, keyReport.scanCodes[4]);
  9445  011D4A  0E3D               	movlw	low _bufU2_main
  9446  011D4C  0100               	movlb	0	; () banked
  9447  011D4E  6FE3               	movwf	bufWrite@b& (0+255),b
  9448  011D50  0E00               	movlw	high _bufU2_main
  9449  011D52  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9450  011D54  C080  F0E5         	movff	_keyReport+8,bufWrite@d
  9451  011D58  EC84  F091         	call	_bufWrite	;wreg free
  9452                           
  9453                           ;RN42.c: 149:   bufWrite(&bufU2_main, keyReport.scanCodes[5]);
  9454  011D5C  0E3D               	movlw	low _bufU2_main
  9455  011D5E  0100               	movlb	0	; () banked
  9456  011D60  6FE3               	movwf	bufWrite@b& (0+255),b
  9457  011D62  0E00               	movlw	high _bufU2_main
  9458  011D64  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9459  011D66  C081  F0E5         	movff	_keyReport+9,bufWrite@d
  9460  011D6A  EC84  F091         	call	_bufWrite	;wreg free
  9461                           
  9462                           ;RN42.c: 150:   waitOutputReport();
  9463  011D6E  EC1E  F093         	call	_waitOutputReport	;wreg free
  9464  011D72  0012               	return	
  9465  011D74                     __end_of_sendKey:
  9466                           	opt stack 0
  9467                           tblptru	equ	0xFF8
  9468                           tblptrh	equ	0xFF7
  9469                           tblptrl	equ	0xFF6
  9470                           tablat	equ	0xFF5
  9471                           prodh	equ	0xFF4
  9472                           prodl	equ	0xFF3
  9473                           intcon	equ	0xFF2
  9474                           postinc0	equ	0xFEE
  9475                           wreg	equ	0xFE8
  9476                           indf1	equ	0xFE7
  9477                           postdec1	equ	0xFE5
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           fsr2h	equ	0xFDA
  9484                           fsr2l	equ	0xFD9
  9485                           status	equ	0xFD8
  9486                           
  9487 ;; *************** function _sendConsumerReport *****************
  9488 ;; Defined at:
  9489 ;;		line 163 in file "RN42.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;		None
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      void 
  9496 ;; Registers used:
  9497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9507 ;;Total ram usage:        0 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    7
  9510 ;; This function calls:
  9511 ;;		_bufWrite
  9512 ;;		_waitOutputReport
  9513 ;; This function is called by:
  9514 ;;		_main
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text23
  9519  0122A2                     __ptext23:
  9520                           	opt stack 0
  9521  0122A2                     _sendConsumerReport:
  9522                           	opt stack 23
  9523                           
  9524                           ;RN42.c: 165:  if (BtConnected)
  9525                           
  9526                           ;incstack = 0
  9527  0122A2  0100               	movlb	0	; () banked
  9528  0122A4  5188               	movf	_BtConnected& (0+255),w,b
  9529  0122A6  B4D8               	btfsc	status,2,c
  9530  0122A8  0012               	return	
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;RN42.c: 166:  {;RN42.c: 167:   bufWrite(&bufU2_main, 0xfd);
  9534  0122AA  0E3D               	movlw	low _bufU2_main
  9535  0122AC  6FE3               	movwf	bufWrite@b& (0+255),b
  9536  0122AE  0E00               	movlw	high _bufU2_main
  9537  0122B0  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9538  0122B2  0EFD               	movlw	253
  9539  0122B4  6FE5               	movwf	bufWrite@d& (0+255),b
  9540  0122B6  EC84  F091         	call	_bufWrite	;wreg free
  9541                           
  9542                           ;RN42.c: 168:   bufWrite(&bufU2_main, 0x03);
  9543  0122BA  0E3D               	movlw	low _bufU2_main
  9544  0122BC  0100               	movlb	0	; () banked
  9545  0122BE  6FE3               	movwf	bufWrite@b& (0+255),b
  9546  0122C0  0E00               	movlw	high _bufU2_main
  9547  0122C2  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9548  0122C4  0E03               	movlw	3
  9549  0122C6  6FE5               	movwf	bufWrite@d& (0+255),b
  9550  0122C8  EC84  F091         	call	_bufWrite	;wreg free
  9551                           
  9552                           ;RN42.c: 169:   bufWrite(&bufU2_main, 0x03);
  9553  0122CC  0E3D               	movlw	low _bufU2_main
  9554  0122CE  0100               	movlb	0	; () banked
  9555  0122D0  6FE3               	movwf	bufWrite@b& (0+255),b
  9556  0122D2  0E00               	movlw	high _bufU2_main
  9557  0122D4  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9558  0122D6  0E03               	movlw	3
  9559  0122D8  6FE5               	movwf	bufWrite@d& (0+255),b
  9560  0122DA  EC84  F091         	call	_bufWrite	;wreg free
  9561                           
  9562                           ;RN42.c: 170:   bufWrite(&bufU2_main, consumerKey);
  9563  0122DE  0E3D               	movlw	low _bufU2_main
  9564  0122E0  0100               	movlb	0	; () banked
  9565  0122E2  6FE3               	movwf	bufWrite@b& (0+255),b
  9566  0122E4  0E00               	movlw	high _bufU2_main
  9567  0122E6  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9568  0122E8  C02C  F0E5         	movff	_consumerKey,bufWrite@d
  9569  0122EC  EC84  F091         	call	_bufWrite	;wreg free
  9570                           
  9571                           ;RN42.c: 171:   bufWrite(&bufU2_main, consumerKey >> 8);
  9572  0122F0  0E3D               	movlw	low _bufU2_main
  9573  0122F2  0100               	movlb	0	; () banked
  9574  0122F4  6FE3               	movwf	bufWrite@b& (0+255),b
  9575  0122F6  0E00               	movlw	high _bufU2_main
  9576  0122F8  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9577  0122FA  502D               	movf	_consumerKey+1,w,c
  9578  0122FC  6FE5               	movwf	bufWrite@d& (0+255),b
  9579  0122FE  EC84  F091         	call	_bufWrite	;wreg free
  9580                           
  9581                           ;RN42.c: 172:   waitOutputReport();
  9582  012302  EC1E  F093         	call	_waitOutputReport	;wreg free
  9583  012306  0012               	return	
  9584  012308                     __end_of_sendConsumerReport:
  9585                           	opt stack 0
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           intcon	equ	0xFF2
  9593                           postinc0	equ	0xFEE
  9594                           wreg	equ	0xFE8
  9595                           indf1	equ	0xFE7
  9596                           postdec1	equ	0xFE5
  9597                           fsr1h	equ	0xFE2
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           fsr2h	equ	0xFDA
  9603                           fsr2l	equ	0xFD9
  9604                           status	equ	0xFD8
  9605                           
  9606 ;; *************** function _sendAltCode *****************
  9607 ;; Defined at:
  9608 ;;		line 176 in file "RN42.c"
  9609 ;; Parameters:    Size  Location     Type
  9610 ;;		None
  9611 ;; Auto vars:     Size  Location     Type
  9612 ;;  temp            1   21[BANK0 ] unsigned char 
  9613 ;; Return value:  Size  Location     Type
  9614 ;;                  1    wreg      void 
  9615 ;; Registers used:
  9616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9617 ;; Tracked objects:
  9618 ;;		On entry : 0/0
  9619 ;;		On exit  : 0/0
  9620 ;;		Unchanged: 0/0
  9621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9624 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9625 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9626 ;;Total ram usage:        4 bytes
  9627 ;; Hardware stack levels used:    1
  9628 ;; Hardware stack levels required when called:    7
  9629 ;; This function calls:
  9630 ;;		_bufWrite
  9631 ;;		_waitOutputReport
  9632 ;; This function is called by:
  9633 ;;		_main
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text24
  9638  011902                     __ptext24:
  9639                           	opt stack 0
  9640  011902                     _sendAltCode:
  9641                           	opt stack 23
  9642                           
  9643                           ;RN42.c: 178:  unsigned char temp = 0;
  9644                           
  9645                           ;incstack = 0
  9646  011902  0E00               	movlw	0
  9647  011904  0100               	movlb	0	; () banked
  9648  011906  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9649                           
  9650                           ;RN42.c: 179:  if (BtConnected)
  9651  011908  5188               	movf	_BtConnected& (0+255),w,b
  9652  01190A  B4D8               	btfsc	status,2,c
  9653  01190C  0012               	return	
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;RN42.c: 180:  {;RN42.c: 181:   bufWrite(&bufU2_main, 0xfe);
  9657  01190E  0E3D               	movlw	low _bufU2_main
  9658  011910  6FE3               	movwf	bufWrite@b& (0+255),b
  9659  011912  0E00               	movlw	high _bufU2_main
  9660  011914  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9661  011916  0EFE               	movlw	254
  9662  011918  6FE5               	movwf	bufWrite@d& (0+255),b
  9663  01191A  EC84  F091         	call	_bufWrite	;wreg free
  9664                           
  9665                           ;RN42.c: 182:   bufWrite(&bufU2_main, 0x02);
  9666  01191E  0E3D               	movlw	low _bufU2_main
  9667  011920  0100               	movlb	0	; () banked
  9668  011922  6FE3               	movwf	bufWrite@b& (0+255),b
  9669  011924  0E00               	movlw	high _bufU2_main
  9670  011926  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9671  011928  0E02               	movlw	2
  9672  01192A  6FE5               	movwf	bufWrite@d& (0+255),b
  9673  01192C  EC84  F091         	call	_bufWrite	;wreg free
  9674                           
  9675                           ;RN42.c: 183:   bufWrite(&bufU2_main, 0x04);
  9676  011930  0E3D               	movlw	low _bufU2_main
  9677  011932  0100               	movlb	0	; () banked
  9678  011934  6FE3               	movwf	bufWrite@b& (0+255),b
  9679  011936  0E00               	movlw	high _bufU2_main
  9680  011938  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9681  01193A  0E04               	movlw	4
  9682  01193C  6FE5               	movwf	bufWrite@d& (0+255),b
  9683  01193E  EC84  F091         	call	_bufWrite	;wreg free
  9684                           
  9685                           ;RN42.c: 184:   bufWrite(&bufU2_main, 0x00);
  9686  011942  0E3D               	movlw	low _bufU2_main
  9687  011944  0100               	movlb	0	; () banked
  9688  011946  6FE3               	movwf	bufWrite@b& (0+255),b
  9689  011948  0E00               	movlw	high _bufU2_main
  9690  01194A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9691  01194C  0E00               	movlw	0
  9692  01194E  6FE5               	movwf	bufWrite@d& (0+255),b
  9693  011950  EC84  F091         	call	_bufWrite	;wreg free
  9694                           
  9695                           ;RN42.c: 185:   waitOutputReport();
  9696  011954  EC1E  F093         	call	_waitOutputReport	;wreg free
  9697                           
  9698                           ;RN42.c: 193:   bufWrite(&bufU2_main, 0xfe);
  9699  011958  0E3D               	movlw	low _bufU2_main
  9700  01195A  0100               	movlb	0	; () banked
  9701  01195C  6FE3               	movwf	bufWrite@b& (0+255),b
  9702  01195E  0E00               	movlw	high _bufU2_main
  9703  011960  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9704  011962  0EFE               	movlw	254
  9705  011964  6FE5               	movwf	bufWrite@d& (0+255),b
  9706  011966  EC84  F091         	call	_bufWrite	;wreg free
  9707                           
  9708                           ;RN42.c: 194:   bufWrite(&bufU2_main, 0x02);
  9709  01196A  0E3D               	movlw	low _bufU2_main
  9710  01196C  0100               	movlb	0	; () banked
  9711  01196E  6FE3               	movwf	bufWrite@b& (0+255),b
  9712  011970  0E00               	movlw	high _bufU2_main
  9713  011972  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9714  011974  0E02               	movlw	2
  9715  011976  6FE5               	movwf	bufWrite@d& (0+255),b
  9716  011978  EC84  F091         	call	_bufWrite	;wreg free
  9717                           
  9718                           ;RN42.c: 195:   bufWrite(&bufU2_main, 0x04);
  9719  01197C  0E3D               	movlw	low _bufU2_main
  9720  01197E  0100               	movlb	0	; () banked
  9721  011980  6FE3               	movwf	bufWrite@b& (0+255),b
  9722  011982  0E00               	movlw	high _bufU2_main
  9723  011984  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9724  011986  0E04               	movlw	4
  9725  011988  6FE5               	movwf	bufWrite@d& (0+255),b
  9726  01198A  EC84  F091         	call	_bufWrite	;wreg free
  9727                           
  9728                           ;RN42.c: 196:   temp = 0x58+((altCode>>8)&0x0f);
  9729  01198E  502F               	movf	_altCode+1,w,c
  9730  011990  0B0F               	andlw	15
  9731  011992  0F58               	addlw	88
  9732  011994  0100               	movlb	0	; () banked
  9733  011996  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;RN42.c: 197:   if(temp == 0x58){
  9737  011998  0E58               	movlw	88
  9738  01199A  19EC               	xorwf	sendAltCode@temp& (0+255),w,b
  9739  01199C  A4D8               	btfss	status,2,c
  9740  01199E  D002               	goto	l780
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;RN42.c: 198:    temp = 0x62;
  9744  0119A0  0E62               	movlw	98
  9745  0119A2  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9746  0119A4                     l780:
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;RN42.c: 200:   bufWrite(&bufU2_main, temp);
  9750                           
  9751                           ; BSR set to: 0
  9752  0119A4  0E3D               	movlw	low _bufU2_main
  9753  0119A6  6FE3               	movwf	bufWrite@b& (0+255),b
  9754  0119A8  0E00               	movlw	high _bufU2_main
  9755  0119AA  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9756  0119AC  C0EC  F0E5         	movff	sendAltCode@temp,bufWrite@d
  9757  0119B0  EC84  F091         	call	_bufWrite	;wreg free
  9758                           
  9759                           ;RN42.c: 201:   waitOutputReport();
  9760  0119B4  EC1E  F093         	call	_waitOutputReport	;wreg free
  9761                           
  9762                           ;RN42.c: 203:   bufWrite(&bufU2_main, 0xfe);
  9763  0119B8  0E3D               	movlw	low _bufU2_main
  9764  0119BA  0100               	movlb	0	; () banked
  9765  0119BC  6FE3               	movwf	bufWrite@b& (0+255),b
  9766  0119BE  0E00               	movlw	high _bufU2_main
  9767  0119C0  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9768  0119C2  0EFE               	movlw	254
  9769  0119C4  6FE5               	movwf	bufWrite@d& (0+255),b
  9770  0119C6  EC84  F091         	call	_bufWrite	;wreg free
  9771                           
  9772                           ;RN42.c: 204:   bufWrite(&bufU2_main, 0x02);
  9773  0119CA  0E3D               	movlw	low _bufU2_main
  9774  0119CC  0100               	movlb	0	; () banked
  9775  0119CE  6FE3               	movwf	bufWrite@b& (0+255),b
  9776  0119D0  0E00               	movlw	high _bufU2_main
  9777  0119D2  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9778  0119D4  0E02               	movlw	2
  9779  0119D6  6FE5               	movwf	bufWrite@d& (0+255),b
  9780  0119D8  EC84  F091         	call	_bufWrite	;wreg free
  9781                           
  9782                           ;RN42.c: 205:   bufWrite(&bufU2_main, 0x04);
  9783  0119DC  0E3D               	movlw	low _bufU2_main
  9784  0119DE  0100               	movlb	0	; () banked
  9785  0119E0  6FE3               	movwf	bufWrite@b& (0+255),b
  9786  0119E2  0E00               	movlw	high _bufU2_main
  9787  0119E4  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9788  0119E6  0E04               	movlw	4
  9789  0119E8  6FE5               	movwf	bufWrite@d& (0+255),b
  9790  0119EA  EC84  F091         	call	_bufWrite	;wreg free
  9791                           
  9792                           ;RN42.c: 206:   temp = 0x58+((altCode>>4)&0x0f);
  9793  0119EE  C02E  F0E9         	movff	_altCode,??_sendAltCode
  9794  0119F2  C02F  F0EA         	movff	_altCode+1,??_sendAltCode+1
  9795  0119F6  0E04               	movlw	4
  9796  0119F8  0100               	movlb	0	; () banked
  9797  0119FA  6FEB               	movwf	(??_sendAltCode+2)& (0+255),b
  9798  0119FC                     u6765:
  9799  0119FC  90D8               	bcf	status,0,c
  9800  0119FE  33EA               	rrcf	(??_sendAltCode+1)& (0+255),f,b
  9801  011A00  33E9               	rrcf	??_sendAltCode& (0+255),f,b
  9802  011A02  2FEB               	decfsz	(??_sendAltCode+2)& (0+255),f,b
  9803  011A04  D7FB               	goto	u6765
  9804  011A06  51E9               	movf	??_sendAltCode& (0+255),w,b
  9805  011A08  0B0F               	andlw	15
  9806  011A0A  0F58               	addlw	88
  9807  011A0C  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;RN42.c: 207:   if(temp == 0x58){
  9811  011A0E  0E58               	movlw	88
  9812  011A10  19EC               	xorwf	sendAltCode@temp& (0+255),w,b
  9813  011A12  A4D8               	btfss	status,2,c
  9814  011A14  D002               	goto	l781
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;RN42.c: 208:    temp = 0x62;
  9818  011A16  0E62               	movlw	98
  9819  011A18  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9820  011A1A                     l781:
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;RN42.c: 210:   bufWrite(&bufU2_main, temp);
  9824                           
  9825                           ; BSR set to: 0
  9826  011A1A  0E3D               	movlw	low _bufU2_main
  9827  011A1C  6FE3               	movwf	bufWrite@b& (0+255),b
  9828  011A1E  0E00               	movlw	high _bufU2_main
  9829  011A20  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9830  011A22  C0EC  F0E5         	movff	sendAltCode@temp,bufWrite@d
  9831  011A26  EC84  F091         	call	_bufWrite	;wreg free
  9832                           
  9833                           ;RN42.c: 211:   waitOutputReport();
  9834  011A2A  EC1E  F093         	call	_waitOutputReport	;wreg free
  9835                           
  9836                           ;RN42.c: 213:   bufWrite(&bufU2_main, 0xfe);
  9837  011A2E  0E3D               	movlw	low _bufU2_main
  9838  011A30  0100               	movlb	0	; () banked
  9839  011A32  6FE3               	movwf	bufWrite@b& (0+255),b
  9840  011A34  0E00               	movlw	high _bufU2_main
  9841  011A36  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9842  011A38  0EFE               	movlw	254
  9843  011A3A  6FE5               	movwf	bufWrite@d& (0+255),b
  9844  011A3C  EC84  F091         	call	_bufWrite	;wreg free
  9845                           
  9846                           ;RN42.c: 214:   bufWrite(&bufU2_main, 0x02);
  9847  011A40  0E3D               	movlw	low _bufU2_main
  9848  011A42  0100               	movlb	0	; () banked
  9849  011A44  6FE3               	movwf	bufWrite@b& (0+255),b
  9850  011A46  0E00               	movlw	high _bufU2_main
  9851  011A48  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9852  011A4A  0E02               	movlw	2
  9853  011A4C  6FE5               	movwf	bufWrite@d& (0+255),b
  9854  011A4E  EC84  F091         	call	_bufWrite	;wreg free
  9855                           
  9856                           ;RN42.c: 215:   bufWrite(&bufU2_main, 0x04);
  9857  011A52  0E3D               	movlw	low _bufU2_main
  9858  011A54  0100               	movlb	0	; () banked
  9859  011A56  6FE3               	movwf	bufWrite@b& (0+255),b
  9860  011A58  0E00               	movlw	high _bufU2_main
  9861  011A5A  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9862  011A5C  0E04               	movlw	4
  9863  011A5E  6FE5               	movwf	bufWrite@d& (0+255),b
  9864  011A60  EC84  F091         	call	_bufWrite	;wreg free
  9865                           
  9866                           ;RN42.c: 216:   temp = 0x58+(altCode&0x0f);
  9867  011A64  502E               	movf	_altCode,w,c
  9868  011A66  0B0F               	andlw	15
  9869  011A68  0F58               	addlw	88
  9870  011A6A  0100               	movlb	0	; () banked
  9871  011A6C  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874                           ;RN42.c: 217:   if(temp == 0x58){
  9875  011A6E  0E58               	movlw	88
  9876  011A70  19EC               	xorwf	sendAltCode@temp& (0+255),w,b
  9877  011A72  A4D8               	btfss	status,2,c
  9878  011A74  D002               	goto	l782
  9879                           
  9880                           ; BSR set to: 0
  9881                           ;RN42.c: 218:    temp = 0x62;
  9882  011A76  0E62               	movlw	98
  9883  011A78  6FEC               	movwf	sendAltCode@temp& (0+255),b
  9884  011A7A                     l782:
  9885                           
  9886                           ; BSR set to: 0
  9887                           ;RN42.c: 220:   bufWrite(&bufU2_main, temp);
  9888                           
  9889                           ; BSR set to: 0
  9890  011A7A  0E3D               	movlw	low _bufU2_main
  9891  011A7C  6FE3               	movwf	bufWrite@b& (0+255),b
  9892  011A7E  0E00               	movlw	high _bufU2_main
  9893  011A80  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9894  011A82  C0EC  F0E5         	movff	sendAltCode@temp,bufWrite@d
  9895  011A86  EC84  F091         	call	_bufWrite	;wreg free
  9896                           
  9897                           ;RN42.c: 221:   waitOutputReport();
  9898  011A8A  EC1E  F093         	call	_waitOutputReport	;wreg free
  9899                           
  9900                           ;RN42.c: 223:   bufWrite(&bufU2_main, 0xfe);
  9901  011A8E  0E3D               	movlw	low _bufU2_main
  9902  011A90  0100               	movlb	0	; () banked
  9903  011A92  6FE3               	movwf	bufWrite@b& (0+255),b
  9904  011A94  0E00               	movlw	high _bufU2_main
  9905  011A96  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9906  011A98  0EFE               	movlw	254
  9907  011A9A  6FE5               	movwf	bufWrite@d& (0+255),b
  9908  011A9C  EC84  F091         	call	_bufWrite	;wreg free
  9909                           
  9910                           ;RN42.c: 224:   bufWrite(&bufU2_main, 0x00);
  9911  011AA0  0E3D               	movlw	low _bufU2_main
  9912  011AA2  0100               	movlb	0	; () banked
  9913  011AA4  6FE3               	movwf	bufWrite@b& (0+255),b
  9914  011AA6  0E00               	movlw	high _bufU2_main
  9915  011AA8  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9916  011AAA  0E00               	movlw	0
  9917  011AAC  6FE5               	movwf	bufWrite@d& (0+255),b
  9918  011AAE  EC84  F091         	call	_bufWrite	;wreg free
  9919                           
  9920                           ;RN42.c: 225:   waitOutputReport();
  9921  011AB2  EC1E  F093         	call	_waitOutputReport	;wreg free
  9922  011AB6  0012               	return	
  9923  011AB8                     __end_of_sendAltCode:
  9924                           	opt stack 0
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           intcon	equ	0xFF2
  9932                           postinc0	equ	0xFEE
  9933                           wreg	equ	0xFE8
  9934                           indf1	equ	0xFE7
  9935                           postdec1	equ	0xFE5
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           fsr2h	equ	0xFDA
  9942                           fsr2l	equ	0xFD9
  9943                           status	equ	0xFD8
  9944                           
  9945 ;; *************** function _waitOutputReport *****************
  9946 ;; Defined at:
  9947 ;;		line 88 in file "RN42.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;		None
  9950 ;; Auto vars:     Size  Location     Type
  9951 ;;		None
  9952 ;; Return value:  Size  Location     Type
  9953 ;;                  1    wreg      void 
  9954 ;; Registers used:
  9955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9956 ;; Tracked objects:
  9957 ;;		On entry : 0/0
  9958 ;;		On exit  : 0/0
  9959 ;;		Unchanged: 0/0
  9960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9965 ;;Total ram usage:        0 bytes
  9966 ;; Hardware stack levels used:    1
  9967 ;; Hardware stack levels required when called:    6
  9968 ;; This function calls:
  9969 ;;		_bufWrite
  9970 ;; This function is called by:
  9971 ;;		_sendMouse
  9972 ;;		_sendKey
  9973 ;;		_sendToggle
  9974 ;;		_sendConsumerReport
  9975 ;;		_sendAltCode
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text25
  9980  01263C                     __ptext25:
  9981                           	opt stack 0
  9982  01263C                     _waitOutputReport:
  9983                           	opt stack 23
  9984                           
  9985                           ;RN42.c: 90:  outputReportReceived = 0;
  9986                           
  9987                           ;incstack = 0
  9988  01263C  0E00               	movlw	0
  9989  01263E  6E38               	movwf	_outputReportReceived,c
  9990                           
  9991                           ;RN42.c: 91:  bufWrite(&bufU2_main, 0xff);
  9992  012640  0E3D               	movlw	low _bufU2_main
  9993  012642  0100               	movlb	0	; () banked
  9994  012644  6FE3               	movwf	bufWrite@b& (0+255),b
  9995  012646  0E00               	movlw	high _bufU2_main
  9996  012648  6FE4               	movwf	(bufWrite@b+1)& (0+255),b
  9997  01264A  0EFF               	movlw	255
  9998  01264C  6FE5               	movwf	bufWrite@d& (0+255),b
  9999  01264E  EC84  F091         	call	_bufWrite	;wreg free
 10000                           
 10001                           ;RN42.c: 92:  time = 0;
 10002  012652  0E00               	movlw	0
 10003  012654  6E28               	movwf	_time,c
 10004  012656  0E00               	movlw	0
 10005  012658  6E29               	movwf	_time+1,c
 10006  01265A  0E00               	movlw	0
 10007  01265C  6E2A               	movwf	_time+2,c
 10008  01265E  0E00               	movlw	0
 10009  012660  6E2B               	movwf	_time+3,c
 10010  012662  5038               	movf	_outputReportReceived,w,c
 10011  012664  A4D8               	btfss	status,2,c
 10012  012666  0012               	return	
 10013  012668  502B               	movf	_time+3,w,c
 10014  01266A  102A               	iorwf	_time+2,w,c
 10015  01266C  E107               	bnz	l751
 10016  01266E  0E10               	movlw	16
 10017  012670  5C28               	subwf	_time,w,c
 10018  012672  0E27               	movlw	39
 10019  012674  5829               	subwfb	_time+1,w,c
 10020  012676  B0D8               	btfsc	status,0,c
 10021  012678  0012               	return	
 10022  01267A  D7F3               	goto	l747
 10023  01267C                     l751:
 10024  01267C  0012               	return		;funcret
 10025  01267E                     __end_of_waitOutputReport:
 10026                           	opt stack 0
 10027                           tblptru	equ	0xFF8
 10028                           tblptrh	equ	0xFF7
 10029                           tblptrl	equ	0xFF6
 10030                           tablat	equ	0xFF5
 10031                           prodh	equ	0xFF4
 10032                           prodl	equ	0xFF3
 10033                           intcon	equ	0xFF2
 10034                           postinc0	equ	0xFEE
 10035                           wreg	equ	0xFE8
 10036                           indf1	equ	0xFE7
 10037                           postdec1	equ	0xFE5
 10038                           fsr1h	equ	0xFE2
 10039                           fsr1l	equ	0xFE1
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           fsr2h	equ	0xFDA
 10044                           fsr2l	equ	0xFD9
 10045                           status	equ	0xFD8
 10046                           
 10047 ;; *************** function _bufWrite *****************
 10048 ;; Defined at:
 10049 ;;		line 6 in file "ringBuffer.c"
 10050 ;; Parameters:    Size  Location     Type
 10051 ;;  b               2   12[BANK0 ] PTR struct ringBuf
 10052 ;;		 -> bufU5_main(4), bufU2_main(4), 
 10053 ;;  d               1   14[BANK0 ] unsigned char 
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;		None
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  1    wreg      void 
 10058 ;; Registers used:
 10059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10060 ;; Tracked objects:
 10061 ;;		On entry : 0/0
 10062 ;;		On exit  : 0/0
 10063 ;;		Unchanged: 0/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10065 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10067 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10068 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10069 ;;Total ram usage:        6 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:    5
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_showText
 10076 ;;		_showState
 10077 ;;		_waitOutputReport
 10078 ;;		_sendMouse
 10079 ;;		_sendKey
 10080 ;;		_sendToggle
 10081 ;;		_sendConsumerReport
 10082 ;;		_sendAltCode
 10083 ;;		_showHex2
 10084 ;;		_showHex4
 10085 ;;		_putText
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text26
 10090  012308                     __ptext26:
 10091                           	opt stack 0
 10092  012308                     _bufWrite:
 10093                           	opt stack 24
 10094                           
 10095                           ;ringBuffer.c: 6: void bufWrite(struct ringBuf *b, unsigned char d);ringBuffer.c: 7: {;r
      +                          ingBuffer.c: 8:  b->buffer[b->writeIndex++] = d;
 10096                           
 10097                           ;incstack = 0
 10098  012308  0100               	movlb	0	; () banked
 10099  01230A  EE20 F002          	lfsr	2,2
 10100  01230E  51E3               	movf	bufWrite@b& (0+255),w,b
 10101  012310  26D9               	addwf	fsr2l,f,c
 10102  012312  51E4               	movf	(bufWrite@b+1)& (0+255),w,b
 10103  012314  22DA               	addwfc	fsr2h,f,c
 10104  012316  50DF               	movf	indf2,w,c
 10105  012318  6FE6               	movwf	??_bufWrite& (0+255),b
 10106  01231A  51E6               	movf	??_bufWrite& (0+255),w,b
 10107  01231C  0D01               	mullw	1
 10108  01231E  C0E3  FFD9         	movff	bufWrite@b,fsr2l
 10109  012322  C0E4  FFDA         	movff	bufWrite@b+1,fsr2h
 10110  012326  CFDE F0E7          	movff	postinc2,??_bufWrite+1
 10111  01232A  CFDD F0E8          	movff	postdec2,??_bufWrite+2
 10112  01232E  50F3               	movf	prodl,w,c
 10113  012330  25E7               	addwf	(??_bufWrite+1)& (0+255),w,b
 10114  012332  6ED9               	movwf	fsr2l,c
 10115  012334  50F4               	movf	prodh,w,c
 10116  012336  21E8               	addwfc	(??_bufWrite+2)& (0+255),w,b
 10117  012338  6EDA               	movwf	fsr2h,c
 10118  01233A  C0E5  FFDF         	movff	bufWrite@d,indf2
 10119                           
 10120                           ; BSR set to: 0
 10121  01233E  EE20 F002          	lfsr	2,2
 10122  012342  51E3               	movf	bufWrite@b& (0+255),w,b
 10123  012344  26D9               	addwf	fsr2l,f,c
 10124  012346  51E4               	movf	(bufWrite@b+1)& (0+255),w,b
 10125  012348  22DA               	addwfc	fsr2h,f,c
 10126  01234A  2ADF               	incf	indf2,f,c
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;ringBuffer.c: 16:  if (!RF2)PIE3bits.TX2IE = 1;
 10130  01234C  B48E               	btfsc	3982,2,c	;volatile
 10131  01234E  D002               	goto	l807
 10132                           
 10133                           ; BSR set to: 0
 10134  012350  010E               	movlb	14	; () banked
 10135  012352  8D2C               	bsf	44,6,b	;volatile
 10136  012354                     l807:
 10137                           
 10138                           ;ringBuffer.c: 17:  if ((!RF6&&!!RF7&&!RF5) )
 10139  012354  BC8E               	btfsc	3982,6,c	;volatile
 10140  012356  0012               	return	
 10141  012358  AE8E               	btfss	3982,7,c	;volatile
 10142  01235A  0012               	return	
 10143  01235C  BA8E               	btfsc	3982,5,c	;volatile
 10144  01235E  0012               	return	
 10145                           
 10146                           ;ringBuffer.c: 18:   PIE4bits.TX5IE = 1;
 10147  012360  010E               	movlb	14	; () banked
 10148  012362  892D               	bsf	45,4,b	;volatile
 10149  012364  0012               	return	
 10150  012366                     __end_of_bufWrite:
 10151                           	opt stack 0
 10152                           tblptru	equ	0xFF8
 10153                           tblptrh	equ	0xFF7
 10154                           tblptrl	equ	0xFF6
 10155                           tablat	equ	0xFF5
 10156                           prodh	equ	0xFF4
 10157                           prodl	equ	0xFF3
 10158                           intcon	equ	0xFF2
 10159                           postinc0	equ	0xFEE
 10160                           wreg	equ	0xFE8
 10161                           indf1	equ	0xFE7
 10162                           postdec1	equ	0xFE5
 10163                           fsr1h	equ	0xFE2
 10164                           fsr1l	equ	0xFE1
 10165                           indf2	equ	0xFDF
 10166                           postinc2	equ	0xFDE
 10167                           postdec2	equ	0xFDD
 10168                           fsr2h	equ	0xFDA
 10169                           fsr2l	equ	0xFD9
 10170                           status	equ	0xFD8
 10171                           
 10172 ;; *************** function _enterCommand *****************
 10173 ;; Defined at:
 10174 ;;		line 108 in file "RN42.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  1    wreg      void 
 10181 ;; Registers used:
 10182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10192 ;;Total ram usage:        0 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    7
 10195 ;; This function calls:
 10196 ;;		_bufWriteIntH
 10197 ;;		_disconnect
 10198 ;;		_waitMs
 10199 ;; This function is called by:
 10200 ;;		_main
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           	psect	text27
 10205  012478                     __ptext27:
 10206                           	opt stack 0
 10207  012478                     _enterCommand:
 10208                           	opt stack 23
 10209                           
 10210                           ;RN42.c: 110:  if (BtConnected)
 10211                           
 10212                           ;incstack = 0
 10213  012478  0100               	movlb	0	; () banked
 10214  01247A  5188               	movf	_BtConnected& (0+255),w,b
 10215  01247C  A4D8               	btfss	status,2,c
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;RN42.c: 111:  {;RN42.c: 112:   disconnect();
 10219  01247E  EC52  F094         	call	_disconnect	;wreg free
 10220                           
 10221                           ;RN42.c: 114:     waitMs(1000);
 10222                           
 10223                           ;RN42.c: 113:  }
 10224  012482  0EE8               	movlw	232
 10225  012484  0100               	movlb	0	; () banked
 10226  012486  6FD7               	movwf	waitMs@t& (0+255),b
 10227  012488  0E03               	movlw	3
 10228  01248A  6FD8               	movwf	(waitMs@t+1)& (0+255),b
 10229  01248C  0E00               	movlw	0
 10230  01248E  6FD9               	movwf	(waitMs@t+2)& (0+255),b
 10231  012490  0E00               	movlw	0
 10232  012492  6FDA               	movwf	(waitMs@t+3)& (0+255),b
 10233  012494  EC3F  F093         	call	_waitMs	;wreg free
 10234                           
 10235                           ;RN42.c: 115:  bufWriteIntH(&bufU2_main, '$');
 10236  012498  0E3D               	movlw	low _bufU2_main
 10237  01249A  0100               	movlb	0	; () banked
 10238  01249C  6FD7               	movwf	bufWriteIntH@b& (0+255),b
 10239  01249E  0E00               	movlw	high _bufU2_main
 10240  0124A0  6FD8               	movwf	(bufWriteIntH@b+1)& (0+255),b
 10241  0124A2  0E24               	movlw	36
 10242  0124A4  6FD9               	movwf	bufWriteIntH@d& (0+255),b
 10243  0124A6  ECB3  F091         	call	_bufWriteIntH	;wreg free
 10244                           
 10245                           ;RN42.c: 116:  bufWriteIntH(&bufU2_main, '$');
 10246  0124AA  0E3D               	movlw	low _bufU2_main
 10247  0124AC  0100               	movlb	0	; () banked
 10248  0124AE  6FD7               	movwf	bufWriteIntH@b& (0+255),b
 10249  0124B0  0E00               	movlw	high _bufU2_main
 10250  0124B2  6FD8               	movwf	(bufWriteIntH@b+1)& (0+255),b
 10251  0124B4  0E24               	movlw	36
 10252  0124B6  6FD9               	movwf	bufWriteIntH@d& (0+255),b
 10253  0124B8  ECB3  F091         	call	_bufWriteIntH	;wreg free
 10254                           
 10255                           ;RN42.c: 117:  bufWriteIntH(&bufU2_main, '$');
 10256  0124BC  0E3D               	movlw	low _bufU2_main
 10257  0124BE  0100               	movlb	0	; () banked
 10258  0124C0  6FD7               	movwf	bufWriteIntH@b& (0+255),b
 10259  0124C2  0E00               	movlw	high _bufU2_main
 10260  0124C4  6FD8               	movwf	(bufWriteIntH@b+1)& (0+255),b
 10261  0124C6  0E24               	movlw	36
 10262  0124C8  6FD9               	movwf	bufWriteIntH@d& (0+255),b
 10263  0124CA  ECB3  F091         	call	_bufWriteIntH	;wreg free
 10264  0124CE  0012               	return		;funcret
 10265  0124D0                     __end_of_enterCommand:
 10266                           	opt stack 0
 10267                           tblptru	equ	0xFF8
 10268                           tblptrh	equ	0xFF7
 10269                           tblptrl	equ	0xFF6
 10270                           tablat	equ	0xFF5
 10271                           prodh	equ	0xFF4
 10272                           prodl	equ	0xFF3
 10273                           intcon	equ	0xFF2
 10274                           postinc0	equ	0xFEE
 10275                           wreg	equ	0xFE8
 10276                           indf1	equ	0xFE7
 10277                           postdec1	equ	0xFE5
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           fsr2h	equ	0xFDA
 10284                           fsr2l	equ	0xFD9
 10285                           status	equ	0xFD8
 10286                           
 10287 ;; *************** function _bufWriteIntH *****************
 10288 ;; Defined at:
 10289 ;;		line 21 in file "ringBuffer.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;  b               2    0[BANK0 ] PTR struct ringBuf
 10292 ;;		 -> bufU2_main(4), bufU2_intH(4), bufU5_intH(4), 
 10293 ;;  d               1    2[BANK0 ] unsigned char 
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10305 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10307 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10308 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10309 ;;Total ram usage:        6 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    5
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_enterCommand
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text28
 10320  012366                     __ptext28:
 10321                           	opt stack 0
 10322  012366                     _bufWriteIntH:
 10323                           	opt stack 24
 10324                           
 10325                           ;ringBuffer.c: 21: void bufWriteIntH(struct ringBuf *b, unsigned char d);ringBuffer.c: 2
      +                          2: {;ringBuffer.c: 23:  b->buffer[b->writeIndex++] = d;
 10326                           
 10327                           ;incstack = 0
 10328  012366  0100               	movlb	0	; () banked
 10329  012368  EE20 F002          	lfsr	2,2
 10330  01236C  51D7               	movf	bufWriteIntH@b& (0+255),w,b
 10331  01236E  26D9               	addwf	fsr2l,f,c
 10332  012370  51D8               	movf	(bufWriteIntH@b+1)& (0+255),w,b
 10333  012372  22DA               	addwfc	fsr2h,f,c
 10334  012374  50DF               	movf	indf2,w,c
 10335  012376  6FDA               	movwf	??_bufWriteIntH& (0+255),b
 10336  012378  51DA               	movf	??_bufWriteIntH& (0+255),w,b
 10337  01237A  0D01               	mullw	1
 10338  01237C  C0D7  FFD9         	movff	bufWriteIntH@b,fsr2l
 10339  012380  C0D8  FFDA         	movff	bufWriteIntH@b+1,fsr2h
 10340  012384  CFDE F0DB          	movff	postinc2,??_bufWriteIntH+1
 10341  012388  CFDD F0DC          	movff	postdec2,??_bufWriteIntH+2
 10342  01238C  50F3               	movf	prodl,w,c
 10343  01238E  25DB               	addwf	(??_bufWriteIntH+1)& (0+255),w,b
 10344  012390  6ED9               	movwf	fsr2l,c
 10345  012392  50F4               	movf	prodh,w,c
 10346  012394  21DC               	addwfc	(??_bufWriteIntH+2)& (0+255),w,b
 10347  012396  6EDA               	movwf	fsr2h,c
 10348  012398  C0D9  FFDF         	movff	bufWriteIntH@d,indf2
 10349                           
 10350                           ; BSR set to: 0
 10351  01239C  EE20 F002          	lfsr	2,2
 10352  0123A0  51D7               	movf	bufWriteIntH@b& (0+255),w,b
 10353  0123A2  26D9               	addwf	fsr2l,f,c
 10354  0123A4  51D8               	movf	(bufWriteIntH@b+1)& (0+255),w,b
 10355  0123A6  22DA               	addwfc	fsr2h,f,c
 10356  0123A8  2ADF               	incf	indf2,f,c
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;ringBuffer.c: 31:  if (!RF2)PIE3bits.TX2IE = 1;
 10360  0123AA  B48E               	btfsc	3982,2,c	;volatile
 10361  0123AC  D002               	goto	l812
 10362                           
 10363                           ; BSR set to: 0
 10364  0123AE  010E               	movlb	14	; () banked
 10365  0123B0  8D2C               	bsf	44,6,b	;volatile
 10366  0123B2                     l812:
 10367                           
 10368                           ;ringBuffer.c: 32:  if ((!RF6&&!!RF7&&!RF5) )
 10369  0123B2  BC8E               	btfsc	3982,6,c	;volatile
 10370  0123B4  0012               	return	
 10371  0123B6  AE8E               	btfss	3982,7,c	;volatile
 10372  0123B8  0012               	return	
 10373  0123BA  BA8E               	btfsc	3982,5,c	;volatile
 10374  0123BC  0012               	return	
 10375                           
 10376                           ;ringBuffer.c: 33:   PIE4bits.TX5IE = 1;
 10377  0123BE  010E               	movlb	14	; () banked
 10378  0123C0  892D               	bsf	45,4,b	;volatile
 10379  0123C2  0012               	return	
 10380  0123C4                     __end_of_bufWriteIntH:
 10381                           	opt stack 0
 10382                           tblptru	equ	0xFF8
 10383                           tblptrh	equ	0xFF7
 10384                           tblptrl	equ	0xFF6
 10385                           tablat	equ	0xFF5
 10386                           prodh	equ	0xFF4
 10387                           prodl	equ	0xFF3
 10388                           intcon	equ	0xFF2
 10389                           postinc0	equ	0xFEE
 10390                           wreg	equ	0xFE8
 10391                           indf1	equ	0xFE7
 10392                           postdec1	equ	0xFE5
 10393                           fsr1h	equ	0xFE2
 10394                           fsr1l	equ	0xFE1
 10395                           indf2	equ	0xFDF
 10396                           postinc2	equ	0xFDE
 10397                           postdec2	equ	0xFDD
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function _connected *****************
 10403 ;; Defined at:
 10404 ;;		line 24 in file "RN42.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;		None
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg, status,2
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10422 ;;Total ram usage:        0 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    5
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_main
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text29
 10433  012A14                     __ptext29:
 10434                           	opt stack 0
 10435  012A14                     _connected:
 10436                           	opt stack 25
 10437                           
 10438                           ;RN42.c: 26:  while (RF1);
 10439                           
 10440                           ;incstack = 0
 10441  012A14  B28E               	btfsc	3982,1,c	;volatile
 10442  012A16  D7FE               	goto	_connected
 10443                           
 10444                           ;RN42.c: 27:  BtConnected = 1;
 10445  012A18  0E01               	movlw	1
 10446  012A1A  0100               	movlb	0	; () banked
 10447  012A1C  6F88               	movwf	_BtConnected& (0+255),b
 10448                           
 10449                           ; BSR set to: 0
 10450  012A1E  0012               	return		;funcret
 10451  012A20                     __end_of_connected:
 10452                           	opt stack 0
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postdec1	equ	0xFE5
 10464                           fsr1h	equ	0xFE2
 10465                           fsr1l	equ	0xFE1
 10466                           indf2	equ	0xFDF
 10467                           postinc2	equ	0xFDE
 10468                           postdec2	equ	0xFDD
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function _connectToggle *****************
 10474 ;; Defined at:
 10475 ;;		line 96 in file "RN42.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		wreg, status,2, status,0, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10493 ;;Total ram usage:        0 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    7
 10496 ;; This function calls:
 10497 ;;		_connect
 10498 ;;		_disconnect
 10499 ;; This function is called by:
 10500 ;;		_main
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text30
 10505  01299C                     __ptext30:
 10506                           	opt stack 0
 10507  01299C                     _connectToggle:
 10508                           	opt stack 23
 10509                           
 10510                           ;RN42.c: 98:  if (BtConnected)
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;incstack = 0
 10514  01299C  0100               	movlb	0	; () banked
 10515  01299E  5188               	movf	_BtConnected& (0+255),w,b
 10516  0129A0  B4D8               	btfsc	status,2,c
 10517  0129A2  D003               	goto	l754
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;RN42.c: 99:  {;RN42.c: 100:   disconnect();
 10521  0129A4  EC52  F094         	call	_disconnect	;wreg free
 10522                           
 10523                           ;RN42.c: 101:  }
 10524  0129A8  0012               	return	
 10525  0129AA                     l754:
 10526                           
 10527                           ;RN42.c: 103:  {;RN42.c: 104:   connect();
 10528  0129AA  EC75  F094         	call	_connect	;wreg free
 10529  0129AE  0012               	return	
 10530  0129B0                     __end_of_connectToggle:
 10531                           	opt stack 0
 10532                           tblptru	equ	0xFF8
 10533                           tblptrh	equ	0xFF7
 10534                           tblptrl	equ	0xFF6
 10535                           tablat	equ	0xFF5
 10536                           prodh	equ	0xFF4
 10537                           prodl	equ	0xFF3
 10538                           intcon	equ	0xFF2
 10539                           postinc0	equ	0xFEE
 10540                           wreg	equ	0xFE8
 10541                           indf1	equ	0xFE7
 10542                           postdec1	equ	0xFE5
 10543                           fsr1h	equ	0xFE2
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           postdec2	equ	0xFDD
 10548                           fsr2h	equ	0xFDA
 10549                           fsr2l	equ	0xFD9
 10550                           status	equ	0xFD8
 10551                           
 10552 ;; *************** function _disconnect *****************
 10553 ;; Defined at:
 10554 ;;		line 54 in file "RN42.c"
 10555 ;; Parameters:    Size  Location     Type
 10556 ;;		None
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;		None
 10559 ;; Return value:  Size  Location     Type
 10560 ;;                  1    wreg      void 
 10561 ;; Registers used:
 10562 ;;		wreg, status,2, status,0, cstack
 10563 ;; Tracked objects:
 10564 ;;		On entry : 0/0
 10565 ;;		On exit  : 0/0
 10566 ;;		Unchanged: 0/0
 10567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10572 ;;Total ram usage:        0 bytes
 10573 ;; Hardware stack levels used:    1
 10574 ;; Hardware stack levels required when called:    6
 10575 ;; This function calls:
 10576 ;;		_waitMs
 10577 ;; This function is called by:
 10578 ;;		_connectToggle
 10579 ;;		_enterCommand
 10580 ;; This function uses a non-reentrant model
 10581 ;;
 10582                           
 10583                           	psect	text31
 10584  0128A4                     __ptext31:
 10585                           	opt stack 0
 10586  0128A4                     _disconnect:
 10587                           	opt stack 23
 10588                           
 10589                           ;RN42.c: 59:  waitMs(10);
 10590                           
 10591                           ;incstack = 0
 10592  0128A4  0E0A               	movlw	10
 10593  0128A6  0100               	movlb	0	; () banked
 10594  0128A8  6FD7               	movwf	waitMs@t& (0+255),b
 10595  0128AA  0E00               	movlw	0
 10596  0128AC  6FD8               	movwf	(waitMs@t+1)& (0+255),b
 10597  0128AE  0E00               	movlw	0
 10598  0128B0  6FD9               	movwf	(waitMs@t+2)& (0+255),b
 10599  0128B2  0E00               	movlw	0
 10600  0128B4  6FDA               	movwf	(waitMs@t+3)& (0+255),b
 10601  0128B6  EC3F  F093         	call	_waitMs	;wreg free
 10602                           
 10603                           ;RN42.c: 60:  (LATA1=0);
 10604  0128BA  9279               	bcf	3961,1,c	;volatile
 10605                           
 10606                           ;RN42.c: 61:  BtConnected = 0;
 10607  0128BC  0E00               	movlw	0
 10608  0128BE  0100               	movlb	0	; () banked
 10609  0128C0  6F88               	movwf	_BtConnected& (0+255),b
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;RN42.c: 62:  BtGPIO5LowCount = 0;
 10613  0128C2  0E00               	movlw	0
 10614  0128C4  6F87               	movwf	(_BtGPIO5LowCount+1)& (0+255),b
 10615  0128C6  0E00               	movlw	0
 10616  0128C8  6F86               	movwf	_BtGPIO5LowCount& (0+255),b
 10617                           
 10618                           ; BSR set to: 0
 10619  0128CA  0012               	return		;funcret
 10620  0128CC                     __end_of_disconnect:
 10621                           	opt stack 0
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           postinc0	equ	0xFEE
 10630                           wreg	equ	0xFE8
 10631                           indf1	equ	0xFE7
 10632                           postdec1	equ	0xFE5
 10633                           fsr1h	equ	0xFE2
 10634                           fsr1l	equ	0xFE1
 10635                           indf2	equ	0xFDF
 10636                           postinc2	equ	0xFDE
 10637                           postdec2	equ	0xFDD
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _connect *****************
 10643 ;; Defined at:
 10644 ;;		line 65 in file "RN42.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, status,2, status,0, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    6
 10665 ;; This function calls:
 10666 ;;		_waitMs
 10667 ;; This function is called by:
 10668 ;;		_main
 10669 ;;		_connectToggle
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text32
 10674  0128EA                     __ptext32:
 10675                           	opt stack 0
 10676  0128EA                     _connect:
 10677                           	opt stack 23
 10678                           
 10679                           ;RN42.c: 67:  (LATA1=0);
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;incstack = 0
 10683  0128EA  9279               	bcf	3961,1,c	;volatile
 10684                           
 10685                           ;RN42.c: 68:  (LATA4=!0);
 10686  0128EC  8879               	bsf	3961,4,c	;volatile
 10687                           
 10688                           ;RN42.c: 69:  waitMs(200);
 10689  0128EE  0EC8               	movlw	200
 10690  0128F0  0100               	movlb	0	; () banked
 10691  0128F2  6FD7               	movwf	waitMs@t& (0+255),b
 10692  0128F4  0E00               	movlw	0
 10693  0128F6  6FD8               	movwf	(waitMs@t+1)& (0+255),b
 10694  0128F8  0E00               	movlw	0
 10695  0128FA  6FD9               	movwf	(waitMs@t+2)& (0+255),b
 10696  0128FC  0E00               	movlw	0
 10697  0128FE  6FDA               	movwf	(waitMs@t+3)& (0+255),b
 10698  012900  EC3F  F093         	call	_waitMs	;wreg free
 10699                           
 10700                           ;RN42.c: 70:  (LATA1=1);
 10701  012904  8279               	bsf	3961,1,c	;volatile
 10702  012906  0012               	return		;funcret
 10703  012908                     __end_of_connect:
 10704                           	opt stack 0
 10705                           tblptru	equ	0xFF8
 10706                           tblptrh	equ	0xFF7
 10707                           tblptrl	equ	0xFF6
 10708                           tablat	equ	0xFF5
 10709                           prodh	equ	0xFF4
 10710                           prodl	equ	0xFF3
 10711                           intcon	equ	0xFF2
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           indf1	equ	0xFE7
 10715                           postdec1	equ	0xFE5
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function _waitMs *****************
 10726 ;; Defined at:
 10727 ;;		line 327 in file "user.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;  t               4    0[BANK0 ] unsigned long 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;		None
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, status,0
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10743 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10744 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10745 ;;Total ram usage:        8 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    5
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_main
 10752 ;;		_showBatteryState
 10753 ;;		_disconnect
 10754 ;;		_connect
 10755 ;;		_enterCommand
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text33
 10760  01267E                     __ptext33:
 10761                           	opt stack 0
 10762  01267E                     _waitMs:
 10763                           	opt stack 25
 10764                           
 10765                           ;user.c: 327: void waitMs(unsigned long t);user.c: 328: {;user.c: 329:  time = 0;
 10766                           
 10767                           ;incstack = 0
 10768  01267E  0E00               	movlw	0
 10769  012680  6E28               	movwf	_time,c
 10770  012682  0E00               	movlw	0
 10771  012684  6E29               	movwf	_time+1,c
 10772  012686  0E00               	movlw	0
 10773  012688  6E2A               	movwf	_time+2,c
 10774  01268A  0E00               	movlw	0
 10775  01268C  6E2B               	movwf	_time+3,c
 10776  01268E  C028  F0DB         	movff	_time,??_waitMs
 10777  012692  C029  F0DC         	movff	_time+1,??_waitMs+1
 10778  012696  C02A  F0DD         	movff	_time+2,??_waitMs+2
 10779  01269A  C02B  F0DE         	movff	_time+3,??_waitMs+3
 10780  01269E  0100               	movlb	0	; () banked
 10781  0126A0  90D8               	bcf	status,0,c
 10782  0126A2  33DE               	rrcf	(??_waitMs+3)& (0+255),f,b
 10783  0126A4  33DD               	rrcf	(??_waitMs+2)& (0+255),f,b
 10784  0126A6  33DC               	rrcf	(??_waitMs+1)& (0+255),f,b
 10785  0126A8  33DB               	rrcf	??_waitMs& (0+255),f,b
 10786  0126AA  51D7               	movf	waitMs@t& (0+255),w,b
 10787  0126AC  5DDB               	subwf	??_waitMs& (0+255),w,b
 10788  0126AE  51D8               	movf	(waitMs@t+1)& (0+255),w,b
 10789  0126B0  59DC               	subwfb	(??_waitMs+1)& (0+255),w,b
 10790  0126B2  51D9               	movf	(waitMs@t+2)& (0+255),w,b
 10791  0126B4  59DD               	subwfb	(??_waitMs+2)& (0+255),w,b
 10792  0126B6  51DA               	movf	(waitMs@t+3)& (0+255),w,b
 10793  0126B8  59DE               	subwfb	(??_waitMs+3)& (0+255),w,b
 10794  0126BA  B0D8               	btfsc	status,0,c
 10795  0126BC  0012               	return	
 10796  0126BE  D7E7               	goto	l544
 10797  0126C0                     __end_of_waitMs:
 10798                           	opt stack 0
 10799                           tblptru	equ	0xFF8
 10800                           tblptrh	equ	0xFF7
 10801                           tblptrl	equ	0xFF6
 10802                           tablat	equ	0xFF5
 10803                           prodh	equ	0xFF4
 10804                           prodl	equ	0xFF3
 10805                           intcon	equ	0xFF2
 10806                           postinc0	equ	0xFEE
 10807                           wreg	equ	0xFE8
 10808                           indf1	equ	0xFE7
 10809                           postdec1	equ	0xFE5
 10810                           fsr1h	equ	0xFE2
 10811                           fsr1l	equ	0xFE1
 10812                           indf2	equ	0xFDF
 10813                           postinc2	equ	0xFDE
 10814                           postdec2	equ	0xFDD
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           
 10819 ;; *************** function _checkBtState *****************
 10820 ;; Defined at:
 10821 ;;		line 33 in file "RN42.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;		None
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;		None
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  1    wreg      void 
 10828 ;; Registers used:
 10829 ;;		wreg, status,2
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10839 ;;Total ram usage:        0 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    5
 10842 ;; This function calls:
 10843 ;;		Nothing
 10844 ;; This function is called by:
 10845 ;;		_main
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           	psect	text34
 10850  0129B0                     __ptext34:
 10851                           	opt stack 0
 10852  0129B0                     _checkBtState:
 10853                           	opt stack 25
 10854                           
 10855                           ;RN42.c: 35:  if ( !RF1)
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;incstack = 0
 10859  0129B0  A28E               	btfss	3982,1,c	;volatile
 10860  0129B2  0012               	return	
 10861                           
 10862                           ;RN42.c: 47:  {;RN42.c: 48:   BtGPIO5LowCount = 0;
 10863                           
 10864                           ;RN42.c: 46:  else
 10865                           
 10866                           ;RN42.c: 36:  {;RN42.c: 45:  }
 10867  0129B4  0E00               	movlw	0
 10868  0129B6  0100               	movlb	0	; () banked
 10869  0129B8  6F87               	movwf	(_BtGPIO5LowCount+1)& (0+255),b
 10870  0129BA  0E00               	movlw	0
 10871  0129BC  6F86               	movwf	_BtGPIO5LowCount& (0+255),b
 10872                           
 10873                           ;RN42.c: 49:   BtConnected = 0;
 10874  0129BE  0E00               	movlw	0
 10875  0129C0  6F88               	movwf	_BtConnected& (0+255),b
 10876  0129C2  0012               	return	
 10877  0129C4                     __end_of_checkBtState:
 10878                           	opt stack 0
 10879                           tblptru	equ	0xFF8
 10880                           tblptrh	equ	0xFF7
 10881                           tblptrl	equ	0xFF6
 10882                           tablat	equ	0xFF5
 10883                           prodh	equ	0xFF4
 10884                           prodl	equ	0xFF3
 10885                           intcon	equ	0xFF2
 10886                           postinc0	equ	0xFEE
 10887                           wreg	equ	0xFE8
 10888                           indf1	equ	0xFE7
 10889                           postdec1	equ	0xFE5
 10890                           fsr1h	equ	0xFE2
 10891                           fsr1l	equ	0xFE1
 10892                           indf2	equ	0xFDF
 10893                           postinc2	equ	0xFDE
 10894                           postdec2	equ	0xFDD
 10895                           fsr2h	equ	0xFDA
 10896                           fsr2l	equ	0xFD9
 10897                           status	equ	0xFD8
 10898                           
 10899 ;; *************** function _bufInit *****************
 10900 ;; Defined at:
 10901 ;;		line 61 in file "ringBuffer.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;  b               2    0[BANK0 ] PTR struct ringBuf
 10904 ;;		 -> bufU5_main(4), bufU2_main(4), bufU2_intH(4), bufU5_intH(4), 
 10905 ;;  buf             2    2[BANK0 ] PTR unsigned char 
 10906 ;;		 -> b6(256), b4(256), b3(256), b1(256), 
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;		None
 10909 ;; Return value:  Size  Location     Type
 10910 ;;                  1    wreg      void 
 10911 ;; Registers used:
 10912 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10913 ;; Tracked objects:
 10914 ;;		On entry : 0/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10918 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10922 ;;Total ram usage:        4 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    5
 10925 ;; This function calls:
 10926 ;;		Nothing
 10927 ;; This function is called by:
 10928 ;;		_main
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text35
 10933  0127F6                     __ptext35:
 10934                           	opt stack 0
 10935  0127F6                     _bufInit:
 10936                           	opt stack 25
 10937                           
 10938                           ;ringBuffer.c: 61: void bufInit(struct ringBuf *b, unsigned char *buf);ringBuffer.c: 65:
      +                           {;ringBuffer.c: 66:  b->buffer = buf;
 10939                           
 10940                           ;incstack = 0
 10941  0127F6  C0D7  FFD9         	movff	bufInit@b,fsr2l
 10942  0127FA  C0D8  FFDA         	movff	bufInit@b+1,fsr2h
 10943  0127FE  C0D9  FFDE         	movff	bufInit@buf,postinc2
 10944  012802  C0DA  FFDD         	movff	bufInit@buf+1,postdec2
 10945                           
 10946                           ;ringBuffer.c: 67:  b->writeIndex = 0;
 10947  012806  0100               	movlb	0	; () banked
 10948  012808  EE20 F002          	lfsr	2,2
 10949  01280C  51D7               	movf	bufInit@b& (0+255),w,b
 10950  01280E  26D9               	addwf	fsr2l,f,c
 10951  012810  51D8               	movf	(bufInit@b+1)& (0+255),w,b
 10952  012812  22DA               	addwfc	fsr2h,f,c
 10953  012814  0E00               	movlw	0
 10954  012816  6EDF               	movwf	indf2,c
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;ringBuffer.c: 68:  b->readIndex = 0;
 10958  012818  EE20 F003          	lfsr	2,3
 10959  01281C  51D7               	movf	bufInit@b& (0+255),w,b
 10960  01281E  26D9               	addwf	fsr2l,f,c
 10961  012820  51D8               	movf	(bufInit@b+1)& (0+255),w,b
 10962  012822  22DA               	addwfc	fsr2h,f,c
 10963  012824  0E00               	movlw	0
 10964  012826  6EDF               	movwf	indf2,c
 10965                           
 10966                           ; BSR set to: 0
 10967  012828  0012               	return		;funcret
 10968  01282A                     __end_of_bufInit:
 10969                           	opt stack 0
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           postinc0	equ	0xFEE
 10978                           wreg	equ	0xFE8
 10979                           indf1	equ	0xFE7
 10980                           postdec1	equ	0xFE5
 10981                           fsr1h	equ	0xFE2
 10982                           fsr1l	equ	0xFE1
 10983                           indf2	equ	0xFDF
 10984                           postinc2	equ	0xFDE
 10985                           postdec2	equ	0xFDD
 10986                           fsr2h	equ	0xFDA
 10987                           fsr2l	equ	0xFD9
 10988                           status	equ	0xFD8
 10989                           
 10990 ;; *************** function _WriteEEPROM *****************
 10991 ;; Defined at:
 10992 ;;		line 10 in file "EEPROM.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;  address         2    0[BANK0 ] unsigned short 
 10995 ;;  d               1    2[BANK0 ] unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  GIE_t           1    3[BANK0 ] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;                  1    wreg      void 
 11000 ;; Registers used:
 11001 ;;		wreg, status,2
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11007 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11010 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11011 ;;Total ram usage:        4 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    5
 11014 ;; This function calls:
 11015 ;;		Nothing
 11016 ;; This function is called by:
 11017 ;;		_main
 11018 ;; This function uses a non-reentrant model
 11019 ;;
 11020                           
 11021                           	psect	text36
 11022  0125F8                     __ptext36:
 11023                           	opt stack 0
 11024  0125F8                     _WriteEEPROM:
 11025                           	opt stack 25
 11026                           
 11027                           ;EEPROM.c: 10: void WriteEEPROM(unsigned short address, unsigned char d);EEPROM.c: 11: {
      +                          ;EEPROM.c: 12:  unsigned char GIE_t = INTCONbits.GIE;
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;incstack = 0
 11031  0125F8  0E00               	movlw	0
 11032  0125FA  BEF2               	btfsc	intcon,7,c	;volatile
 11033  0125FC  0E01               	movlw	1
 11034  0125FE  0100               	movlb	0	; () banked
 11035  012600  6FDA               	movwf	WriteEEPROM@GIE_t& (0+255),b
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;EEPROM.c: 15:  INTCONbits.GIE = 0;
 11039  012602  9EF2               	bcf	intcon,7,c	;volatile
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;EEPROM.c: 16:  NVMCON1bits.NVMREG = 0;
 11043  012604  0E3F               	movlw	-193
 11044  012606  1677               	andwf	3959,f,c	;volsfr
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;EEPROM.c: 18:  NVMADR = address;
 11048  012608  C0D7  FF74         	movff	WriteEEPROM@address,3956	;volatile
 11049  01260C  C0D8  FF75         	movff	WriteEEPROM@address+1,3957	;volatile
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;EEPROM.c: 19:  NVMDAT = d;
 11053  012610  C0D9  FF76         	movff	WriteEEPROM@d,3958	;volatile
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;EEPROM.c: 22:  NVMCON1bits.WREN = 1;
 11057  012614  8477               	bsf	3959,2,c	;volsfr
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;EEPROM.c: 23:  NVMCON2 = 0x55;
 11061  012616  0E55               	movlw	85
 11062  012618  6E78               	movwf	3960,c	;volsfr
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;EEPROM.c: 24:  NVMCON2 = 0xAA;
 11066  01261A  0EAA               	movlw	170
 11067  01261C  6E78               	movwf	3960,c	;volsfr
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;EEPROM.c: 25:  NVMCON1bits.WR = 1;
 11071  01261E  8277               	bsf	3959,1,c	;volsfr
 11072  012620                     
 11073                           ; BSR set to: 0
 11074  012620  B277               	btfsc	3959,1,c	;volsfr
 11075  012622  D7FE               	goto	l1140
 11076                           
 11077                           ;EEPROM.c: 27:  NVMCON1bits.WREN = 0;
 11078  012624  9477               	bcf	3959,2,c	;volsfr
 11079                           
 11080                           ;EEPROM.c: 30:  NVMCON1bits.NVMREG = 2;
 11081  012626  5077               	movf	3959,w,c	;volsfr
 11082  012628  0B3F               	andlw	-193
 11083  01262A  0980               	iorlw	128
 11084  01262C  6E77               	movwf	3959,c	;volsfr
 11085                           
 11086                           ;EEPROM.c: 31:  INTCONbits.GIE = GIE_t;
 11087  01262E  0100               	movlb	0	; () banked
 11088  012630  B1DA               	btfsc	WriteEEPROM@GIE_t& (0+255),0,b
 11089  012632  D002               	bra	u6945
 11090  012634  9EF2               	bcf	intcon,7,c	;volatile
 11091  012636  D001               	bra	u6946
 11092  012638                     u6945:
 11093  012638  8EF2               	bsf	intcon,7,c	;volatile
 11094  01263A                     u6946:
 11095  01263A  0012               	return		;funcret
 11096  01263C                     __end_of_WriteEEPROM:
 11097                           	opt stack 0
 11098                           tblptru	equ	0xFF8
 11099                           tblptrh	equ	0xFF7
 11100                           tblptrl	equ	0xFF6
 11101                           tablat	equ	0xFF5
 11102                           prodh	equ	0xFF4
 11103                           prodl	equ	0xFF3
 11104                           intcon	equ	0xFF2
 11105                           postinc0	equ	0xFEE
 11106                           wreg	equ	0xFE8
 11107                           indf1	equ	0xFE7
 11108                           postdec1	equ	0xFE5
 11109                           fsr1h	equ	0xFE2
 11110                           fsr1l	equ	0xFE1
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           fsr2h	equ	0xFDA
 11115                           fsr2l	equ	0xFD9
 11116                           status	equ	0xFD8
 11117                           
 11118 ;; *************** function _ReadEEPROM *****************
 11119 ;; Defined at:
 11120 ;;		line 34 in file "EEPROM.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  address         2    0[BANK0 ] unsigned short 
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;  d               1    3[BANK0 ] unsigned char 
 11125 ;;  GIE_t           1    2[BANK0 ] unsigned char 
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      unsigned char 
 11128 ;; Registers used:
 11129 ;;		wreg, status,2
 11130 ;; Tracked objects:
 11131 ;;		On entry : 0/0
 11132 ;;		On exit  : 0/0
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11139 ;;Total ram usage:        4 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    5
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text37
 11150  0127C0                     __ptext37:
 11151                           	opt stack 0
 11152  0127C0                     _ReadEEPROM:
 11153                           	opt stack 25
 11154                           
 11155                           ;EEPROM.c: 34: unsigned char ReadEEPROM(unsigned short address);EEPROM.c: 35: {;EEPROM.c
      +                          : 36:  unsigned char GIE_t = INTCONbits.GIE;
 11156                           
 11157                           ;incstack = 0
 11158  0127C0  0E00               	movlw	0
 11159  0127C2  BEF2               	btfsc	intcon,7,c	;volatile
 11160  0127C4  0E01               	movlw	1
 11161  0127C6  0100               	movlb	0	; () banked
 11162  0127C8  6FD9               	movwf	ReadEEPROM@GIE_t& (0+255),b
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;EEPROM.c: 37:  unsigned char d;;EEPROM.c: 40:  INTCONbits.GIE = 0;
 11166  0127CA  9EF2               	bcf	intcon,7,c	;volatile
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;EEPROM.c: 41:  NVMCON1bits.NVMREG = 0;
 11170  0127CC  0E3F               	movlw	-193
 11171  0127CE  1677               	andwf	3959,f,c	;volsfr
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;EEPROM.c: 43:  NVMADR = address;
 11175  0127D0  C0D7  FF74         	movff	ReadEEPROM@address,3956	;volatile
 11176  0127D4  C0D8  FF75         	movff	ReadEEPROM@address+1,3957	;volatile
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;EEPROM.c: 46:  NVMCON1bits.RD = 1;
 11180  0127D8  8077               	bsf	3959,0,c	;volsfr
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;EEPROM.c: 47:  d = NVMDAT;
 11184  0127DA  CF76 F0DA          	movff	3958,ReadEEPROM@d	;volatile
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;EEPROM.c: 50:  NVMCON1bits.NVMREG = 2;
 11188  0127DE  5077               	movf	3959,w,c	;volsfr
 11189  0127E0  0B3F               	andlw	-193
 11190  0127E2  0980               	iorlw	128
 11191  0127E4  6E77               	movwf	3959,c	;volsfr
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;EEPROM.c: 51:  INTCONbits.GIE = GIE_t;
 11195  0127E6  B1D9               	btfsc	ReadEEPROM@GIE_t& (0+255),0,b
 11196  0127E8  D002               	bra	u6305
 11197  0127EA  9EF2               	bcf	intcon,7,c	;volatile
 11198  0127EC  D001               	bra	u6306
 11199  0127EE                     u6305:
 11200  0127EE  8EF2               	bsf	intcon,7,c	;volatile
 11201  0127F0                     u6306:
 11202                           
 11203                           ;EEPROM.c: 53:  return d;
 11204  0127F0  0100               	movlb	0	; () banked
 11205  0127F2  51DA               	movf	ReadEEPROM@d& (0+255),w,b
 11206  0127F4  0012               	return	
 11207  0127F6                     __end_of_ReadEEPROM:
 11208                           	opt stack 0
 11209                           tblptru	equ	0xFF8
 11210                           tblptrh	equ	0xFF7
 11211                           tblptrl	equ	0xFF6
 11212                           tablat	equ	0xFF5
 11213                           prodh	equ	0xFF4
 11214                           prodl	equ	0xFF3
 11215                           intcon	equ	0xFF2
 11216                           postinc0	equ	0xFEE
 11217                           wreg	equ	0xFE8
 11218                           indf1	equ	0xFE7
 11219                           postdec1	equ	0xFE5
 11220                           fsr1h	equ	0xFE2
 11221                           fsr1l	equ	0xFE1
 11222                           indf2	equ	0xFDF
 11223                           postinc2	equ	0xFDE
 11224                           postdec2	equ	0xFDD
 11225                           fsr2h	equ	0xFDA
 11226                           fsr2l	equ	0xFD9
 11227                           status	equ	0xFD8
 11228                           
 11229 ;; *************** function _InitApp2 *****************
 11230 ;; Defined at:
 11231 ;;		line 235 in file "user.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;		None
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;		None
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  1    wreg      void 
 11238 ;; Registers used:
 11239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11240 ;; Tracked objects:
 11241 ;;		On entry : 0/0
 11242 ;;		On exit  : 0/0
 11243 ;;		Unchanged: 0/0
 11244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11249 ;;Total ram usage:        0 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    6
 11252 ;; This function calls:
 11253 ;;		_ADCC_Initialize
 11254 ;;		_ConfigureOscillator
 11255 ;;		_EUSART2_Initialize
 11256 ;;		_EUSART5_Initialize
 11257 ;;		_InitMainBoardIO
 11258 ;;		_InitUiBoardIO
 11259 ;;		_PMD_Initialize
 11260 ;; This function is called by:
 11261 ;;		_main
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text38
 11266  012066                     __ptext38:
 11267                           	opt stack 0
 11268  012066                     _InitApp2:
 11269                           	opt stack 24
 11270                           
 11271                           ;user.c: 238:  PMD_Initialize();
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;incstack = 0
 11275  012066  EC93  F094         	call	_PMD_Initialize	;wreg free
 11276                           
 11277                           ;user.c: 239:  ConfigureOscillator();
 11278  01206A  ECB7  F094         	call	_ConfigureOscillator	;wreg free
 11279                           
 11280                           ;user.c: 240:  InitMainBoardIO();
 11281  01206E  ECE2  F094         	call	_InitMainBoardIO	;wreg free
 11282                           
 11283                           ;user.c: 241:  InitUiBoardIO();
 11284  012072  EC14  F08F         	call	_InitUiBoardIO	;wreg free
 11285                           
 11286                           ;user.c: 243:  RG1PPS = 0x0E;
 11287  012076  0E0E               	movlw	14
 11288  012078  010E               	movlb	14	; () banked
 11289  01207A  6F83               	movwf	131,b	;volatile
 11290                           
 11291                           ; BSR set to: 14
 11292                           ;user.c: 245:  RX2PPSbits.RX2PPS = 0x30;
 11293  01207C  9111               	bcf	17,0,b	;volatile
 11294  01207E  9311               	bcf	17,1,b	;volatile
 11295  012080  9511               	bcf	17,2,b	;volatile
 11296  012082  9711               	bcf	17,3,b	;volatile
 11297  012084  8911               	bsf	17,4,b	;volatile
 11298  012086  8B11               	bsf	17,5,b	;volatile
 11299                           
 11300                           ; BSR set to: 14
 11301                           ;user.c: 246:  RG3PPS = 0x14;
 11302  012088  0E14               	movlw	20
 11303  01208A  6F85               	movwf	133,b	;volatile
 11304                           
 11305                           ; BSR set to: 14
 11306                           ;user.c: 247:  RX5PPSbits.RX5PPS = 0x32;
 11307  01208C  9117               	bcf	23,0,b	;volatile
 11308  01208E  8317               	bsf	23,1,b	;volatile
 11309  012090  9517               	bcf	23,2,b	;volatile
 11310  012092  9717               	bcf	23,3,b	;volatile
 11311  012094  8917               	bsf	23,4,b	;volatile
 11312  012096  8B17               	bsf	23,5,b	;volatile
 11313                           
 11314                           ; BSR set to: 14
 11315                           ;user.c: 252:  TMR1CLK = 0x05;
 11316  012098  0E05               	movlw	5
 11317  01209A  6ED2               	movwf	4050,c	;volatile
 11318                           
 11319                           ; BSR set to: 14
 11320                           ;user.c: 253:  T1CON = 0x01;
 11321  01209C  0E01               	movlw	1
 11322  01209E  6ECF               	movwf	4047,c	;volatile
 11323                           
 11324                           ; BSR set to: 14
 11325                           ;user.c: 255:  TMR3CLK = 0x05;
 11326  0120A0  0E05               	movlw	5
 11327  0120A2  6ECC               	movwf	4044,c	;volatile
 11328                           
 11329                           ; BSR set to: 14
 11330                           ;user.c: 256:  T3CON = 0x01;
 11331  0120A4  0E01               	movlw	1
 11332  0120A6  6EC9               	movwf	4041,c	;volatile
 11333                           
 11334                           ; BSR set to: 14
 11335                           ;user.c: 258:  FVRCON = 0x82;
 11336  0120A8  0E82               	movlw	130
 11337  0120AA  6FC4               	movwf	196,b	;volatile
 11338                           
 11339                           ; BSR set to: 14
 11340                           ;user.c: 259:  ADCC_Initialize();
 11341  0120AC  EC92  F092         	call	_ADCC_Initialize	;wreg free
 11342                           
 11343                           ;user.c: 261:  EUSART5_Initialize();
 11344  0120B0  EC9F  F094         	call	_EUSART5_Initialize	;wreg free
 11345                           
 11346                           ;user.c: 262:  EUSART2_Initialize();
 11347  0120B4  ECAB  F094         	call	_EUSART2_Initialize	;wreg free
 11348                           
 11349                           ;user.c: 266:  INTCONbits.IPEN = 1;
 11350  0120B8  8AF2               	bsf	intcon,5,c	;volatile
 11351                           
 11352                           ;user.c: 269:  IPR3bits.RC2IP = 1;
 11353  0120BA  010E               	movlb	14	; () banked
 11354  0120BC  8F22               	bsf	34,7,b	;volatile
 11355                           
 11356                           ; BSR set to: 14
 11357                           ;user.c: 270:  PIE3bits.RC2IE = 1;
 11358  0120BE  8F2C               	bsf	44,7,b	;volatile
 11359                           
 11360                           ; BSR set to: 14
 11361                           ;user.c: 271:  IPR3bits.TX2IP = 0;
 11362  0120C0  9D22               	bcf	34,6,b	;volatile
 11363                           
 11364                           ; BSR set to: 14
 11365                           ;user.c: 272:  PIE3bits.TX2IE = 1;
 11366  0120C2  8D2C               	bsf	44,6,b	;volatile
 11367                           
 11368                           ; BSR set to: 14
 11369                           ;user.c: 273:  IPR4bits.RC5IP = 1;
 11370  0120C4  8B23               	bsf	35,5,b	;volatile
 11371                           
 11372                           ; BSR set to: 14
 11373                           ;user.c: 274:  PIE4bits.RC5IE = 1;
 11374  0120C6  8B2D               	bsf	45,5,b	;volatile
 11375                           
 11376                           ; BSR set to: 14
 11377                           ;user.c: 275:  IPR4bits.TX5IP = 0;
 11378  0120C8  9923               	bcf	35,4,b	;volatile
 11379                           
 11380                           ; BSR set to: 14
 11381                           ;user.c: 276:  PIE4bits.TX5IE = 1;
 11382  0120CA  892D               	bsf	45,4,b	;volatile
 11383                           
 11384                           ; BSR set to: 14
 11385                           ;user.c: 279:  IPR5bits.TMR1IP = 1;
 11386  0120CC  8124               	bsf	36,0,b	;volatile
 11387                           
 11388                           ; BSR set to: 14
 11389                           ;user.c: 280:  PIE5bits.TMR1IE = 1;
 11390  0120CE  812E               	bsf	46,0,b	;volatile
 11391                           
 11392                           ; BSR set to: 14
 11393                           ;user.c: 281:  IPR5bits.TMR3IP = 0;
 11394  0120D0  9524               	bcf	36,2,b	;volatile
 11395                           
 11396                           ; BSR set to: 14
 11397                           ;user.c: 282:  PIE5bits.TMR3IE = 1;
 11398  0120D2  852E               	bsf	46,2,b	;volatile
 11399                           
 11400                           ; BSR set to: 14
 11401                           ;user.c: 283:  INTCONbits.PEIE = 1;
 11402  0120D4  8CF2               	bsf	intcon,6,c	;volatile
 11403                           
 11404                           ; BSR set to: 14
 11405                           ;user.c: 287:  (LATA4=!0);
 11406  0120D6  8879               	bsf	3961,4,c	;volatile
 11407                           
 11408                           ; BSR set to: 14
 11409                           ;user.c: 288:  (TRISF2=1);
 11410  0120D8  8486               	bsf	3974,2,c	;volatile
 11411                           
 11412                           ; BSR set to: 14
 11413  0120DA  0012               	return		;funcret
 11414  0120DC                     __end_of_InitApp2:
 11415                           	opt stack 0
 11416                           tblptru	equ	0xFF8
 11417                           tblptrh	equ	0xFF7
 11418                           tblptrl	equ	0xFF6
 11419                           tablat	equ	0xFF5
 11420                           prodh	equ	0xFF4
 11421                           prodl	equ	0xFF3
 11422                           intcon	equ	0xFF2
 11423                           postinc0	equ	0xFEE
 11424                           wreg	equ	0xFE8
 11425                           indf1	equ	0xFE7
 11426                           postdec1	equ	0xFE5
 11427                           fsr1h	equ	0xFE2
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function _PMD_Initialize *****************
 11437 ;; Defined at:
 11438 ;;		line 112 in file "user.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;		None
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      void 
 11445 ;; Registers used:
 11446 ;;		wreg, status,2
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11456 ;;Total ram usage:        0 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    5
 11459 ;; This function calls:
 11460 ;;		Nothing
 11461 ;; This function is called by:
 11462 ;;		_InitApp2
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           	psect	text39
 11467  012926                     __ptext39:
 11468                           	opt stack 0
 11469  012926                     _PMD_Initialize:
 11470                           	opt stack 24
 11471                           
 11472                           ;user.c: 115:  PMD0 = 0x3a;
 11473                           
 11474                           ; BSR set to: 14
 11475                           ;incstack = 0
 11476  012926  0E3A               	movlw	58
 11477  012928  010E               	movlb	14	; () banked
 11478  01292A  6F4C               	movwf	76,b	;volatile
 11479                           
 11480                           ;user.c: 117:  PMD1 = 0xf5;
 11481  01292C  0EF5               	movlw	245
 11482  01292E  6F4D               	movwf	77,b	;volatile
 11483                           
 11484                           ; BSR set to: 14
 11485                           ;user.c: 119:  PMD2 = 0xff;
 11486  012930  694E               	setf	78,b	;volatile
 11487                           
 11488                           ;user.c: 121:  PMD3 = 0xdf;
 11489  012932  0EDF               	movlw	223
 11490  012934  6F4F               	movwf	79,b	;volatile
 11491                           
 11492                           ; BSR set to: 14
 11493                           ;user.c: 123:  PMD4 = 0xff;
 11494  012936  6950               	setf	80,b	;volatile
 11495                           
 11496                           ;user.c: 125:  PMD5 = 0xb7;
 11497  012938  0EB7               	movlw	183
 11498  01293A  6F51               	movwf	81,b	;volatile
 11499                           
 11500                           ; BSR set to: 14
 11501  01293C  0012               	return		;funcret
 11502  01293E                     __end_of_PMD_Initialize:
 11503                           	opt stack 0
 11504                           tblptru	equ	0xFF8
 11505                           tblptrh	equ	0xFF7
 11506                           tblptrl	equ	0xFF6
 11507                           tablat	equ	0xFF5
 11508                           prodh	equ	0xFF4
 11509                           prodl	equ	0xFF3
 11510                           intcon	equ	0xFF2
 11511                           postinc0	equ	0xFEE
 11512                           wreg	equ	0xFE8
 11513                           indf1	equ	0xFE7
 11514                           postdec1	equ	0xFE5
 11515                           fsr1h	equ	0xFE2
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function _InitUiBoardIO *****************
 11525 ;; Defined at:
 11526 ;;		line 84 in file "swMatrix.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;		None
 11529 ;; Auto vars:     Size  Location     Type
 11530 ;;  c               1    0[BANK0 ] unsigned char 
 11531 ;; Return value:  Size  Location     Type
 11532 ;;                  1    wreg      void 
 11533 ;; Registers used:
 11534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11535 ;; Tracked objects:
 11536 ;;		On entry : 0/0
 11537 ;;		On exit  : 0/0
 11538 ;;		Unchanged: 0/0
 11539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11543 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11544 ;;Total ram usage:        1 bytes
 11545 ;; Hardware stack levels used:    1
 11546 ;; Hardware stack levels required when called:    5
 11547 ;; This function calls:
 11548 ;;		Nothing
 11549 ;; This function is called by:
 11550 ;;		_InitApp2
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554                           	psect	text40
 11555  011E28                     __ptext40:
 11556                           	opt stack 0
 11557  011E28                     _InitUiBoardIO:
 11558                           	opt stack 24
 11559                           
 11560                           ;swMatrix.c: 86:  unsigned char c;;swMatrix.c: 88:  TRISD |= 0x03;
 11561                           
 11562                           ; BSR set to: 14
 11563                           ;incstack = 0
 11564  011E28  0E03               	movlw	3
 11565  011E2A  1284               	iorwf	3972,f,c	;volatile
 11566                           
 11567                           ;swMatrix.c: 89:  TRISB = 0xff;
 11568  011E2C  6882               	setf	3970,c	;volatile
 11569                           
 11570                           ;swMatrix.c: 90:  TRISC = 0x00;
 11571  011E2E  0E00               	movlw	0
 11572  011E30  6E83               	movwf	3971,c	;volatile
 11573                           
 11574                           ;swMatrix.c: 91:  TRISE = 0xf0;
 11575  011E32  0EF0               	movlw	240
 11576  011E34  6E85               	movwf	3973,c	;volatile
 11577                           
 11578                           ;swMatrix.c: 93:  WPUB = 0xff;
 11579  011E36  010E               	movlb	14	; () banked
 11580  011E38  6999               	setf	153,b	;volatile
 11581                           
 11582                           ; BSR set to: 14
 11583                           ;swMatrix.c: 94:  WPUC = 0x00;
 11584  011E3A  0E00               	movlw	0
 11585  011E3C  6FA1               	movwf	161,b	;volatile
 11586                           
 11587                           ; BSR set to: 14
 11588                           ;swMatrix.c: 95:  WPUE = 0xf0;
 11589  011E3E  0EF0               	movlw	240
 11590  011E40  6FAE               	movwf	174,b	;volatile
 11591                           
 11592                           ; BSR set to: 14
 11593                           ;swMatrix.c: 105:  for (c = 0; c < 6; c++)
 11594  011E42  0E00               	movlw	0
 11595  011E44  0100               	movlb	0	; () banked
 11596  011E46  6FD7               	movwf	InitUiBoardIO@c& (0+255),b
 11597  011E48                     l6287:
 11598                           
 11599                           ; BSR set to: 0
 11600  011E48  0E05               	movlw	5
 11601  011E4A  65D7               	cpfsgt	InitUiBoardIO@c& (0+255),b
 11602  011E4C  D001               	goto	l892
 11603  011E4E  D00E               	goto	u5650
 11604  011E50                     l892:
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;swMatrix.c: 106:  {;swMatrix.c: 107:   sw[c] = 0;
 11608                           
 11609                           ; BSR set to: 0
 11610  011E50  51D7               	movf	InitUiBoardIO@c& (0+255),w,b
 11611  011E52  0D02               	mullw	2
 11612  011E54  0E60               	movlw	low _sw
 11613  011E56  24F3               	addwf	prodl,w,c
 11614  011E58  6ED9               	movwf	fsr2l,c
 11615  011E5A  0E00               	movlw	high _sw
 11616  011E5C  20F4               	addwfc	prodh,w,c
 11617  011E5E  6EDA               	movwf	fsr2h,c
 11618  011E60  0E00               	movlw	0
 11619  011E62  6EDE               	movwf	postinc2,c
 11620  011E64  0E00               	movlw	0
 11621  011E66  6EDD               	movwf	postdec2,c
 11622                           
 11623                           ; BSR set to: 0
 11624                           ;swMatrix.c: 108:  }
 11625  011E68  2BD7               	incf	InitUiBoardIO@c& (0+255),f,b
 11626  011E6A  D7EE               	goto	l6287
 11627  011E6C                     u5650:
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;swMatrix.c: 109:  for (c = 0; c < 10; c++)
 11631                           
 11632                           ; BSR set to: 0
 11633  011E6C  0E00               	movlw	0
 11634  011E6E  6FD7               	movwf	InitUiBoardIO@c& (0+255),b
 11635  011E70                     l6299:
 11636                           
 11637                           ; BSR set to: 0
 11638  011E70  0E09               	movlw	9
 11639  011E72  65D7               	cpfsgt	InitUiBoardIO@c& (0+255),b
 11640  011E74  D001               	goto	l894
 11641  011E76  0012               	return	
 11642  011E78                     l894:
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;swMatrix.c: 110:  {;swMatrix.c: 111:   mSw[c].count = 0;
 11646                           
 11647                           ; BSR set to: 0
 11648  011E78  51D7               	movf	InitUiBoardIO@c& (0+255),w,b
 11649  011E7A  0D07               	mullw	7
 11650  011E7C  0E8D               	movlw	low _mSw
 11651  011E7E  24F3               	addwf	prodl,w,c
 11652  011E80  6ED9               	movwf	fsr2l,c
 11653  011E82  0E00               	movlw	high _mSw
 11654  011E84  20F4               	addwfc	prodh,w,c
 11655  011E86  6EDA               	movwf	fsr2h,c
 11656  011E88  0E00               	movlw	0
 11657  011E8A  6EDF               	movwf	indf2,c
 11658                           
 11659                           ;swMatrix.c: 112:   mSw[c].num = 0xff;
 11660  011E8C  51D7               	movf	InitUiBoardIO@c& (0+255),w,b
 11661  011E8E  0D07               	mullw	7
 11662  011E90  0E02               	movlw	2
 11663  011E92  26F3               	addwf	prodl,f,c
 11664  011E94  0E00               	movlw	0
 11665  011E96  22F4               	addwfc	prodh,f,c
 11666  011E98  0E8D               	movlw	low _mSw
 11667  011E9A  24F3               	addwf	prodl,w,c
 11668  011E9C  6ED9               	movwf	fsr2l,c
 11669  011E9E  0E00               	movlw	high _mSw
 11670  011EA0  20F4               	addwfc	prodh,w,c
 11671  011EA2  6EDA               	movwf	fsr2h,c
 11672  011EA4  0EFF               	movlw	255
 11673  011EA6  6EDF               	movwf	indf2,c
 11674                           
 11675                           ;swMatrix.c: 113:   mSw[c].kc = 0;
 11676  011EA8  51D7               	movf	InitUiBoardIO@c& (0+255),w,b
 11677  011EAA  0D07               	mullw	7
 11678  011EAC  0E05               	movlw	5
 11679  011EAE  26F3               	addwf	prodl,f,c
 11680  011EB0  0E00               	movlw	0
 11681  011EB2  22F4               	addwfc	prodh,f,c
 11682  011EB4  0E8D               	movlw	low _mSw
 11683  011EB6  24F3               	addwf	prodl,w,c
 11684  011EB8  6ED9               	movwf	fsr2l,c
 11685  011EBA  0E00               	movlw	high _mSw
 11686  011EBC  20F4               	addwfc	prodh,w,c
 11687  011EBE  6EDA               	movwf	fsr2h,c
 11688  011EC0  0E00               	movlw	0
 11689  011EC2  6EDE               	movwf	postinc2,c
 11690  011EC4  0E00               	movlw	0
 11691  011EC6  6EDD               	movwf	postdec2,c
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;swMatrix.c: 114:  }
 11695  011EC8  2BD7               	incf	InitUiBoardIO@c& (0+255),f,b
 11696  011ECA  D7D2               	goto	l6299
 11697  011ECC                     __end_of_InitUiBoardIO:
 11698                           	opt stack 0
 11699                           tblptru	equ	0xFF8
 11700                           tblptrh	equ	0xFF7
 11701                           tblptrl	equ	0xFF6
 11702                           tablat	equ	0xFF5
 11703                           prodh	equ	0xFF4
 11704                           prodl	equ	0xFF3
 11705                           intcon	equ	0xFF2
 11706                           postinc0	equ	0xFEE
 11707                           wreg	equ	0xFE8
 11708                           indf1	equ	0xFE7
 11709                           postdec1	equ	0xFE5
 11710                           fsr1h	equ	0xFE2
 11711                           fsr1l	equ	0xFE1
 11712                           indf2	equ	0xFDF
 11713                           postinc2	equ	0xFDE
 11714                           postdec2	equ	0xFDD
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function _InitMainBoardIO *****************
 11720 ;; Defined at:
 11721 ;;		line 174 in file "user.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;		None
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;		None
 11726 ;; Return value:  Size  Location     Type
 11727 ;;                  1    wreg      void 
 11728 ;; Registers used:
 11729 ;;		wreg, status,2
 11730 ;; Tracked objects:
 11731 ;;		On entry : 0/0
 11732 ;;		On exit  : 0/0
 11733 ;;		Unchanged: 0/0
 11734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11739 ;;Total ram usage:        0 bytes
 11740 ;; Hardware stack levels used:    1
 11741 ;; Hardware stack levels required when called:    5
 11742 ;; This function calls:
 11743 ;;		Nothing
 11744 ;; This function is called by:
 11745 ;;		_InitApp2
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           	psect	text41
 11750  0129C4                     __ptext41:
 11751                           	opt stack 0
 11752  0129C4                     _InitMainBoardIO:
 11753                           	opt stack 24
 11754                           
 11755                           ;user.c: 176:  ANSELD = 0x00;
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;incstack = 0
 11759  0129C4  0E00               	movlw	0
 11760  0129C6  010E               	movlb	14	; () banked
 11761  0129C8  6FA7               	movwf	167,b	;volatile
 11762                           
 11763                           ;user.c: 177:  ANSELA = 0x01;
 11764  0129CA  0E01               	movlw	1
 11765  0129CC  6F92               	movwf	146,b	;volatile
 11766                           
 11767                           ;user.c: 178:  ANSELF = 0x00;
 11768  0129CE  0E00               	movlw	0
 11769  0129D0  6FB4               	movwf	180,b	;volatile
 11770                           
 11771                           ;user.c: 179:  ANSELG = 0x00;
 11772  0129D2  0E00               	movlw	0
 11773  0129D4  6FBC               	movwf	188,b	;volatile
 11774                           
 11775                           ; BSR set to: 14
 11776  0129D6  0012               	return		;funcret
 11777  0129D8                     __end_of_InitMainBoardIO:
 11778                           	opt stack 0
 11779                           tblptru	equ	0xFF8
 11780                           tblptrh	equ	0xFF7
 11781                           tblptrl	equ	0xFF6
 11782                           tablat	equ	0xFF5
 11783                           prodh	equ	0xFF4
 11784                           prodl	equ	0xFF3
 11785                           intcon	equ	0xFF2
 11786                           postinc0	equ	0xFEE
 11787                           wreg	equ	0xFE8
 11788                           indf1	equ	0xFE7
 11789                           postdec1	equ	0xFE5
 11790                           fsr1h	equ	0xFE2
 11791                           fsr1l	equ	0xFE1
 11792                           indf2	equ	0xFDF
 11793                           postinc2	equ	0xFDE
 11794                           postdec2	equ	0xFDD
 11795                           fsr2h	equ	0xFDA
 11796                           fsr2l	equ	0xFD9
 11797                           status	equ	0xFD8
 11798                           
 11799 ;; *************** function _EUSART5_Initialize *****************
 11800 ;; Defined at:
 11801 ;;		line 53 in file "eusart5.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;		None
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;		None
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      void 
 11808 ;; Registers used:
 11809 ;;		wreg, status,2
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11819 ;;Total ram usage:        0 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    5
 11822 ;; This function calls:
 11823 ;;		Nothing
 11824 ;; This function is called by:
 11825 ;;		_InitApp2
 11826 ;; This function uses a non-reentrant model
 11827 ;;
 11828                           
 11829                           	psect	text42
 11830  01293E                     __ptext42:
 11831                           	opt stack 0
 11832  01293E                     _EUSART5_Initialize:
 11833                           	opt stack 24
 11834                           
 11835                           ;eusart5.c: 58:  BAUD5CON = 0x18;
 11836                           
 11837                           ; BSR set to: 14
 11838                           ;incstack = 0
 11839  01293E  0E18               	movlw	24
 11840  012940  010E               	movlb	14	; () banked
 11841  012942  6FE2               	movwf	226,b	;volatile
 11842                           
 11843                           ;eusart5.c: 61:  RC5STA = 0x90;
 11844  012944  0E90               	movlw	144
 11845  012946  6FE0               	movwf	224,b	;volatile
 11846                           
 11847                           ;eusart5.c: 64:  TX5STA = 0x24;
 11848  012948  0E24               	movlw	36
 11849  01294A  6FE1               	movwf	225,b	;volatile
 11850                           
 11851                           ;eusart5.c: 67:  SP5BRGL = 0x22;
 11852  01294C  0E22               	movlw	34
 11853  01294E  6FDE               	movwf	222,b	;volatile
 11854                           
 11855                           ;eusart5.c: 70:  SP5BRGH = 0x00;
 11856  012950  0E00               	movlw	0
 11857  012952  6FDF               	movwf	223,b	;volatile
 11858                           
 11859                           ; BSR set to: 14
 11860  012954  0012               	return		;funcret
 11861  012956                     __end_of_EUSART5_Initialize:
 11862                           	opt stack 0
 11863                           tblptru	equ	0xFF8
 11864                           tblptrh	equ	0xFF7
 11865                           tblptrl	equ	0xFF6
 11866                           tablat	equ	0xFF5
 11867                           prodh	equ	0xFF4
 11868                           prodl	equ	0xFF3
 11869                           intcon	equ	0xFF2
 11870                           postinc0	equ	0xFEE
 11871                           wreg	equ	0xFE8
 11872                           indf1	equ	0xFE7
 11873                           postdec1	equ	0xFE5
 11874                           fsr1h	equ	0xFE2
 11875                           fsr1l	equ	0xFE1
 11876                           indf2	equ	0xFDF
 11877                           postinc2	equ	0xFDE
 11878                           postdec2	equ	0xFDD
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function _EUSART2_Initialize *****************
 11884 ;; Defined at:
 11885 ;;		line 52 in file "eusart2.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;		None
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      void 
 11892 ;; Registers used:
 11893 ;;		wreg, status,2
 11894 ;; Tracked objects:
 11895 ;;		On entry : 0/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11903 ;;Total ram usage:        0 bytes
 11904 ;; Hardware stack levels used:    1
 11905 ;; Hardware stack levels required when called:    5
 11906 ;; This function calls:
 11907 ;;		Nothing
 11908 ;; This function is called by:
 11909 ;;		_InitApp2
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text43
 11914  012956                     __ptext43:
 11915                           	opt stack 0
 11916  012956                     _EUSART2_Initialize:
 11917                           	opt stack 24
 11918                           
 11919                           ;eusart2.c: 57:  BAUD2CON = 0x08;
 11920                           
 11921                           ; BSR set to: 14
 11922                           ;incstack = 0
 11923  012956  0E08               	movlw	8
 11924  012958  010E               	movlb	14	; () banked
 11925  01295A  6FF7               	movwf	247,b	;volatile
 11926                           
 11927                           ;eusart2.c: 60:  RC2STA = 0x90;
 11928  01295C  0E90               	movlw	144
 11929  01295E  6FF5               	movwf	245,b	;volatile
 11930                           
 11931                           ;eusart2.c: 63:  TX2STA = 0x24;
 11932  012960  0E24               	movlw	36
 11933  012962  6FF6               	movwf	246,b	;volatile
 11934                           
 11935                           ;eusart2.c: 66:  SP2BRGL = 0x22;
 11936  012964  0E22               	movlw	34
 11937  012966  6FF3               	movwf	243,b	;volatile
 11938                           
 11939                           ;eusart2.c: 69:  SP2BRGH = 0x00;
 11940  012968  0E00               	movlw	0
 11941  01296A  6FF4               	movwf	244,b	;volatile
 11942                           
 11943                           ; BSR set to: 14
 11944  01296C  0012               	return		;funcret
 11945  01296E                     __end_of_EUSART2_Initialize:
 11946                           	opt stack 0
 11947                           tblptru	equ	0xFF8
 11948                           tblptrh	equ	0xFF7
 11949                           tblptrl	equ	0xFF6
 11950                           tablat	equ	0xFF5
 11951                           prodh	equ	0xFF4
 11952                           prodl	equ	0xFF3
 11953                           intcon	equ	0xFF2
 11954                           postinc0	equ	0xFEE
 11955                           wreg	equ	0xFE8
 11956                           indf1	equ	0xFE7
 11957                           postdec1	equ	0xFE5
 11958                           fsr1h	equ	0xFE2
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           postdec2	equ	0xFDD
 11963                           fsr2h	equ	0xFDA
 11964                           fsr2l	equ	0xFD9
 11965                           status	equ	0xFD8
 11966                           
 11967 ;; *************** function _ConfigureOscillator *****************
 11968 ;; Defined at:
 11969 ;;		line 14 in file "system.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;		None
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;		None
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  1    wreg      void 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11987 ;;Total ram usage:        0 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    5
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		_InitApp2
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text44
 11998  01296E                     __ptext44:
 11999                           	opt stack 0
 12000  01296E                     _ConfigureOscillator:
 12001                           	opt stack 24
 12002                           
 12003                           ;system.c: 24:     OSCCON1 = 0x60;
 12004                           
 12005                           ; BSR set to: 14
 12006                           ;incstack = 0
 12007  01296E  0E60               	movlw	96
 12008  012970  010E               	movlb	14	; () banked
 12009  012972  6F43               	movwf	67,b	;volatile
 12010                           
 12011                           ;system.c: 26:     OSCCON3 = 0x00;
 12012  012974  0E00               	movlw	0
 12013  012976  6F45               	movwf	69,b	;volatile
 12014                           
 12015                           ;system.c: 28:     OSCEN = 0x00;
 12016  012978  0E00               	movlw	0
 12017  01297A  6F47               	movwf	71,b	;volatile
 12018                           
 12019                           ;system.c: 30:     OSCFRQ = 0x05;
 12020  01297C  0E05               	movlw	5
 12021  01297E  6F49               	movwf	73,b	;volatile
 12022                           
 12023                           ;system.c: 32:     OSCTUNE = 0x00;
 12024  012980  0E00               	movlw	0
 12025  012982  6F48               	movwf	72,b	;volatile
 12026                           
 12027                           ; BSR set to: 14
 12028  012984  0012               	return		;funcret
 12029  012986                     __end_of_ConfigureOscillator:
 12030                           	opt stack 0
 12031                           tblptru	equ	0xFF8
 12032                           tblptrh	equ	0xFF7
 12033                           tblptrl	equ	0xFF6
 12034                           tablat	equ	0xFF5
 12035                           prodh	equ	0xFF4
 12036                           prodl	equ	0xFF3
 12037                           intcon	equ	0xFF2
 12038                           postinc0	equ	0xFEE
 12039                           wreg	equ	0xFE8
 12040                           indf1	equ	0xFE7
 12041                           postdec1	equ	0xFE5
 12042                           fsr1h	equ	0xFE2
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           fsr2h	equ	0xFDA
 12048                           fsr2l	equ	0xFD9
 12049                           status	equ	0xFD8
 12050                           
 12051 ;; *************** function _ADCC_Initialize *****************
 12052 ;; Defined at:
 12053 ;;		line 61 in file "adcc.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;		None
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;		None
 12058 ;; Return value:  Size  Location     Type
 12059 ;;                  1    wreg      void 
 12060 ;; Registers used:
 12061 ;;		wreg, status,2
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12071 ;;Total ram usage:        0 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    5
 12074 ;; This function calls:
 12075 ;;		Nothing
 12076 ;; This function is called by:
 12077 ;;		_InitApp2
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           	psect	text45
 12082  012524                     __ptext45:
 12083                           	opt stack 0
 12084  012524                     _ADCC_Initialize:
 12085                           	opt stack 24
 12086                           
 12087                           ;adcc.c: 65:  ADLTHL = 0x00;
 12088                           
 12089                           ; BSR set to: 14
 12090                           ;incstack = 0
 12091  012524  0E00               	movlw	0
 12092  012526  6E6A               	movwf	3946,c	;volatile
 12093                           
 12094                           ;adcc.c: 67:  ADLTHH = 0x00;
 12095  012528  0E00               	movlw	0
 12096  01252A  6E6B               	movwf	3947,c	;volatile
 12097                           
 12098                           ;adcc.c: 69:  ADUTHL = 0x00;
 12099  01252C  0E00               	movlw	0
 12100  01252E  6E6C               	movwf	3948,c	;volatile
 12101                           
 12102                           ;adcc.c: 71:  ADUTHH = 0x00;
 12103  012530  0E00               	movlw	0
 12104  012532  6E6D               	movwf	3949,c	;volatile
 12105                           
 12106                           ;adcc.c: 73:  ADSTPTL = 0x00;
 12107  012534  0E00               	movlw	0
 12108  012536  6E68               	movwf	3944,c	;volatile
 12109                           
 12110                           ;adcc.c: 75:  ADSTPTH = 0x00;
 12111  012538  0E00               	movlw	0
 12112  01253A  6E69               	movwf	3945,c	;volatile
 12113                           
 12114                           ;adcc.c: 77:  ADRPT = 0x00;
 12115  01253C  0E00               	movlw	0
 12116  01253E  6E66               	movwf	3942,c	;volatile
 12117                           
 12118                           ;adcc.c: 79:  ADPCH = 0x00;
 12119  012540  0E00               	movlw	0
 12120  012542  010F               	movlb	15	; () banked
 12121  012544  6F5F               	movwf	95,b	;volatile
 12122                           
 12123                           ;adcc.c: 81:  ADCAP = 0x00;
 12124  012546  0E00               	movlw	0
 12125  012548  6F5D               	movwf	93,b	;volatile
 12126                           
 12127                           ;adcc.c: 83:  ADCON1 = 0x00;
 12128  01254A  0E00               	movlw	0
 12129  01254C  6F59               	movwf	89,b	;volatile
 12130                           
 12131                           ;adcc.c: 85:  ADCON2 = 0x00;
 12132  01254E  0E00               	movlw	0
 12133  012550  6F5A               	movwf	90,b	;volatile
 12134                           
 12135                           ;adcc.c: 87:  ADCON3 = 0x00;
 12136  012552  0E00               	movlw	0
 12137  012554  6F5B               	movwf	91,b	;volatile
 12138                           
 12139                           ; BSR set to: 15
 12140                           ;adcc.c: 88:  ADACQ = 255;
 12141  012556  695C               	setf	92,b	;volatile
 12142                           
 12143                           ;adcc.c: 90:  ADSTAT = 0x00;
 12144  012558  0E00               	movlw	0
 12145  01255A  6E65               	movwf	3941,c	;volatile
 12146                           
 12147                           ;adcc.c: 92:  ADREF = 0x03;
 12148  01255C  0E03               	movlw	3
 12149  01255E  6F58               	movwf	88,b	;volatile
 12150                           
 12151                           ;adcc.c: 94:  ADACT = 0x00;
 12152  012560  0E00               	movlw	0
 12153  012562  6F56               	movwf	86,b	;volatile
 12154                           
 12155                           ;adcc.c: 96:  ADCLK = 0x00;
 12156  012564  0E00               	movlw	0
 12157  012566  6F57               	movwf	87,b	;volatile
 12158                           
 12159                           ;adcc.c: 98:  ADCON0 = 0x94;
 12160  012568  0E94               	movlw	148
 12161  01256A  6E60               	movwf	3936,c	;volatile
 12162                           
 12163                           ; BSR set to: 15
 12164  01256C  0012               	return		;funcret
 12165  01256E                     __end_of_ADCC_Initialize:
 12166                           	opt stack 0
 12167                           tblptru	equ	0xFF8
 12168                           tblptrh	equ	0xFF7
 12169                           tblptrl	equ	0xFF6
 12170                           tablat	equ	0xFF5
 12171                           prodh	equ	0xFF4
 12172                           prodl	equ	0xFF3
 12173                           intcon	equ	0xFF2
 12174                           postinc0	equ	0xFEE
 12175                           wreg	equ	0xFE8
 12176                           indf1	equ	0xFE7
 12177                           postdec1	equ	0xFE5
 12178                           fsr1h	equ	0xFE2
 12179                           fsr1l	equ	0xFE1
 12180                           indf2	equ	0xFDF
 12181                           postinc2	equ	0xFDE
 12182                           postdec2	equ	0xFDD
 12183                           fsr2h	equ	0xFDA
 12184                           fsr2l	equ	0xFD9
 12185                           status	equ	0xFD8
 12186                           
 12187 ;; *************** function _InitApp *****************
 12188 ;; Defined at:
 12189 ;;		line 226 in file "user.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;		None
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;		None
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  1    wreg      void 
 12196 ;; Registers used:
 12197 ;;		wreg, status,2, cstack
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12207 ;;Total ram usage:        0 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:    6
 12210 ;; This function calls:
 12211 ;;		_PMD_AllOff
 12212 ;;		_StandbyMainBoardIO
 12213 ;;		_StandbyUiBoardIO
 12214 ;; This function is called by:
 12215 ;;		_main
 12216 ;; This function uses a non-reentrant model
 12217 ;;
 12218                           
 12219                           	psect	text46
 12220  012986                     __ptext46:
 12221                           	opt stack 0
 12222  012986                     _InitApp:
 12223                           	opt stack 24
 12224                           
 12225                           ;user.c: 228:  NVMCON1bits.NVMREG = 2;
 12226                           
 12227                           ; BSR set to: 15
 12228                           ;incstack = 0
 12229  012986  5077               	movf	3959,w,c	;volsfr
 12230  012988  0B3F               	andlw	-193
 12231  01298A  0980               	iorlw	128
 12232  01298C  6E77               	movwf	3959,c	;volsfr
 12233                           
 12234                           ;user.c: 230:  StandbyMainBoardIO();
 12235  01298E  ECE1  F090         	call	_StandbyMainBoardIO	;wreg free
 12236                           
 12237                           ;user.c: 231:  StandbyUiBoardIO();
 12238  012992  ECA1  F093         	call	_StandbyUiBoardIO	;wreg free
 12239                           
 12240                           ;user.c: 232:  PMD_AllOff();
 12241  012996  ECEC  F094         	call	_PMD_AllOff	;wreg free
 12242  01299A  0012               	return		;funcret
 12243  01299C                     __end_of_InitApp:
 12244                           	opt stack 0
 12245                           tblptru	equ	0xFF8
 12246                           tblptrh	equ	0xFF7
 12247                           tblptrl	equ	0xFF6
 12248                           tablat	equ	0xFF5
 12249                           prodh	equ	0xFF4
 12250                           prodl	equ	0xFF3
 12251                           intcon	equ	0xFF2
 12252                           postinc0	equ	0xFEE
 12253                           wreg	equ	0xFE8
 12254                           indf1	equ	0xFE7
 12255                           postdec1	equ	0xFE5
 12256                           fsr1h	equ	0xFE2
 12257                           fsr1l	equ	0xFE1
 12258                           indf2	equ	0xFDF
 12259                           postinc2	equ	0xFDE
 12260                           postdec2	equ	0xFDD
 12261                           fsr2h	equ	0xFDA
 12262                           fsr2l	equ	0xFD9
 12263                           status	equ	0xFD8
 12264                           
 12265 ;; *************** function _StandbyUiBoardIO *****************
 12266 ;; Defined at:
 12267 ;;		line 117 in file "swMatrix.c"
 12268 ;; Parameters:    Size  Location     Type
 12269 ;;		None
 12270 ;; Auto vars:     Size  Location     Type
 12271 ;;		None
 12272 ;; Return value:  Size  Location     Type
 12273 ;;                  1    wreg      void 
 12274 ;; Registers used:
 12275 ;;		wreg, status,2
 12276 ;; Tracked objects:
 12277 ;;		On entry : 0/0
 12278 ;;		On exit  : 0/0
 12279 ;;		Unchanged: 0/0
 12280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12285 ;;Total ram usage:        0 bytes
 12286 ;; Hardware stack levels used:    1
 12287 ;; Hardware stack levels required when called:    5
 12288 ;; This function calls:
 12289 ;;		Nothing
 12290 ;; This function is called by:
 12291 ;;		_InitApp
 12292 ;; This function uses a non-reentrant model
 12293 ;;
 12294                           
 12295                           	psect	text47
 12296  012742                     __ptext47:
 12297                           	opt stack 0
 12298  012742                     _StandbyUiBoardIO:
 12299                           	opt stack 24
 12300                           
 12301                           ;swMatrix.c: 121:  LATB = 0xff;
 12302                           
 12303                           ;incstack = 0
 12304  012742  687A               	setf	3962,c	;volatile
 12305                           
 12306                           ;swMatrix.c: 122:  LATC = 0x00;
 12307  012744  0E00               	movlw	0
 12308  012746  6E7B               	movwf	3963,c	;volatile
 12309                           
 12310                           ;swMatrix.c: 123:  LATE = 0xf0;
 12311  012748  0EF0               	movlw	240
 12312  01274A  6E7D               	movwf	3965,c	;volatile
 12313                           
 12314                           ;swMatrix.c: 125:  TRISB = 0xff;
 12315  01274C  6882               	setf	3970,c	;volatile
 12316                           
 12317                           ;swMatrix.c: 126:  TRISC = 0x00;
 12318  01274E  0E00               	movlw	0
 12319  012750  6E83               	movwf	3971,c	;volatile
 12320                           
 12321                           ;swMatrix.c: 127:  TRISE = 0xf0;
 12322  012752  0EF0               	movlw	240
 12323  012754  6E85               	movwf	3973,c	;volatile
 12324                           
 12325                           ;swMatrix.c: 129:  ANSELB = 0x00;
 12326  012756  0E00               	movlw	0
 12327  012758  010E               	movlb	14	; () banked
 12328  01275A  6F9A               	movwf	154,b	;volatile
 12329                           
 12330                           ;swMatrix.c: 130:  ANSELE = 0x00;
 12331  01275C  0E00               	movlw	0
 12332  01275E  6FAF               	movwf	175,b	;volatile
 12333                           
 12334                           ; BSR set to: 14
 12335                           ;swMatrix.c: 132:  WPUB = 0xff;
 12336  012760  6999               	setf	153,b	;volatile
 12337                           
 12338                           ;swMatrix.c: 133:  WPUC = 0x00;
 12339  012762  0E00               	movlw	0
 12340  012764  6FA1               	movwf	161,b	;volatile
 12341                           
 12342                           ;swMatrix.c: 134:  WPUE = 0xf0;
 12343  012766  0EF0               	movlw	240
 12344  012768  6FAE               	movwf	174,b	;volatile
 12345                           
 12346                           ; BSR set to: 14
 12347                           ;swMatrix.c: 136:  INLVLB = 0xff;
 12348  01276A  6996               	setf	150,b	;volatile
 12349                           
 12350                           ; BSR set to: 14
 12351                           ;swMatrix.c: 137:  INLVLC = 0xff;
 12352  01276C  699E               	setf	158,b	;volatile
 12353                           
 12354                           ; BSR set to: 14
 12355                           ;swMatrix.c: 138:  INLVLE = 0xff;
 12356  01276E  69AB               	setf	171,b	;volatile
 12357                           
 12358                           ; BSR set to: 14
 12359                           ;swMatrix.c: 140:  SLRCONB = 0xff;
 12360  012770  6997               	setf	151,b	;volatile
 12361                           
 12362                           ; BSR set to: 14
 12363                           ;swMatrix.c: 141:  SLRCONC = 0xff;
 12364  012772  699F               	setf	159,b	;volatile
 12365                           
 12366                           ; BSR set to: 14
 12367                           ;swMatrix.c: 142:  SLRCONE = 0xff;
 12368  012774  69AC               	setf	172,b	;volatile
 12369                           
 12370                           ;swMatrix.c: 144:  ODCONB = 0x00;
 12371  012776  0E00               	movlw	0
 12372  012778  6F98               	movwf	152,b	;volatile
 12373                           
 12374                           ; BSR set to: 14
 12375                           ;swMatrix.c: 145:  ODCONC = 0xff;
 12376  01277A  69A0               	setf	160,b	;volatile
 12377                           
 12378                           ;swMatrix.c: 146:  ODCONE = 0x00;
 12379  01277C  0E00               	movlw	0
 12380  01277E  6FAD               	movwf	173,b	;volatile
 12381                           
 12382                           ; BSR set to: 14
 12383  012780  0012               	return		;funcret
 12384  012782                     __end_of_StandbyUiBoardIO:
 12385                           	opt stack 0
 12386                           tblptru	equ	0xFF8
 12387                           tblptrh	equ	0xFF7
 12388                           tblptrl	equ	0xFF6
 12389                           tablat	equ	0xFF5
 12390                           prodh	equ	0xFF4
 12391                           prodl	equ	0xFF3
 12392                           intcon	equ	0xFF2
 12393                           postinc0	equ	0xFEE
 12394                           wreg	equ	0xFE8
 12395                           indf1	equ	0xFE7
 12396                           postdec1	equ	0xFE5
 12397                           fsr1h	equ	0xFE2
 12398                           fsr1l	equ	0xFE1
 12399                           indf2	equ	0xFDF
 12400                           postinc2	equ	0xFDE
 12401                           postdec2	equ	0xFDD
 12402                           fsr2h	equ	0xFDA
 12403                           fsr2l	equ	0xFD9
 12404                           status	equ	0xFD8
 12405                           
 12406 ;; *************** function _StandbyMainBoardIO *****************
 12407 ;; Defined at:
 12408 ;;		line 128 in file "user.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;		None
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;		None
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  1    wreg      void 
 12415 ;; Registers used:
 12416 ;;		wreg, status,2
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12426 ;;Total ram usage:        0 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    5
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_InitApp
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text48
 12437  0121C2                     __ptext48:
 12438                           	opt stack 0
 12439  0121C2                     _StandbyMainBoardIO:
 12440                           	opt stack 24
 12441                           
 12442                           ;user.c: 132:  LATD = 0x00;
 12443                           
 12444                           ; BSR set to: 14
 12445                           ;incstack = 0
 12446  0121C2  0E00               	movlw	0
 12447  0121C4  6E7C               	movwf	3964,c	;volatile
 12448                           
 12449                           ;user.c: 133:  LATA = 0x00;
 12450  0121C6  0E00               	movlw	0
 12451  0121C8  6E79               	movwf	3961,c	;volatile
 12452                           
 12453                           ;user.c: 134:  LATF = 0x05;
 12454  0121CA  0E05               	movlw	5
 12455  0121CC  6E7E               	movwf	3966,c	;volatile
 12456                           
 12457                           ;user.c: 135:  LATG = 0x02;
 12458  0121CE  0E02               	movlw	2
 12459  0121D0  6E7F               	movwf	3967,c	;volatile
 12460                           
 12461                           ;user.c: 136:  LATH = 0x00;
 12462  0121D2  0E00               	movlw	0
 12463  0121D4  6E80               	movwf	3968,c	;volatile
 12464                           
 12465                           ;user.c: 138:  TRISD = 0x43;
 12466  0121D6  0E43               	movlw	67
 12467  0121D8  6E84               	movwf	3972,c	;volatile
 12468                           
 12469                           ;user.c: 139:  TRISA = 0x01;
 12470  0121DA  0E01               	movlw	1
 12471  0121DC  6E81               	movwf	3969,c	;volatile
 12472                           
 12473                           ;user.c: 140:  TRISF = 0xee;
 12474  0121DE  0EEE               	movlw	238
 12475  0121E0  6E86               	movwf	3974,c	;volatile
 12476                           
 12477                           ;user.c: 141:  TRISG = 0x05;
 12478  0121E2  0E05               	movlw	5
 12479  0121E4  6E87               	movwf	3975,c	;volatile
 12480                           
 12481                           ;user.c: 142:  TRISH = 0x00;
 12482  0121E6  0E00               	movlw	0
 12483  0121E8  6E88               	movwf	3976,c	;volatile
 12484                           
 12485                           ;user.c: 144:  ANSELD = 0xbf;
 12486  0121EA  0EBF               	movlw	191
 12487  0121EC  010E               	movlb	14	; () banked
 12488  0121EE  6FA7               	movwf	167,b	;volatile
 12489                           
 12490                           ; BSR set to: 14
 12491                           ;user.c: 145:  ANSELA = 0xff;
 12492  0121F0  6992               	setf	146,b	;volatile
 12493                           
 12494                           ; BSR set to: 14
 12495                           ;user.c: 146:  ANSELF = 0xff;
 12496  0121F2  69B4               	setf	180,b	;volatile
 12497                           
 12498                           ; BSR set to: 14
 12499                           ;user.c: 147:  ANSELG = 0xff;
 12500  0121F4  69BC               	setf	188,b	;volatile
 12501                           
 12502                           ;user.c: 149:  WPUD = 0x40;
 12503  0121F6  0E40               	movlw	64
 12504  0121F8  6FA6               	movwf	166,b	;volatile
 12505                           
 12506                           ;user.c: 150:  WPUA = 0x00;
 12507  0121FA  0E00               	movlw	0
 12508  0121FC  6F91               	movwf	145,b	;volatile
 12509                           
 12510                           ;user.c: 151:  WPUF = 0x00;
 12511  0121FE  0E00               	movlw	0
 12512  012200  6FB3               	movwf	179,b	;volatile
 12513                           
 12514                           ;user.c: 152:  WPUG = 0x20;
 12515  012202  0E20               	movlw	32
 12516  012204  6FBB               	movwf	187,b	;volatile
 12517                           
 12518                           ;user.c: 153:  WPUH = 0x00;
 12519  012206  0E00               	movlw	0
 12520  012208  6FC0               	movwf	192,b	;volatile
 12521                           
 12522                           ; BSR set to: 14
 12523                           ;user.c: 155:  INLVLD = 0xff;
 12524  01220A  69A3               	setf	163,b	;volatile
 12525                           
 12526                           ; BSR set to: 14
 12527                           ;user.c: 156:  INLVLA = 0xff;
 12528  01220C  698E               	setf	142,b	;volatile
 12529                           
 12530                           ; BSR set to: 14
 12531                           ;user.c: 157:  INLVLF = 0xff;
 12532  01220E  69B0               	setf	176,b	;volatile
 12533                           
 12534                           ; BSR set to: 14
 12535                           ;user.c: 158:  INLVLG = 0xff;
 12536  012210  69B8               	setf	184,b	;volatile
 12537                           
 12538                           ; BSR set to: 14
 12539                           ;user.c: 159:  INLVLH = 0xff;
 12540  012212  69BD               	setf	189,b	;volatile
 12541                           
 12542                           ; BSR set to: 14
 12543                           ;user.c: 161:  SLRCOND = 0xff;
 12544  012214  69A4               	setf	164,b	;volatile
 12545                           
 12546                           ; BSR set to: 14
 12547                           ;user.c: 162:  SLRCONA = 0xff;
 12548  012216  698F               	setf	143,b	;volatile
 12549                           
 12550                           ; BSR set to: 14
 12551                           ;user.c: 163:  SLRCONF = 0xff;
 12552  012218  69B1               	setf	177,b	;volatile
 12553                           
 12554                           ; BSR set to: 14
 12555                           ;user.c: 164:  SLRCONG = 0xff;
 12556  01221A  69B9               	setf	185,b	;volatile
 12557                           
 12558                           ; BSR set to: 14
 12559                           ;user.c: 165:  SLRCONH = 0xff;
 12560  01221C  69BE               	setf	190,b	;volatile
 12561                           
 12562                           ;user.c: 167:  ODCOND = 0x00;
 12563  01221E  0E00               	movlw	0
 12564  012220  6FA5               	movwf	165,b	;volatile
 12565                           
 12566                           ;user.c: 168:  ODCONA = 0x00;
 12567  012222  0E00               	movlw	0
 12568  012224  6F90               	movwf	144,b	;volatile
 12569                           
 12570                           ;user.c: 169:  ODCONF = 0x01;
 12571  012226  0E01               	movlw	1
 12572  012228  6FB2               	movwf	178,b	;volatile
 12573                           
 12574                           ;user.c: 170:  ODCONG = 0x00;
 12575  01222A  0E00               	movlw	0
 12576  01222C  6FBA               	movwf	186,b	;volatile
 12577                           
 12578                           ;user.c: 171:  ODCONH = 0x00;
 12579  01222E  0E00               	movlw	0
 12580  012230  6FBF               	movwf	191,b	;volatile
 12581                           
 12582                           ; BSR set to: 14
 12583  012232  0012               	return		;funcret
 12584  012234                     __end_of_StandbyMainBoardIO:
 12585                           	opt stack 0
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           postinc0	equ	0xFEE
 12594                           wreg	equ	0xFE8
 12595                           indf1	equ	0xFE7
 12596                           postdec1	equ	0xFE5
 12597                           fsr1h	equ	0xFE2
 12598                           fsr1l	equ	0xFE1
 12599                           indf2	equ	0xFDF
 12600                           postinc2	equ	0xFDE
 12601                           postdec2	equ	0xFDD
 12602                           fsr2h	equ	0xFDA
 12603                           fsr2l	equ	0xFD9
 12604                           status	equ	0xFD8
 12605                           
 12606 ;; *************** function _PMD_AllOff *****************
 12607 ;; Defined at:
 12608 ;;		line 100 in file "user.c"
 12609 ;; Parameters:    Size  Location     Type
 12610 ;;		None
 12611 ;; Auto vars:     Size  Location     Type
 12612 ;;		None
 12613 ;; Return value:  Size  Location     Type
 12614 ;;                  1    wreg      void 
 12615 ;; Registers used:
 12616 ;;		None
 12617 ;; Tracked objects:
 12618 ;;		On entry : 0/0
 12619 ;;		On exit  : 0/0
 12620 ;;		Unchanged: 0/0
 12621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12626 ;;Total ram usage:        0 bytes
 12627 ;; Hardware stack levels used:    1
 12628 ;; Hardware stack levels required when called:    5
 12629 ;; This function calls:
 12630 ;;		Nothing
 12631 ;; This function is called by:
 12632 ;;		_InitApp
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           	psect	text49
 12637  0129D8                     __ptext49:
 12638                           	opt stack 0
 12639  0129D8                     _PMD_AllOff:
 12640                           	opt stack 24
 12641                           
 12642                           ;user.c: 102:  PMD0 = 0xff;
 12643                           
 12644                           ; BSR set to: 14
 12645                           ;incstack = 0
 12646  0129D8  010E               	movlb	14	; () banked
 12647  0129DA  694C               	setf	76,b	;volatile
 12648                           
 12649                           ;user.c: 103:  PMD1 = 0xff;
 12650  0129DC  694D               	setf	77,b	;volatile
 12651                           
 12652                           ;user.c: 104:  PMD2 = 0xff;
 12653  0129DE  694E               	setf	78,b	;volatile
 12654                           
 12655                           ;user.c: 105:  PMD3 = 0xff;
 12656  0129E0  694F               	setf	79,b	;volatile
 12657                           
 12658                           ;user.c: 106:  PMD4 = 0xff;
 12659  0129E2  6950               	setf	80,b	;volatile
 12660                           
 12661                           ;user.c: 107:  PMD5 = 0xff;
 12662  0129E4  6951               	setf	81,b	;volatile
 12663                           
 12664                           ;user.c: 109:  PMD0bits.IOCMD = 0;
 12665  0129E6  914C               	bcf	76,0,b	;volatile
 12666                           
 12667                           ; BSR set to: 14
 12668  0129E8  0012               	return		;funcret
 12669  0129EA                     __end_of_PMD_AllOff:
 12670                           	opt stack 0
 12671                           tblptru	equ	0xFF8
 12672                           tblptrh	equ	0xFF7
 12673                           tblptrl	equ	0xFF6
 12674                           tablat	equ	0xFF5
 12675                           prodh	equ	0xFF4
 12676                           prodl	equ	0xFF3
 12677                           intcon	equ	0xFF2
 12678                           postinc0	equ	0xFEE
 12679                           wreg	equ	0xFE8
 12680                           indf1	equ	0xFE7
 12681                           postdec1	equ	0xFE5
 12682                           fsr1h	equ	0xFE2
 12683                           fsr1l	equ	0xFE1
 12684                           indf2	equ	0xFDF
 12685                           postinc2	equ	0xFDE
 12686                           postdec2	equ	0xFDD
 12687                           fsr2h	equ	0xFDA
 12688                           fsr2l	equ	0xFD9
 12689                           status	equ	0xFD8
 12690                           
 12691 ;; *************** function _GetChgState *****************
 12692 ;; Defined at:
 12693 ;;		line 309 in file "user.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;		None
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;  ret             1    0[BANK0 ] unsigned char 
 12698 ;; Return value:  Size  Location     Type
 12699 ;;                  1    wreg      unsigned char 
 12700 ;; Registers used:
 12701 ;;		wreg, status,2
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12710 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12711 ;;Total ram usage:        1 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    5
 12714 ;; This function calls:
 12715 ;;		Nothing
 12716 ;; This function is called by:
 12717 ;;		_main
 12718 ;; This function uses a non-reentrant model
 12719 ;;
 12720                           
 12721                           	psect	text50
 12722  01282A                     __ptext50:
 12723                           	opt stack 0
 12724  01282A                     _GetChgState:
 12725                           	opt stack 25
 12726                           
 12727                           ;user.c: 311:  unsigned char ret;;user.c: 313:  TRISF3 = 1;
 12728                           
 12729                           ; BSR set to: 14
 12730                           ;incstack = 0
 12731  01282A  8686               	bsf	3974,3,c	;volatile
 12732                           
 12733                           ;user.c: 314:  WPUF3 = 1;
 12734  01282C  010E               	movlb	14	; () banked
 12735  01282E  87B3               	bsf	179,3,b	;volatile
 12736                           
 12737                           ;user.c: 315:  __nop();
 12738  012830  F000               	nop	
 12739                           
 12740                           ;user.c: 316:  __nop();
 12741  012832  F000               	nop	
 12742                           
 12743                           ;user.c: 317:  __nop();
 12744  012834  F000               	nop	
 12745                           
 12746                           ;user.c: 318:  __nop();
 12747  012836  F000               	nop	
 12748                           
 12749                           ;user.c: 319:  ret = !RF3;
 12750  012838  B68E               	btfsc	3982,3,c	;volatile
 12751  01283A  D002               	goto	u6330
 12752  01283C  0E01               	movlw	1
 12753  01283E  D001               	goto	u6340
 12754  012840                     u6330:
 12755  012840  0E00               	movlw	0
 12756  012842                     u6340:
 12757  012842  0100               	movlb	0	; () banked
 12758  012844  6FD7               	movwf	GetChgState@ret& (0+255),b
 12759                           
 12760                           ; BSR set to: 0
 12761                           ;user.c: 320:  WPUF3 = 0;
 12762  012846  010E               	movlb	14	; () banked
 12763  012848  97B3               	bcf	179,3,b	;volatile
 12764                           
 12765                           ; BSR set to: 14
 12766                           ;user.c: 321:  LATF3 = 0;
 12767  01284A  967E               	bcf	3966,3,c	;volatile
 12768                           
 12769                           ; BSR set to: 14
 12770                           ;user.c: 322:  TRISF3 = 0;
 12771  01284C  9686               	bcf	3974,3,c	;volatile
 12772                           
 12773                           ;user.c: 324:  return ret;
 12774  01284E  0100               	movlb	0	; () banked
 12775  012850  51D7               	movf	GetChgState@ret& (0+255),w,b
 12776  012852  0012               	return	
 12777  012854                     __end_of_GetChgState:
 12778                           	opt stack 0
 12779                           tblptru	equ	0xFF8
 12780                           tblptrh	equ	0xFF7
 12781                           tblptrl	equ	0xFF6
 12782                           tablat	equ	0xFF5
 12783                           prodh	equ	0xFF4
 12784                           prodl	equ	0xFF3
 12785                           intcon	equ	0xFF2
 12786                           postinc0	equ	0xFEE
 12787                           wreg	equ	0xFE8
 12788                           indf1	equ	0xFE7
 12789                           postdec1	equ	0xFE5
 12790                           fsr1h	equ	0xFE2
 12791                           fsr1l	equ	0xFE1
 12792                           indf2	equ	0xFDF
 12793                           postinc2	equ	0xFDE
 12794                           postdec2	equ	0xFDD
 12795                           fsr2h	equ	0xFDA
 12796                           fsr2l	equ	0xFD9
 12797                           status	equ	0xFD8
 12798                           
 12799 ;; *************** function _low_isr *****************
 12800 ;; Defined at:
 12801 ;;		line 173 in file "interrupts.c"
 12802 ;; Parameters:    Size  Location     Type
 12803 ;;		None
 12804 ;; Auto vars:     Size  Location     Type
 12805 ;;		None
 12806 ;; Return value:  Size  Location     Type
 12807 ;;                  1    wreg      void 
 12808 ;; Registers used:
 12809 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12810 ;; Tracked objects:
 12811 ;;		On entry : 0/0
 12812 ;;		On exit  : 0/0
 12813 ;;		Unchanged: 0/0
 12814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12817 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12818 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12819 ;;Total ram usage:        9 bytes
 12820 ;; Hardware stack levels used:    1
 12821 ;; Hardware stack levels required when called:    4
 12822 ;; This function calls:
 12823 ;;		_SendCharBT
 12824 ;;		_SendCharUSB
 12825 ;;		_bufClear
 12826 ;;		_bufRead
 12827 ;; This function is called by:
 12828 ;;		Interrupt level 1
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           	psect	intcodelo
 12833  000818                     __pintcodelo:
 12834                           	opt stack 0
 12835  000818                     _low_isr:
 12836                           	opt stack 22
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;incstack = 0
 12840  000818  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12841  00081A  CFD8 F01B          	movff	status,??_low_isr
 12842  00081E  CFE8 F01C          	movff	wreg,??_low_isr+1
 12843  000822  CFE0 F01D          	movff	bsr,??_low_isr+2
 12844  000826  CFE1 F01E          	movff	fsr1l,??_low_isr+3
 12845  00082A  CFE2 F01F          	movff	fsr1h,??_low_isr+4
 12846  00082E  CFD9 F020          	movff	fsr2l,??_low_isr+5
 12847  000832  CFDA F021          	movff	fsr2h,??_low_isr+6
 12848  000836  CFF3 F022          	movff	prodl,??_low_isr+7
 12849  00083A  CFF4 F023          	movff	prodh,??_low_isr+8
 12850                           
 12851                           ;interrupts.c: 175:  if (PIR5bits.TMR3IF)
 12852  00083E  010E               	movlb	14	; () banked
 12853  000840  A538               	btfss	56,2,b	;volatile
 12854  000842  D006               	goto	i1l123
 12855                           
 12856                           ; BSR set to: 14
 12857                           ;interrupts.c: 176:  {;interrupts.c: 178:   TMR3H = 246;
 12858  000844  0EF6               	movlw	246
 12859  000846  6EC8               	movwf	4040,c	;volatile
 12860                           
 12861                           ; BSR set to: 14
 12862                           ;interrupts.c: 179:   PIR5bits.TMR3IF = 0;
 12863  000848  9538               	bcf	56,2,b	;volatile
 12864                           
 12865                           ; BSR set to: 14
 12866                           ;interrupts.c: 181:   sawToothWave++;
 12867  00084A  0100               	movlb	0	; () banked
 12868  00084C  2B8C               	incf	_sawToothWave& (0+255),f,b
 12869                           
 12870                           ;interrupts.c: 182:  }
 12871  00084E  D055               	goto	i1l139
 12872  000850                     i1l123:
 12873                           
 12874                           ; BSR set to: 14
 12875  000850  BD2C               	btfsc	44,6,b	;volatile
 12876                           
 12877                           ; BSR set to: 14
 12878  000852  AD36               	btfss	54,6,b	;volatile
 12879  000854  D020               	goto	i1l125
 12880                           
 12881                           ; BSR set to: 14
 12882                           ;interrupts.c: 184:  {;interrupts.c: 185:   if (!RF2)
 12883  000856  B48E               	btfsc	3982,2,c	;volatile
 12884  000858  D050               	goto	i1l139
 12885                           
 12886                           ; BSR set to: 14
 12887                           ;interrupts.c: 186:   {;interrupts.c: 187:    if ((bufU2_main.readIndex != bufU2_main.wr
      +                          iteIndex))SendCharBT(bufRead(&bufU2_main));
 12888  00085A  503F               	movf	_bufU2_main+2,w,c
 12889  00085C  1840               	xorwf	_bufU2_main+3,w,c
 12890  00085E  B4D8               	btfsc	status,2,c
 12891  000860  D009               	goto	i1l127
 12892                           
 12893                           ; BSR set to: 14
 12894  000862  0E3D               	movlw	low _bufU2_main
 12895  000864  6E15               	movwf	bufRead@b,c
 12896  000866  0E00               	movlw	high _bufU2_main
 12897  000868  6E16               	movwf	bufRead@b+1,c
 12898  00086A  ECB7  F092         	call	_bufRead	;wreg free
 12899  00086E  EC15  F095         	call	_SendCharBT
 12900  000872  D043               	goto	i1l139
 12901  000874                     i1l127:
 12902  000874  0100               	movlb	0	; () banked
 12903  000876  51D5               	movf	(_bufU2_intH+2)& (0+255),w,b
 12904  000878  19D6               	xorwf	(_bufU2_intH+3)& (0+255),w,b
 12905  00087A  B4D8               	btfsc	status,2,c
 12906  00087C  D009               	goto	i1l129
 12907                           
 12908                           ; BSR set to: 0
 12909  00087E  0ED3               	movlw	low _bufU2_intH
 12910  000880  6E15               	movwf	bufRead@b,c
 12911  000882  0E00               	movlw	high _bufU2_intH
 12912  000884  6E16               	movwf	bufRead@b+1,c
 12913  000886  ECB7  F092         	call	_bufRead	;wreg free
 12914  00088A  EC15  F095         	call	_SendCharBT
 12915  00088E  D035               	goto	i1l139
 12916  000890                     i1l129:
 12917                           
 12918                           ; BSR set to: 0
 12919  000890  010E               	movlb	14	; () banked
 12920  000892  9D2C               	bcf	44,6,b	;volatile
 12921                           
 12922                           ; BSR set to: 14
 12923                           ;interrupts.c: 193:  }
 12924                           
 12925                           ;interrupts.c: 191:   }
 12926                           
 12927                           ; BSR set to: 14
 12928                           
 12929                           ; BSR set to: 14
 12930  000894  D032               	goto	i1l139
 12931  000896                     i1l125:
 12932                           
 12933                           ; BSR set to: 14
 12934  000896  B92D               	btfsc	45,4,b	;volatile
 12935                           
 12936                           ; BSR set to: 14
 12937  000898  A937               	btfss	55,4,b	;volatile
 12938  00089A  D02F               	goto	i1l139
 12939                           
 12940                           ; BSR set to: 14
 12941                           ;interrupts.c: 195:  {;interrupts.c: 196:   if ((!RF6&&!!RF7&&!RF5))
 12942  00089C  AC8E               	btfss	3982,6,c	;volatile
 12943                           
 12944                           ; BSR set to: 14
 12945  00089E  AE8E               	btfss	3982,7,c	;volatile
 12946  0008A0  D01E               	goto	i1l133
 12947                           
 12948                           ; BSR set to: 14
 12949  0008A2  BA8E               	btfsc	3982,5,c	;volatile
 12950  0008A4  D01C               	goto	i1l133
 12951                           
 12952                           ; BSR set to: 14
 12953                           ;interrupts.c: 197:   {;interrupts.c: 198:    if (RF0)
 12954  0008A6  A08E               	btfss	3982,0,c	;volatile
 12955  0008A8  D028               	goto	i1l139
 12956                           
 12957                           ; BSR set to: 14
 12958                           ;interrupts.c: 199:    {;interrupts.c: 200:     if ((bufU5_main.readIndex != bufU5_main.
      +                          writeIndex))SendCharUSB(bufRead(&bufU5_main));
 12959  0008AA  503B               	movf	_bufU5_main+2,w,c
 12960  0008AC  183C               	xorwf	_bufU5_main+3,w,c
 12961  0008AE  B4D8               	btfsc	status,2,c
 12962  0008B0  D009               	goto	i1l135
 12963                           
 12964                           ; BSR set to: 14
 12965  0008B2  0E39               	movlw	low _bufU5_main
 12966  0008B4  6E15               	movwf	bufRead@b,c
 12967  0008B6  0E00               	movlw	high _bufU5_main
 12968  0008B8  6E16               	movwf	bufRead@b+1,c
 12969  0008BA  ECB7  F092         	call	_bufRead	;wreg free
 12970  0008BE  EC10  F095         	call	_SendCharUSB
 12971  0008C2  D01B               	goto	i1l139
 12972  0008C4                     i1l135:
 12973  0008C4  5043               	movf	_bufU5_intH+2,w,c
 12974  0008C6  1844               	xorwf	_bufU5_intH+3,w,c
 12975  0008C8  B4D8               	btfsc	status,2,c
 12976  0008CA  D015               	goto	i1l5181
 12977  0008CC  0E41               	movlw	low _bufU5_intH
 12978  0008CE  6E15               	movwf	bufRead@b,c
 12979  0008D0  0E00               	movlw	high _bufU5_intH
 12980  0008D2  6E16               	movwf	bufRead@b+1,c
 12981  0008D4  ECB7  F092         	call	_bufRead	;wreg free
 12982  0008D8  EC10  F095         	call	_SendCharUSB
 12983  0008DC  D00E               	goto	i1l139
 12984  0008DE                     i1l133:
 12985                           
 12986                           ; BSR set to: 14
 12987                           ;interrupts.c: 207:   {;interrupts.c: 208:    bufClear(&bufU5_main);
 12988                           
 12989                           ; BSR set to: 14
 12990  0008DE  0E39               	movlw	low _bufU5_main
 12991  0008E0  6E15               	movwf	bufClear@b,c
 12992  0008E2  0E00               	movlw	high _bufU5_main
 12993  0008E4  6E16               	movwf	bufClear@b+1,c
 12994  0008E6  EC84  F094         	call	_bufClear	;wreg free
 12995                           
 12996                           ;interrupts.c: 209:    bufClear(&bufU5_intH);
 12997  0008EA  0E41               	movlw	low _bufU5_intH
 12998  0008EC  6E15               	movwf	bufClear@b,c
 12999  0008EE  0E00               	movlw	high _bufU5_intH
 13000  0008F0  6E16               	movwf	bufClear@b+1,c
 13001  0008F2  EC84  F094         	call	_bufClear	;wreg free
 13002  0008F6                     i1l5181:
 13003                           
 13004                           ;interrupts.c: 210:    PIE4bits.TX5IE = 0;
 13005  0008F6  010E               	movlb	14	; () banked
 13006  0008F8  992D               	bcf	45,4,b	;volatile
 13007  0008FA                     i1l139:
 13008                           
 13009                           ; BSR set to: 14
 13010                           
 13011                           ; BSR set to: 14
 13012                           
 13013                           ; BSR set to: 14
 13014                           
 13015                           ;interrupts.c: 214:  {;interrupts.c: 215:  }
 13016                           
 13017                           ; BSR set to: 14
 13018                           
 13019                           ;interrupts.c: 213:  else
 13020                           
 13021                           ; BSR set to: 14
 13022                           ;interrupts.c: 212:  }
 13023  0008FA  C023  FFF4         	movff	??_low_isr+8,prodh
 13024  0008FE  C022  FFF3         	movff	??_low_isr+7,prodl
 13025  000902  C021  FFDA         	movff	??_low_isr+6,fsr2h
 13026  000906  C020  FFD9         	movff	??_low_isr+5,fsr2l
 13027  00090A  C01F  FFE2         	movff	??_low_isr+4,fsr1h
 13028  00090E  C01E  FFE1         	movff	??_low_isr+3,fsr1l
 13029  000912  C01D  FFE0         	movff	??_low_isr+2,bsr
 13030  000916  C01C  FFE8         	movff	??_low_isr+1,wreg
 13031  00091A  C01B  FFD8         	movff	??_low_isr,status
 13032  00091E  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13033  000920  0010               	retfie	
 13034  000922                     __end_of_low_isr:
 13035                           	opt stack 0
 13036                           tblptru	equ	0xFF8
 13037                           tblptrh	equ	0xFF7
 13038                           tblptrl	equ	0xFF6
 13039                           tablat	equ	0xFF5
 13040                           prodh	equ	0xFF4
 13041                           prodl	equ	0xFF3
 13042                           intcon	equ	0xFF2
 13043                           postinc0	equ	0xFEE
 13044                           wreg	equ	0xFE8
 13045                           indf1	equ	0xFE7
 13046                           postdec1	equ	0xFE5
 13047                           fsr1h	equ	0xFE2
 13048                           fsr1l	equ	0xFE1
 13049                           bsr	equ	0xFE0
 13050                           indf2	equ	0xFDF
 13051                           postinc2	equ	0xFDE
 13052                           postdec2	equ	0xFDD
 13053                           fsr2h	equ	0xFDA
 13054                           fsr2l	equ	0xFD9
 13055                           status	equ	0xFD8
 13056                           
 13057 ;; *************** function _bufRead *****************
 13058 ;; Defined at:
 13059 ;;		line 36 in file "ringBuffer.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;  b               2   20[COMRAM] PTR struct ringBuf
 13062 ;;		 -> bufU5_main(4), bufU2_main(4), bufU2_intH(4), bufU5_intH(4), 
 13063 ;; Auto vars:     Size  Location     Type
 13064 ;;  d               1   25[COMRAM] unsigned char 
 13065 ;; Return value:  Size  Location     Type
 13066 ;;                  1    wreg      unsigned char 
 13067 ;; Registers used:
 13068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13069 ;; Tracked objects:
 13070 ;;		On entry : 0/0
 13071 ;;		On exit  : 0/0
 13072 ;;		Unchanged: 0/0
 13073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13074 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13076 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13077 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13078 ;;Total ram usage:        6 bytes
 13079 ;; Hardware stack levels used:    1
 13080 ;; Hardware stack levels required when called:    2
 13081 ;; This function calls:
 13082 ;;		Nothing
 13083 ;; This function is called by:
 13084 ;;		_low_isr
 13085 ;; This function uses a non-reentrant model
 13086 ;;
 13087                           
 13088                           	psect	text52
 13089  01256E                     __ptext52:
 13090                           	opt stack 0
 13091  01256E                     _bufRead:
 13092                           	opt stack 23
 13093                           
 13094                           ;ringBuffer.c: 36: unsigned char bufRead(struct ringBuf *b);ringBuffer.c: 37: {;ringBuff
      +                          er.c: 38:  unsigned char d;;ringBuffer.c: 40:  d = b->buffer[b->readIndex++];
 13095                           
 13096                           ;incstack = 0
 13097  01256E  EE20 F003          	lfsr	2,3
 13098  012572  5015               	movf	bufRead@b,w,c
 13099  012574  26D9               	addwf	fsr2l,f,c
 13100  012576  5016               	movf	bufRead@b+1,w,c
 13101  012578  22DA               	addwfc	fsr2h,f,c
 13102  01257A  50DF               	movf	indf2,w,c
 13103  01257C  6E17               	movwf	??_bufRead& (0+255),c
 13104  01257E  5017               	movf	??_bufRead,w,c
 13105  012580  0D01               	mullw	1
 13106  012582  C015  FFD9         	movff	bufRead@b,fsr2l
 13107  012586  C016  FFDA         	movff	bufRead@b+1,fsr2h
 13108  01258A  CFDE F018          	movff	postinc2,??_bufRead+1
 13109  01258E  CFDD F019          	movff	postdec2,??_bufRead+2
 13110  012592  50F3               	movf	prodl,w,c
 13111  012594  2418               	addwf	??_bufRead+1,w,c
 13112  012596  6ED9               	movwf	fsr2l,c
 13113  012598  50F4               	movf	prodh,w,c
 13114  01259A  2019               	addwfc	??_bufRead+2,w,c
 13115  01259C  6EDA               	movwf	fsr2h,c
 13116  01259E  50DF               	movf	indf2,w,c
 13117  0125A0  6E1A               	movwf	bufRead@d,c
 13118  0125A2  EE20 F003          	lfsr	2,3
 13119  0125A6  5015               	movf	bufRead@b,w,c
 13120  0125A8  26D9               	addwf	fsr2l,f,c
 13121  0125AA  5016               	movf	bufRead@b+1,w,c
 13122  0125AC  22DA               	addwfc	fsr2h,f,c
 13123  0125AE  2ADF               	incf	indf2,f,c
 13124                           
 13125                           ;ringBuffer.c: 48:  return d;
 13126  0125B0  501A               	movf	bufRead@d,w,c
 13127  0125B2  0012               	return	
 13128  0125B4                     __end_of_bufRead:
 13129                           	opt stack 0
 13130                           tblptru	equ	0xFF8
 13131                           tblptrh	equ	0xFF7
 13132                           tblptrl	equ	0xFF6
 13133                           tablat	equ	0xFF5
 13134                           prodh	equ	0xFF4
 13135                           prodl	equ	0xFF3
 13136                           intcon	equ	0xFF2
 13137                           postinc0	equ	0xFEE
 13138                           wreg	equ	0xFE8
 13139                           indf1	equ	0xFE7
 13140                           postdec1	equ	0xFE5
 13141                           fsr1h	equ	0xFE2
 13142                           fsr1l	equ	0xFE1
 13143                           bsr	equ	0xFE0
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function _bufClear *****************
 13152 ;; Defined at:
 13153 ;;		line 55 in file "ringBuffer.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;  b               2   20[COMRAM] PTR struct ringBuf
 13156 ;;		 -> bufU5_main(4), bufU5_intH(4), 
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;		None
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      void 
 13161 ;; Registers used:
 13162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13168 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13172 ;;Total ram usage:        2 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    2
 13175 ;; This function calls:
 13176 ;;		Nothing
 13177 ;; This function is called by:
 13178 ;;		_low_isr
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	text53
 13183  012908                     __ptext53:
 13184                           	opt stack 0
 13185  012908                     _bufClear:
 13186                           	opt stack 23
 13187                           
 13188                           ;ringBuffer.c: 55: void bufClear(struct ringBuf *b);ringBuffer.c: 56: {;ringBuffer.c: 57
      +                          :  b->readIndex = b->writeIndex;
 13189                           
 13190                           ;incstack = 0
 13191  012908  EE20 F002          	lfsr	2,2
 13192  01290C  5015               	movf	bufClear@b,w,c
 13193  01290E  26D9               	addwf	fsr2l,f,c
 13194  012910  5016               	movf	bufClear@b+1,w,c
 13195  012912  22DA               	addwfc	fsr2h,f,c
 13196  012914  EE10 F003          	lfsr	1,3
 13197  012918  5015               	movf	bufClear@b,w,c
 13198  01291A  26E1               	addwf	fsr1l,f,c
 13199  01291C  5016               	movf	bufClear@b+1,w,c
 13200  01291E  22E2               	addwfc	fsr1h,f,c
 13201  012920  CFDF FFE7          	movff	indf2,indf1
 13202  012924  0012               	return		;funcret
 13203  012926                     __end_of_bufClear:
 13204                           	opt stack 0
 13205                           tblptru	equ	0xFF8
 13206                           tblptrh	equ	0xFF7
 13207                           tblptrl	equ	0xFF6
 13208                           tablat	equ	0xFF5
 13209                           prodh	equ	0xFF4
 13210                           prodl	equ	0xFF3
 13211                           intcon	equ	0xFF2
 13212                           postinc0	equ	0xFEE
 13213                           wreg	equ	0xFE8
 13214                           indf1	equ	0xFE7
 13215                           postdec1	equ	0xFE5
 13216                           fsr1h	equ	0xFE2
 13217                           fsr1l	equ	0xFE1
 13218                           bsr	equ	0xFE0
 13219                           indf2	equ	0xFDF
 13220                           postinc2	equ	0xFDE
 13221                           postdec2	equ	0xFDD
 13222                           fsr2h	equ	0xFDA
 13223                           fsr2l	equ	0xFD9
 13224                           status	equ	0xFD8
 13225                           
 13226 ;; *************** function _SendCharUSB *****************
 13227 ;; Defined at:
 13228 ;;		line 11 in file "FT230X.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  d               1    wreg     unsigned char 
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;  d               1   21[COMRAM] unsigned char 
 13233 ;; Return value:  Size  Location     Type
 13234 ;;                  1    wreg      void 
 13235 ;; Registers used:
 13236 ;;		wreg, status,2, cstack
 13237 ;; Tracked objects:
 13238 ;;		On entry : 0/0
 13239 ;;		On exit  : 0/0
 13240 ;;		Unchanged: 0/0
 13241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13246 ;;Total ram usage:        1 bytes
 13247 ;; Hardware stack levels used:    1
 13248 ;; Hardware stack levels required when called:    3
 13249 ;; This function calls:
 13250 ;;		_EUSART5_Write
 13251 ;; This function is called by:
 13252 ;;		_low_isr
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           	psect	text54
 13257  012A20                     __ptext54:
 13258                           	opt stack 0
 13259  012A20                     _SendCharUSB:
 13260                           	opt stack 22
 13261                           
 13262                           ;incstack = 0
 13263                           ;SendCharUSB@d stored from wreg
 13264  012A20  6E16               	movwf	SendCharUSB@d,c
 13265                           
 13266                           ;FT230X.c: 11: void SendCharUSB(unsigned char d);FT230X.c: 12: {;FT230X.c: 13:  EUSART5_
      +                          Write(d);
 13267  012A22  5016               	movf	SendCharUSB@d,w,c
 13268  012A24  ECFC  F094         	call	_EUSART5_Write
 13269  012A28  0012               	return		;funcret
 13270  012A2A                     __end_of_SendCharUSB:
 13271                           	opt stack 0
 13272                           tblptru	equ	0xFF8
 13273                           tblptrh	equ	0xFF7
 13274                           tblptrl	equ	0xFF6
 13275                           tablat	equ	0xFF5
 13276                           prodh	equ	0xFF4
 13277                           prodl	equ	0xFF3
 13278                           intcon	equ	0xFF2
 13279                           postinc0	equ	0xFEE
 13280                           wreg	equ	0xFE8
 13281                           indf1	equ	0xFE7
 13282                           postdec1	equ	0xFE5
 13283                           fsr1h	equ	0xFE2
 13284                           fsr1l	equ	0xFE1
 13285                           bsr	equ	0xFE0
 13286                           indf2	equ	0xFDF
 13287                           postinc2	equ	0xFDE
 13288                           postdec2	equ	0xFDD
 13289                           fsr2h	equ	0xFDA
 13290                           fsr2l	equ	0xFD9
 13291                           status	equ	0xFD8
 13292                           
 13293 ;; *************** function _EUSART5_Write *****************
 13294 ;; Defined at:
 13295 ;;		line 80 in file "eusart5.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;  txData          1    wreg     unsigned char 
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;  txData          1   20[COMRAM] unsigned char 
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      void 
 13302 ;; Registers used:
 13303 ;;		wreg
 13304 ;; Tracked objects:
 13305 ;;		On entry : 0/0
 13306 ;;		On exit  : 0/0
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13313 ;;Total ram usage:        1 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    2
 13316 ;; This function calls:
 13317 ;;		Nothing
 13318 ;; This function is called by:
 13319 ;;		_SendCharUSB
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           	psect	text55
 13324  0129F8                     __ptext55:
 13325                           	opt stack 0
 13326  0129F8                     _EUSART5_Write:
 13327                           	opt stack 22
 13328                           
 13329                           ;incstack = 0
 13330                           ;EUSART5_Write@txData stored from wreg
 13331  0129F8  6E15               	movwf	EUSART5_Write@txData,c
 13332  0129FA                     
 13333                           ;eusart5.c: 80: void EUSART5_Write(uint8_t txData);eusart5.c: 81: {;eusart5.c: 83:  whil
      +                          e(!TXSTA5bits.TRMT);
 13334  0129FA  010E               	movlb	14	; () banked
 13335  0129FC  A3E1               	btfss	225,1,b	;volatile
 13336  0129FE  D7FD               	goto	i1l4155
 13337                           
 13338                           ; BSR set to: 14
 13339                           ;eusart5.c: 85:  TX5REG = txData;
 13340                           
 13341                           ; BSR set to: 14
 13342  012A00  C015  FEDD         	movff	EUSART5_Write@txData,3805	;volatile
 13343                           
 13344                           ; BSR set to: 14
 13345  012A04  0012               	return		;funcret
 13346  012A06                     __end_of_EUSART5_Write:
 13347                           	opt stack 0
 13348                           tblptru	equ	0xFF8
 13349                           tblptrh	equ	0xFF7
 13350                           tblptrl	equ	0xFF6
 13351                           tablat	equ	0xFF5
 13352                           prodh	equ	0xFF4
 13353                           prodl	equ	0xFF3
 13354                           intcon	equ	0xFF2
 13355                           postinc0	equ	0xFEE
 13356                           wreg	equ	0xFE8
 13357                           indf1	equ	0xFE7
 13358                           postdec1	equ	0xFE5
 13359                           fsr1h	equ	0xFE2
 13360                           fsr1l	equ	0xFE1
 13361                           bsr	equ	0xFE0
 13362                           indf2	equ	0xFDF
 13363                           postinc2	equ	0xFDE
 13364                           postdec2	equ	0xFDD
 13365                           fsr2h	equ	0xFDA
 13366                           fsr2l	equ	0xFD9
 13367                           status	equ	0xFD8
 13368                           
 13369 ;; *************** function _SendCharBT *****************
 13370 ;; Defined at:
 13371 ;;		line 238 in file "RN42.c"
 13372 ;; Parameters:    Size  Location     Type
 13373 ;;  d               1    wreg     unsigned char 
 13374 ;; Auto vars:     Size  Location     Type
 13375 ;;  d               1   21[COMRAM] unsigned char 
 13376 ;; Return value:  Size  Location     Type
 13377 ;;                  1    wreg      void 
 13378 ;; Registers used:
 13379 ;;		wreg, status,2, cstack
 13380 ;; Tracked objects:
 13381 ;;		On entry : 0/0
 13382 ;;		On exit  : 0/0
 13383 ;;		Unchanged: 0/0
 13384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13386 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13389 ;;Total ram usage:        1 bytes
 13390 ;; Hardware stack levels used:    1
 13391 ;; Hardware stack levels required when called:    3
 13392 ;; This function calls:
 13393 ;;		_EUSART2_Write
 13394 ;; This function is called by:
 13395 ;;		_low_isr
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           	psect	text56
 13400  012A2A                     __ptext56:
 13401                           	opt stack 0
 13402  012A2A                     _SendCharBT:
 13403                           	opt stack 22
 13404                           
 13405                           ; BSR set to: 14
 13406                           ;incstack = 0
 13407                           ;SendCharBT@d stored from wreg
 13408  012A2A  6E16               	movwf	SendCharBT@d,c
 13409                           
 13410                           ;RN42.c: 238: void SendCharBT(unsigned char d);RN42.c: 239: {;RN42.c: 241:  EUSART2_Writ
      +                          e(d);
 13411  012A2C  5016               	movf	SendCharBT@d,w,c
 13412  012A2E  EC03  F095         	call	_EUSART2_Write
 13413  012A32  0012               	return		;funcret
 13414  012A34                     __end_of_SendCharBT:
 13415                           	opt stack 0
 13416                           tblptru	equ	0xFF8
 13417                           tblptrh	equ	0xFF7
 13418                           tblptrl	equ	0xFF6
 13419                           tablat	equ	0xFF5
 13420                           prodh	equ	0xFF4
 13421                           prodl	equ	0xFF3
 13422                           intcon	equ	0xFF2
 13423                           postinc0	equ	0xFEE
 13424                           wreg	equ	0xFE8
 13425                           indf1	equ	0xFE7
 13426                           postdec1	equ	0xFE5
 13427                           fsr1h	equ	0xFE2
 13428                           fsr1l	equ	0xFE1
 13429                           bsr	equ	0xFE0
 13430                           indf2	equ	0xFDF
 13431                           postinc2	equ	0xFDE
 13432                           postdec2	equ	0xFDD
 13433                           fsr2h	equ	0xFDA
 13434                           fsr2l	equ	0xFD9
 13435                           status	equ	0xFD8
 13436                           
 13437 ;; *************** function _EUSART2_Write *****************
 13438 ;; Defined at:
 13439 ;;		line 79 in file "eusart2.c"
 13440 ;; Parameters:    Size  Location     Type
 13441 ;;  txData          1    wreg     unsigned char 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;  txData          1   20[COMRAM] unsigned char 
 13444 ;; Return value:  Size  Location     Type
 13445 ;;                  1    wreg      void 
 13446 ;; Registers used:
 13447 ;;		wreg
 13448 ;; Tracked objects:
 13449 ;;		On entry : 0/0
 13450 ;;		On exit  : 0/0
 13451 ;;		Unchanged: 0/0
 13452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13456 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13457 ;;Total ram usage:        1 bytes
 13458 ;; Hardware stack levels used:    1
 13459 ;; Hardware stack levels required when called:    2
 13460 ;; This function calls:
 13461 ;;		Nothing
 13462 ;; This function is called by:
 13463 ;;		_SendCharBT
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           	psect	text57
 13468  012A06                     __ptext57:
 13469                           	opt stack 0
 13470  012A06                     _EUSART2_Write:
 13471                           	opt stack 22
 13472                           
 13473                           ;incstack = 0
 13474                           ;EUSART2_Write@txData stored from wreg
 13475  012A06  6E15               	movwf	EUSART2_Write@txData,c
 13476  012A08                     
 13477                           ;eusart2.c: 79: void EUSART2_Write(uint8_t txData);eusart2.c: 80: {;eusart2.c: 82:  whil
      +                          e(!TXSTA2bits.TRMT);
 13478  012A08  010E               	movlb	14	; () banked
 13479  012A0A  A3F6               	btfss	246,1,b	;volatile
 13480  012A0C  D7FD               	goto	i1l4151
 13481                           
 13482                           ; BSR set to: 14
 13483                           ;eusart2.c: 84:  TX2REG = txData;
 13484                           
 13485                           ; BSR set to: 14
 13486  012A0E  C015  FEF2         	movff	EUSART2_Write@txData,3826	;volatile
 13487                           
 13488                           ; BSR set to: 14
 13489  012A12  0012               	return		;funcret
 13490  012A14                     __end_of_EUSART2_Write:
 13491                           	opt stack 0
 13492                           tblptru	equ	0xFF8
 13493                           tblptrh	equ	0xFF7
 13494                           tblptrl	equ	0xFF6
 13495                           tablat	equ	0xFF5
 13496                           prodh	equ	0xFF4
 13497                           prodl	equ	0xFF3
 13498                           intcon	equ	0xFF2
 13499                           postinc0	equ	0xFEE
 13500                           wreg	equ	0xFE8
 13501                           indf1	equ	0xFE7
 13502                           postdec1	equ	0xFE5
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           bsr	equ	0xFE0
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _high_isr *****************
 13514 ;; Defined at:
 13515 ;;		line 27 in file "interrupts.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;  c               1   19[COMRAM] unsigned char 
 13520 ;;  c               1   18[COMRAM] unsigned char 
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      void 
 13523 ;; Registers used:
 13524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 13530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13532 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13533 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13534 ;;Total ram usage:       14 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    1
 13537 ;; This function calls:
 13538 ;;		_EUSART2_Read
 13539 ;;		_EUSART5_Read
 13540 ;;		_ledMatrixProcess
 13541 ;;		_strlen
 13542 ;;		i2_bufWriteIntH
 13543 ;; This function is called by:
 13544 ;;		Interrupt level 2
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           	psect	intcode
 13549  000808                     __pintcode:
 13550                           	opt stack 0
 13551  000808                     _high_isr:
 13552                           	opt stack 22
 13553                           
 13554                           ; BSR set to: 14
 13555                           ;incstack = 0
 13556  000808  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13557  00080A  EFC2  F089         	goto	int_func
 13558                           tblptru	equ	0xFF8
 13559                           tblptrh	equ	0xFF7
 13560                           tblptrl	equ	0xFF6
 13561                           tablat	equ	0xFF5
 13562                           prodh	equ	0xFF4
 13563                           prodl	equ	0xFF3
 13564                           intcon	equ	0xFF2
 13565                           postinc0	equ	0xFEE
 13566                           wreg	equ	0xFE8
 13567                           indf1	equ	0xFE7
 13568                           postdec1	equ	0xFE5
 13569                           fsr1h	equ	0xFE2
 13570                           fsr1l	equ	0xFE1
 13571                           bsr	equ	0xFE0
 13572                           indf2	equ	0xFDF
 13573                           postinc2	equ	0xFDE
 13574                           postdec2	equ	0xFDD
 13575                           fsr2h	equ	0xFDA
 13576                           fsr2l	equ	0xFD9
 13577                           status	equ	0xFD8
 13578                           
 13579                           	psect	intcode_body
 13580  011384                     __pintcode_body:
 13581                           	opt stack 22
 13582  011384                     int_func:
 13583                           	opt stack 22
 13584  011384  CFD9 F00B          	movff	fsr2l,??_high_isr+4
 13585  011388  CFDA F00C          	movff	fsr2h,??_high_isr+5
 13586  01138C  CFF3 F00D          	movff	prodl,??_high_isr+6
 13587  011390  CFF4 F00E          	movff	prodh,??_high_isr+7
 13588  011394  CFF6 F00F          	movff	tblptrl,??_high_isr+8
 13589  011398  CFF7 F010          	movff	tblptrh,??_high_isr+9
 13590  01139C  CFF8 F011          	movff	tblptru,??_high_isr+10
 13591  0113A0  CFF5 F012          	movff	tablat,??_high_isr+11
 13592                           
 13593                           ;interrupts.c: 30:  if (PIR5bits.TMR1IF)
 13594  0113A4  010E               	movlb	14	; () banked
 13595  0113A6  A138               	btfss	56,0,b	;volatile
 13596  0113A8  D03E               	goto	i2l79
 13597                           
 13598                           ; BSR set to: 14
 13599                           ;interrupts.c: 31:  {;interrupts.c: 33:   TMR1H = 255;
 13600  0113AA  68CE               	setf	4046,c	;volatile
 13601                           
 13602                           ;interrupts.c: 34:   PIR5bits.TMR1IF = 0;
 13603  0113AC  9138               	bcf	56,0,b	;volatile
 13604                           
 13605                           ; BSR set to: 14
 13606                           ;interrupts.c: 38:   ledMatrixProcess();
 13607  0113AE  EC66  F08F         	call	_ledMatrixProcess	;wreg free
 13608                           
 13609                           ;interrupts.c: 41:   time++;
 13610  0113B2  0E01               	movlw	1
 13611  0113B4  2628               	addwf	_time,f,c
 13612  0113B6  0E00               	movlw	0
 13613  0113B8  2229               	addwfc	_time+1,f,c
 13614  0113BA  222A               	addwfc	_time+2,f,c
 13615  0113BC  222B               	addwfc	_time+3,f,c
 13616                           
 13617                           ;interrupts.c: 43:   if (!(time & 0xffff))
 13618  0113BE  0EFF               	movlw	255
 13619  0113C0  1428               	andwf	_time,w,c
 13620  0113C2  6E07               	movwf	??_high_isr& (0+255),c
 13621  0113C4  0EFF               	movlw	255
 13622  0113C6  1429               	andwf	_time+1,w,c
 13623  0113C8  6E08               	movwf	(??_high_isr+1)& (0+255),c
 13624  0113CA  0E00               	movlw	0
 13625  0113CC  142A               	andwf	_time+2,w,c
 13626  0113CE  6E09               	movwf	(??_high_isr+2)& (0+255),c
 13627  0113D0  0E00               	movlw	0
 13628  0113D2  142B               	andwf	_time+3,w,c
 13629  0113D4  6E0A               	movwf	(??_high_isr+3)& (0+255),c
 13630  0113D6  5007               	movf	??_high_isr,w,c
 13631  0113D8  1008               	iorwf	??_high_isr+1,w,c
 13632  0113DA  1009               	iorwf	??_high_isr+2,w,c
 13633  0113DC  100A               	iorwf	??_high_isr+3,w,c
 13634  0113DE  B4D8               	btfsc	status,2,c
 13635                           
 13636                           ;interrupts.c: 44:   {;interrupts.c: 45:    mainFlags.cycle33s = 1;
 13637  0113E0  8E32               	bsf	_mainFlags,7,c
 13638                           
 13639                           ;interrupts.c: 47:   if (!(time & 0x3ff))
 13640                           
 13641                           ;interrupts.c: 46:   }
 13642  0113E2  0EFF               	movlw	255
 13643  0113E4  1428               	andwf	_time,w,c
 13644  0113E6  6E07               	movwf	??_high_isr& (0+255),c
 13645  0113E8  0E03               	movlw	3
 13646  0113EA  1429               	andwf	_time+1,w,c
 13647  0113EC  6E08               	movwf	(??_high_isr+1)& (0+255),c
 13648  0113EE  0E00               	movlw	0
 13649  0113F0  142A               	andwf	_time+2,w,c
 13650  0113F2  6E09               	movwf	(??_high_isr+2)& (0+255),c
 13651  0113F4  0E00               	movlw	0
 13652  0113F6  142B               	andwf	_time+3,w,c
 13653  0113F8  6E0A               	movwf	(??_high_isr+3)& (0+255),c
 13654  0113FA  5007               	movf	??_high_isr,w,c
 13655  0113FC  1008               	iorwf	??_high_isr+1,w,c
 13656  0113FE  1009               	iorwf	??_high_isr+2,w,c
 13657  011400  100A               	iorwf	??_high_isr+3,w,c
 13658  011402  B4D8               	btfsc	status,2,c
 13659                           
 13660                           ;interrupts.c: 48:   {;interrupts.c: 49:    mainFlags.cycle052s = 1;
 13661  011404  8033               	bsf	_mainFlags+1,0,c
 13662                           
 13663                           ;interrupts.c: 52:   if (!RF7)
 13664                           
 13665                           ;interrupts.c: 50:   }
 13666  011406  BE8E               	btfsc	3982,7,c	;volatile
 13667  011408  D0AB               	goto	i2l116
 13668                           
 13669                           ;interrupts.c: 53:   {;interrupts.c: 54:    if (sleepCountDown)
 13670  01140A  5024               	movf	_sleepCountDown,w,c
 13671  01140C  1025               	iorwf	_sleepCountDown+1,w,c
 13672  01140E  1026               	iorwf	_sleepCountDown+2,w,c
 13673  011410  1027               	iorwf	_sleepCountDown+3,w,c
 13674  011412  B4D8               	btfsc	status,2,c
 13675  011414  D006               	goto	i2l83
 13676                           
 13677                           ;interrupts.c: 55:    {;interrupts.c: 56:     sleepCountDown--;
 13678  011416  0624               	decf	_sleepCountDown,f,c
 13679  011418  0E00               	movlw	0
 13680  01141A  5A25               	subwfb	_sleepCountDown+1,f,c
 13681  01141C  5A26               	subwfb	_sleepCountDown+2,f,c
 13682  01141E  5A27               	subwfb	_sleepCountDown+3,f,c
 13683                           
 13684                           ;interrupts.c: 57:    }
 13685  011420  D09F               	goto	i2l116
 13686  011422                     i2l83:
 13687                           
 13688                           ;interrupts.c: 59:    {;interrupts.c: 60:     mainFlags.shutdown = 1;
 13689  011422  8432               	bsf	_mainFlags,2,c
 13690                           
 13691                           ;interrupts.c: 63:  }
 13692                           
 13693                           ;interrupts.c: 62:   }
 13694                           
 13695                           ;interrupts.c: 61:    }
 13696  011424  D09D               	goto	i2l116
 13697  011426                     i2l79:
 13698                           
 13699                           ; BSR set to: 14
 13700  011426  AF36               	btfss	54,7,b	;volatile
 13701  011428  D051               	goto	i2l86
 13702                           
 13703                           ; BSR set to: 14
 13704                           ;interrupts.c: 65:  {;interrupts.c: 66:   (TRISF2=0);
 13705  01142A  9486               	bcf	3974,2,c	;volatile
 13706                           
 13707                           ;interrupts.c: 67:   if (RC2STAbits.OERR || RC2STAbits.FERR)
 13708  01142C  B3F5               	btfsc	245,1,b	;volatile
 13709  01142E  D002               	goto	i2u438_40
 13710                           
 13711                           ; BSR set to: 14
 13712  011430  A5F5               	btfss	245,2,b	;volatile
 13713  011432  D006               	goto	i2l87
 13714  011434                     i2u438_40:
 13715                           
 13716                           ; BSR set to: 14
 13717                           ;interrupts.c: 68:   {;interrupts.c: 70:    EUSART2_Read();
 13718                           
 13719                           ; BSR set to: 14
 13720  011434  EC1D  F095         	call	_EUSART2_Read	;wreg free
 13721                           
 13722                           ;interrupts.c: 71:    RC2STAbits.CREN = 0;
 13723  011438  010E               	movlb	14	; () banked
 13724  01143A  99F5               	bcf	245,4,b	;volatile
 13725                           
 13726                           ; BSR set to: 14
 13727                           ;interrupts.c: 72:    RC2STAbits.CREN = 1;
 13728  01143C  89F5               	bsf	245,4,b	;volatile
 13729  01143E  D044               	goto	i2u442_40
 13730  011440                     i2l87:
 13731                           
 13732                           ; BSR set to: 14
 13733                           ;interrupts.c: 76:   {;interrupts.c: 77:    unsigned char c = EUSART2_Read();
 13734                           
 13735                           ; BSR set to: 14
 13736  011440  EC1D  F095         	call	_EUSART2_Read	;wreg free
 13737  011444  6E13               	movwf	high_isr@c,c
 13738                           
 13739                           ;interrupts.c: 79:    bufWriteIntH(&bufU5_intH, c);
 13740  011446  0E41               	movlw	low _bufU5_intH
 13741  011448  6E01               	movwf	i2bufWriteIntH@b,c
 13742  01144A  0E00               	movlw	high _bufU5_intH
 13743  01144C  6E02               	movwf	i2bufWriteIntH@b+1,c
 13744  01144E  C013  F003         	movff	high_isr@c,i2bufWriteIntH@d
 13745  011452  ECE2  F091         	call	i2_bufWriteIntH	;wreg free
 13746                           
 13747                           ;interrupts.c: 82:    if (c == connectedString[0])
 13748  011456  0EE3               	movlw	low _connectedString
 13749  011458  6EF6               	movwf	tblptrl,c
 13750  01145A                     	if	1	;There is more than 1 active tblptr byte
 13751  01145A  0EFF               	movlw	high _connectedString
 13752  01145C  6EF7               	movwf	tblptrh,c
 13753  01145E                     	endif
 13754  01145E                     	if	1	;There are 3 active tblptr bytes
 13755  01145E  0E00               	movlw	low (_connectedString shr (0+16))
 13756  011460  6EF8               	movwf	tblptru,c
 13757  011462                     	endif
 13758  011462  0008               	tblrd		*
 13759  011464  50F5               	movf	tablat,w,c
 13760  011466  1813               	xorwf	high_isr@c,w,c
 13761  011468  A4D8               	btfss	status,2,c
 13762  01146A  D002               	goto	i2l91
 13763                           
 13764                           ;interrupts.c: 83:    {;interrupts.c: 84:     connectedStringIndex = 1;
 13765  01146C  0E01               	movlw	1
 13766  01146E  D026               	goto	L2
 13767  011470                     i2l91:
 13768  011470  5037               	movf	_connectedStringIndex,w,c
 13769  011472  0D01               	mullw	1
 13770  011474  0EE3               	movlw	low _connectedString
 13771  011476  24F3               	addwf	prodl,w,c
 13772  011478  6EF6               	movwf	tblptrl,c
 13773  01147A  0EFF               	movlw	high _connectedString
 13774  01147C  20F4               	addwfc	prodh,w,c
 13775  01147E  6EF7               	movwf	tblptrh,c
 13776  011480                     	if	1	;There are 3 active tblptr bytes
 13777  011480  6AF8               	clrf	tblptru,c
 13778  011482  0E00               	movlw	low (__mediumconst shr (0+16))
 13779  011484  22F8               	addwfc	tblptru,f,c
 13780  011486                     	endif
 13781  011486  0008               	tblrd		*
 13782  011488  50F5               	movf	tablat,w,c
 13783  01148A  1813               	xorwf	high_isr@c,w,c
 13784  01148C  A4D8               	btfss	status,2,c
 13785  01148E  D015               	goto	i2l93
 13786                           
 13787                           ;interrupts.c: 87:    {;interrupts.c: 88:     connectedStringIndex++;
 13788  011490  2A37               	incf	_connectedStringIndex,f,c
 13789                           
 13790                           ;interrupts.c: 89:     if (connectedStringIndex == strlen(connectedString))
 13791  011492  0EE3               	movlw	low _connectedString
 13792  011494  6E01               	movwf	strlen@s,c
 13793  011496  0EFF               	movlw	high _connectedString
 13794  011498  6E02               	movwf	strlen@s+1,c
 13795  01149A  EC60  F093         	call	_strlen	;wreg free
 13796  01149E  5037               	movf	_connectedStringIndex,w,c
 13797  0114A0  6E07               	movwf	??_high_isr& (0+255),c
 13798  0114A2  6A08               	clrf	(??_high_isr+1)& (0+255),c
 13799  0114A4  5001               	movf	?_strlen,w,c
 13800  0114A6  1807               	xorwf	??_high_isr,w,c
 13801  0114A8  E10A               	bnz	i2l92
 13802  0114AA  5002               	movf	?_strlen+1,w,c
 13803  0114AC  1808               	xorwf	??_high_isr+1,w,c
 13804  0114AE  A4D8               	btfss	status,2,c
 13805  0114B0  D006               	goto	i2l95
 13806                           
 13807                           ;interrupts.c: 90:     {;interrupts.c: 91:      connectedStringIndex = 0;
 13808  0114B2  0E00               	movlw	0
 13809  0114B4  6E37               	movwf	_connectedStringIndex,c
 13810                           
 13811                           ;interrupts.c: 92:      mainFlags.connected = 1;
 13812  0114B6  8832               	bsf	_mainFlags,4,c
 13813                           
 13814                           ;interrupts.c: 94:    }
 13815                           
 13816                           ;interrupts.c: 93:     }
 13817  0114B8  D002               	goto	i2l95
 13818  0114BA                     i2l93:
 13819                           
 13820                           ;interrupts.c: 96:    {;interrupts.c: 97:     connectedStringIndex = 0;
 13821  0114BA  0E00               	movlw	0
 13822  0114BC                     L2:
 13823  0114BC  6E37               	movwf	_connectedStringIndex,c
 13824  0114BE                     i2l95:
 13825  0114BE                     i2l92:
 13826                           
 13827                           ;interrupts.c: 99:    outputReportReceived = 1;
 13828  0114BE  0E01               	movlw	1
 13829  0114C0  6E38               	movwf	_outputReportReceived,c
 13830                           
 13831                           ;interrupts.c: 101:    if (!PIR3bits.RC2IF)
 13832  0114C2  010E               	movlb	14	; () banked
 13833  0114C4  BF36               	btfsc	54,7,b	;volatile
 13834  0114C6  D04C               	goto	i2l116
 13835  0114C8                     i2u442_40:
 13836                           
 13837                           ; BSR set to: 14
 13838                           ;interrupts.c: 102:    {;interrupts.c: 103:     (TRISF2=1);
 13839  0114C8  8486               	bsf	3974,2,c	;volatile
 13840                           
 13841                           ; BSR set to: 14
 13842                           ;interrupts.c: 106:  }
 13843                           
 13844                           ;interrupts.c: 105:   }
 13845                           
 13846                           ; BSR set to: 14
 13847                           
 13848                           ;interrupts.c: 104:    }
 13849  0114CA  D04A               	goto	i2l116
 13850  0114CC                     i2l86:
 13851                           
 13852                           ; BSR set to: 14
 13853  0114CC  AB37               	btfss	55,5,b	;volatile
 13854  0114CE  D048               	goto	i2l116
 13855                           
 13856                           ; BSR set to: 14
 13857                           ;interrupts.c: 108:  {;interrupts.c: 109:   (LATF0=0);
 13858  0114D0  907E               	bcf	3966,0,c	;volatile
 13859                           
 13860                           ;interrupts.c: 110:   if (RC5STAbits.OERR || RC5STAbits.FERR)
 13861  0114D2  B3E0               	btfsc	224,1,b	;volatile
 13862  0114D4  D002               	goto	i2u445_40
 13863                           
 13864                           ; BSR set to: 14
 13865  0114D6  A5E0               	btfss	224,2,b	;volatile
 13866  0114D8  D006               	goto	i2l99
 13867  0114DA                     i2u445_40:
 13868                           
 13869                           ; BSR set to: 14
 13870                           ;interrupts.c: 111:   {;interrupts.c: 113:    EUSART5_Read();
 13871                           
 13872                           ; BSR set to: 14
 13873  0114DA  EC1A  F095         	call	_EUSART5_Read	;wreg free
 13874                           
 13875                           ;interrupts.c: 114:    RC5STAbits.CREN = 0;
 13876  0114DE  010E               	movlb	14	; () banked
 13877  0114E0  99E0               	bcf	224,4,b	;volatile
 13878                           
 13879                           ; BSR set to: 14
 13880                           ;interrupts.c: 115:    RC5STAbits.CREN = 1;
 13881  0114E2  89E0               	bsf	224,4,b	;volatile
 13882  0114E4  D03C               	goto	i2u453_40
 13883  0114E6                     i2l99:
 13884                           
 13885                           ; BSR set to: 14
 13886                           ;interrupts.c: 119:   {;interrupts.c: 120:    unsigned char c = EUSART5_Read();
 13887                           
 13888                           ; BSR set to: 14
 13889  0114E6  EC1A  F095         	call	_EUSART5_Read	;wreg free
 13890  0114EA  6E14               	movwf	high_isr@c_389,c
 13891                           
 13892                           ;interrupts.c: 122:    bufWriteIntH(&bufU5_intH, c);
 13893  0114EC  0E41               	movlw	low _bufU5_intH
 13894  0114EE  6E01               	movwf	i2bufWriteIntH@b,c
 13895  0114F0  0E00               	movlw	high _bufU5_intH
 13896  0114F2  6E02               	movwf	i2bufWriteIntH@b+1,c
 13897  0114F4  C014  F003         	movff	high_isr@c_389,i2bufWriteIntH@d
 13898  0114F8  ECE2  F091         	call	i2_bufWriteIntH	;wreg free
 13899                           
 13900                           ;interrupts.c: 124:    if (c == '!')
 13901  0114FC  0E21               	movlw	33
 13902  0114FE  1814               	xorwf	high_isr@c_389,w,c
 13903  011500  A4D8               	btfss	status,2,c
 13904  011502  D002               	goto	i2l103
 13905                           
 13906                           ;interrupts.c: 125:    {;interrupts.c: 126:     (LATA4=!1);
 13907  011504  9879               	bcf	3961,4,c	;volatile
 13908                           
 13909                           ;interrupts.c: 127:    }
 13910  011506  D029               	goto	i2l115
 13911  011508                     i2l103:
 13912  011508  0E40               	movlw	64
 13913  01150A  1814               	xorwf	high_isr@c_389,w,c
 13914  01150C  A4D8               	btfss	status,2,c
 13915  01150E  D002               	goto	i2l105
 13916                           
 13917                           ;interrupts.c: 129:    {;interrupts.c: 130:     (LATA4=!0);
 13918  011510  8879               	bsf	3961,4,c	;volatile
 13919                           
 13920                           ;interrupts.c: 131:    }
 13921  011512  D023               	goto	i2l115
 13922  011514                     i2l105:
 13923  011514  0E23               	movlw	35
 13924  011516  1814               	xorwf	high_isr@c_389,w,c
 13925  011518  A4D8               	btfss	status,2,c
 13926  01151A  D002               	goto	i2l107
 13927  01151C  00FF               	reset		;# 
 13928                           
 13929                           ;interrupts.c: 135:    }
 13930  01151E  D01D               	goto	i2l115
 13931  011520                     i2l107:
 13932  011520  0E24               	movlw	36
 13933  011522  1814               	xorwf	high_isr@c_389,w,c
 13934  011524  A4D8               	btfss	status,2,c
 13935  011526  D002               	goto	i2l109
 13936                           
 13937                           ;interrupts.c: 137:    {;interrupts.c: 138:     mainFlags.enterCommand = 1;
 13938  011528  8632               	bsf	_mainFlags,3,c
 13939                           
 13940                           ;interrupts.c: 139:    }
 13941  01152A  D017               	goto	i2l115
 13942  01152C                     i2l109:
 13943  01152C  0E25               	movlw	37
 13944  01152E  1814               	xorwf	high_isr@c_389,w,c
 13945  011530  A4D8               	btfss	status,2,c
 13946  011532  D002               	goto	i2l111
 13947                           
 13948                           ;interrupts.c: 141:    {;interrupts.c: 142:     mainFlags.connectToggle = 1;
 13949  011534  8A32               	bsf	_mainFlags,5,c
 13950                           
 13951                           ;interrupts.c: 143:    }
 13952  011536  D011               	goto	i2l115
 13953  011538                     i2l111:
 13954  011538  0E5E               	movlw	94
 13955  01153A  1814               	xorwf	high_isr@c_389,w,c
 13956  01153C  A4D8               	btfss	status,2,c
 13957  01153E  D002               	goto	i2l113
 13958                           
 13959                           ;interrupts.c: 145:    {;interrupts.c: 146:     mainFlags.showBattery = 1;
 13960  011540  8C32               	bsf	_mainFlags,6,c
 13961                           
 13962                           ;interrupts.c: 147:    }
 13963  011542  D00B               	goto	i2l115
 13964  011544                     i2l113:
 13965  011544  5014               	movf	high_isr@c_389,w,c
 13966  011546  B4D8               	btfsc	status,2,c
 13967  011548  D008               	goto	i2l115
 13968                           
 13969                           ;interrupts.c: 149:    {;interrupts.c: 150:     bufWriteIntH(&bufU2_intH, c);
 13970  01154A  0ED3               	movlw	low _bufU2_intH
 13971  01154C  6E01               	movwf	i2bufWriteIntH@b,c
 13972  01154E  0E00               	movlw	high _bufU2_intH
 13973  011550  6E02               	movwf	i2bufWriteIntH@b+1,c
 13974  011552  C014  F003         	movff	high_isr@c_389,i2bufWriteIntH@d
 13975  011556  ECE2  F091         	call	i2_bufWriteIntH	;wreg free
 13976  01155A                     i2l115:
 13977                           
 13978                           ;interrupts.c: 160:    if (!PIR4bits.RC5IF)
 13979  01155A  010E               	movlb	14	; () banked
 13980  01155C  AB37               	btfss	55,5,b	;volatile
 13981  01155E                     i2u453_40:
 13982                           
 13983                           ; BSR set to: 14
 13984                           ;interrupts.c: 161:    {;interrupts.c: 162:     (LATF0=1);
 13985  01155E  807E               	bsf	3966,0,c	;volatile
 13986  011560                     i2l116:
 13987                           
 13988                           ; BSR set to: 14
 13989                           
 13990                           ; BSR set to: 14
 13991                           
 13992                           ; BSR set to: 14
 13993                           
 13994                           ;interrupts.c: 167:  {;interrupts.c: 169:  }
 13995                           
 13996                           ; BSR set to: 14
 13997                           
 13998                           ;interrupts.c: 166:  else
 13999                           
 14000                           ; BSR set to: 14
 14001                           ;interrupts.c: 165:  }
 14002                           
 14003                           ;interrupts.c: 164:   }
 14004                           
 14005                           ; BSR set to: 14
 14006  011560  C012  FFF5         	movff	??_high_isr+11,tablat
 14007  011564  C011  FFF8         	movff	??_high_isr+10,tblptru
 14008  011568  C010  FFF7         	movff	??_high_isr+9,tblptrh
 14009  01156C  C00F  FFF6         	movff	??_high_isr+8,tblptrl
 14010  011570  C00E  FFF4         	movff	??_high_isr+7,prodh
 14011  011574  C00D  FFF3         	movff	??_high_isr+6,prodl
 14012  011578  C00C  FFDA         	movff	??_high_isr+5,fsr2h
 14013  01157C  C00B  FFD9         	movff	??_high_isr+4,fsr2l
 14014  011580  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14015  011582  0011               	retfie		f
 14016  011584                     __end_of_high_isr:
 14017                           	opt stack 0
 14018                           tblptru	equ	0xFF8
 14019                           tblptrh	equ	0xFF7
 14020                           tblptrl	equ	0xFF6
 14021                           tablat	equ	0xFF5
 14022                           prodh	equ	0xFF4
 14023                           prodl	equ	0xFF3
 14024                           intcon	equ	0xFF2
 14025                           postinc0	equ	0xFEE
 14026                           wreg	equ	0xFE8
 14027                           indf1	equ	0xFE7
 14028                           postdec1	equ	0xFE5
 14029                           fsr1h	equ	0xFE2
 14030                           fsr1l	equ	0xFE1
 14031                           bsr	equ	0xFE0
 14032                           indf2	equ	0xFDF
 14033                           postinc2	equ	0xFDE
 14034                           postdec2	equ	0xFDD
 14035                           fsr2h	equ	0xFDA
 14036                           fsr2l	equ	0xFD9
 14037                           status	equ	0xFD8
 14038                           
 14039 ;; *************** function i2_bufWriteIntH *****************
 14040 ;; Defined at:
 14041 ;;		line 21 in file "ringBuffer.c"
 14042 ;; Parameters:    Size  Location     Type
 14043 ;;  b               2    0[COMRAM] PTR struct ringBuf
 14044 ;;		 -> bufU2_main(4), bufU2_intH(4), bufU5_intH(4), 
 14045 ;;  d               1    2[COMRAM] unsigned char 
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;		None
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14057 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14059 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14060 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14061 ;;Total ram usage:        6 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; This function calls:
 14064 ;;		Nothing
 14065 ;; This function is called by:
 14066 ;;		_high_isr
 14067 ;; This function uses a non-reentrant model
 14068 ;;
 14069                           
 14070                           	psect	text59
 14071  0123C4                     __ptext59:
 14072                           	opt stack 0
 14073  0123C4                     i2_bufWriteIntH:
 14074                           	opt stack 22
 14075                           
 14076                           ;ringBuffer.c: 21: void bufWriteIntH(struct ringBuf *b, unsigned char d);ringBuffer.c: 2
      +                          2: {;ringBuffer.c: 23:  b->buffer[b->writeIndex++] = d;
 14077                           
 14078                           ;incstack = 0
 14079  0123C4  EE20 F002          	lfsr	2,2
 14080  0123C8  5001               	movf	i2bufWriteIntH@b,w,c
 14081  0123CA  26D9               	addwf	fsr2l,f,c
 14082  0123CC  5002               	movf	i2bufWriteIntH@b+1,w,c
 14083  0123CE  22DA               	addwfc	fsr2h,f,c
 14084  0123D0  50DF               	movf	indf2,w,c
 14085  0123D2  6E04               	movwf	??i2_bufWriteIntH& (0+255),c
 14086  0123D4  5004               	movf	??i2_bufWriteIntH,w,c
 14087  0123D6  0D01               	mullw	1
 14088  0123D8  C001  FFD9         	movff	i2bufWriteIntH@b,fsr2l
 14089  0123DC  C002  FFDA         	movff	i2bufWriteIntH@b+1,fsr2h
 14090  0123E0  CFDE F005          	movff	postinc2,??i2_bufWriteIntH+1
 14091  0123E4  CFDD F006          	movff	postdec2,??i2_bufWriteIntH+2
 14092  0123E8  50F3               	movf	prodl,w,c
 14093  0123EA  2405               	addwf	??i2_bufWriteIntH+1,w,c
 14094  0123EC  6ED9               	movwf	fsr2l,c
 14095  0123EE  50F4               	movf	prodh,w,c
 14096  0123F0  2006               	addwfc	??i2_bufWriteIntH+2,w,c
 14097  0123F2  6EDA               	movwf	fsr2h,c
 14098  0123F4  C003  FFDF         	movff	i2bufWriteIntH@d,indf2
 14099  0123F8  EE20 F002          	lfsr	2,2
 14100  0123FC  5001               	movf	i2bufWriteIntH@b,w,c
 14101  0123FE  26D9               	addwf	fsr2l,f,c
 14102  012400  5002               	movf	i2bufWriteIntH@b+1,w,c
 14103  012402  22DA               	addwfc	fsr2h,f,c
 14104  012404  2ADF               	incf	indf2,f,c
 14105                           
 14106                           ;ringBuffer.c: 31:  if (!RF2)PIE3bits.TX2IE = 1;
 14107  012406  B48E               	btfsc	3982,2,c	;volatile
 14108  012408  D002               	goto	i2l812
 14109  01240A  010E               	movlb	14	; () banked
 14110  01240C  8D2C               	bsf	44,6,b	;volatile
 14111  01240E                     i2l812:
 14112                           
 14113                           ;ringBuffer.c: 32:  if ((!RF6&&!!RF7&&!RF5) )
 14114  01240E  BC8E               	btfsc	3982,6,c	;volatile
 14115  012410  0012               	return	
 14116  012412  AE8E               	btfss	3982,7,c	;volatile
 14117  012414  0012               	return	
 14118  012416  BA8E               	btfsc	3982,5,c	;volatile
 14119  012418  0012               	return	
 14120                           
 14121                           ;ringBuffer.c: 33:   PIE4bits.TX5IE = 1;
 14122  01241A  010E               	movlb	14	; () banked
 14123  01241C  892D               	bsf	45,4,b	;volatile
 14124  01241E  0012               	return	
 14125  012420                     __end_ofi2_bufWriteIntH:
 14126                           	opt stack 0
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           postinc0	equ	0xFEE
 14135                           wreg	equ	0xFE8
 14136                           indf1	equ	0xFE7
 14137                           postdec1	equ	0xFE5
 14138                           fsr1h	equ	0xFE2
 14139                           fsr1l	equ	0xFE1
 14140                           bsr	equ	0xFE0
 14141                           indf2	equ	0xFDF
 14142                           postinc2	equ	0xFDE
 14143                           postdec2	equ	0xFDD
 14144                           fsr2h	equ	0xFDA
 14145                           fsr2l	equ	0xFD9
 14146                           status	equ	0xFD8
 14147                           
 14148 ;; *************** function _strlen *****************
 14149 ;; Defined at:
 14150 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strlen.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;  s               2    0[COMRAM] PTR const unsigned char 
 14153 ;;		 -> connectedString(10), 
 14154 ;; Auto vars:     Size  Location     Type
 14155 ;;  a               2    4[COMRAM] PTR const unsigned char 
 14156 ;;		 -> connectedString(10), 
 14157 ;; Return value:  Size  Location     Type
 14158 ;;                  2    0[COMRAM] unsigned int 
 14159 ;; Registers used:
 14160 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14161 ;; Tracked objects:
 14162 ;;		On entry : 0/0
 14163 ;;		On exit  : 0/0
 14164 ;;		Unchanged: 0/0
 14165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14166 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14168 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14169 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14170 ;;Total ram usage:        6 bytes
 14171 ;; Hardware stack levels used:    1
 14172 ;; This function calls:
 14173 ;;		Nothing
 14174 ;; This function is called by:
 14175 ;;		_high_isr
 14176 ;; This function uses a non-reentrant model
 14177 ;;
 14178                           
 14179                           	psect	text60
 14180  0126C0                     __ptext60:
 14181                           	opt stack 0
 14182  0126C0                     _strlen:
 14183                           	opt stack 22
 14184                           
 14185                           ;incstack = 0
 14186  0126C0  C001  F005         	movff	strlen@s,strlen@a
 14187  0126C4  C002  F006         	movff	strlen@s+1,strlen@a+1
 14188  0126C8  D002               	goto	i2l1822
 14189  0126CA  4A01               	infsnz	strlen@s,f,c
 14190  0126CC  2A02               	incf	strlen@s+1,f,c
 14191  0126CE                     i2l1822:
 14192  0126CE  C001  FFF6         	movff	strlen@s,tblptrl
 14193  0126D2  C002  FFF7         	movff	strlen@s+1,tblptrh
 14194  0126D6                     	if	0	;tblptru may be non-zero
 14195  0126D6                     	endif
 14196  0126D6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 14197  0126D6  0E00               	movlw	low (__mediumconst shr (0+16))
 14198  0126D8  6EF8               	movwf	tblptru,c
 14199  0126DA                     	endif
 14200  0126DA  0008               	tblrd		*
 14201  0126DC  50F5               	movf	tablat,w,c
 14202  0126DE  0900               	iorlw	0
 14203  0126E0  A4D8               	btfss	status,2,c
 14204  0126E2  D7F3               	goto	i2l1823
 14205  0126E4  C005  F003         	movff	strlen@a,??_strlen
 14206  0126E8  C006  F004         	movff	strlen@a+1,??_strlen+1
 14207  0126EC  1E03               	comf	??_strlen,f,c
 14208  0126EE  1E04               	comf	??_strlen+1,f,c
 14209  0126F0  4A03               	infsnz	??_strlen,f,c
 14210  0126F2  2A04               	incf	??_strlen+1,f,c
 14211  0126F4  5001               	movf	strlen@s,w,c
 14212  0126F6  2403               	addwf	??_strlen,w,c
 14213  0126F8  6E01               	movwf	?_strlen,c
 14214  0126FA  5002               	movf	strlen@s+1,w,c
 14215  0126FC  2004               	addwfc	??_strlen+1,w,c
 14216  0126FE  6E02               	movwf	?_strlen+1,c
 14217  012700  0012               	return	
 14218  012702                     __end_of_strlen:
 14219                           	opt stack 0
 14220                           tblptru	equ	0xFF8
 14221                           tblptrh	equ	0xFF7
 14222                           tblptrl	equ	0xFF6
 14223                           tablat	equ	0xFF5
 14224                           prodh	equ	0xFF4
 14225                           prodl	equ	0xFF3
 14226                           intcon	equ	0xFF2
 14227                           postinc0	equ	0xFEE
 14228                           wreg	equ	0xFE8
 14229                           indf1	equ	0xFE7
 14230                           postdec1	equ	0xFE5
 14231                           fsr1h	equ	0xFE2
 14232                           fsr1l	equ	0xFE1
 14233                           bsr	equ	0xFE0
 14234                           indf2	equ	0xFDF
 14235                           postinc2	equ	0xFDE
 14236                           postdec2	equ	0xFDD
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function _ledMatrixProcess *****************
 14242 ;; Defined at:
 14243 ;;		line 37 in file "user.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14261 ;;Total ram usage:        2 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; This function calls:
 14264 ;;		Nothing
 14265 ;; This function is called by:
 14266 ;;		_high_isr
 14267 ;; This function uses a non-reentrant model
 14268 ;;
 14269                           
 14270                           	psect	text61
 14271  011ECC                     __ptext61:
 14272                           	opt stack 0
 14273  011ECC                     _ledMatrixProcess:
 14274                           	opt stack 22
 14275                           
 14276                           ;user.c: 41:  static unsigned char c = 0;;user.c: 43:  if (++c == 12)
 14277                           
 14278                           ;incstack = 0
 14279  011ECC  2A36               	incf	ledMatrixProcess@c,f,c
 14280  011ECE  0E0C               	movlw	12
 14281  011ED0  1836               	xorwf	ledMatrixProcess@c,w,c
 14282  011ED2  A4D8               	btfss	status,2,c
 14283  011ED4  D002               	goto	i2l493
 14284                           
 14285                           ;user.c: 44:  {;user.c: 45:   c = 0;
 14286  011ED6  0E00               	movlw	0
 14287  011ED8  6E36               	movwf	ledMatrixProcess@c,c
 14288  011EDA                     i2l493:
 14289                           
 14290                           ;user.c: 48:  LATE &= 0xf0;
 14291  011EDA  0EF0               	movlw	240
 14292  011EDC  167D               	andwf	3965,f,c	;volatile
 14293                           
 14294                           ;user.c: 49:  TRISE = (TRISE & 0xf0) | (~(ledAnodeTable[c] | ledCathodeTable[c]) & 0x0f)
      +                          ;
 14295  011EDE  5036               	movf	ledMatrixProcess@c,w,c
 14296  011EE0  0D01               	mullw	1
 14297  011EE2  0E43               	movlw	low _ledCathodeTable
 14298  011EE4  24F3               	addwf	prodl,w,c
 14299  011EE6  6EF6               	movwf	tblptrl,c
 14300  011EE8  0EFB               	movlw	high _ledCathodeTable
 14301  011EEA  20F4               	addwfc	prodh,w,c
 14302  011EEC  6EF7               	movwf	tblptrh,c
 14303  011EEE                     	if	1	;There are 3 active tblptr bytes
 14304  011EEE  6AF8               	clrf	tblptru,c
 14305  011EF0  0E00               	movlw	low (__mediumconst shr (0+16))
 14306  011EF2  22F8               	addwfc	tblptru,f,c
 14307  011EF4                     	endif
 14308  011EF4  0008               	tblrd		*
 14309  011EF6  CFF5 F001          	movff	tablat,??_ledMatrixProcess
 14310  011EFA  5036               	movf	ledMatrixProcess@c,w,c
 14311  011EFC  0D01               	mullw	1
 14312  011EFE  0E4F               	movlw	low _ledAnodeTable
 14313  011F00  24F3               	addwf	prodl,w,c
 14314  011F02  6EF6               	movwf	tblptrl,c
 14315  011F04  0EFB               	movlw	high _ledAnodeTable
 14316  011F06  20F4               	addwfc	prodh,w,c
 14317  011F08  6EF7               	movwf	tblptrh,c
 14318  011F0A                     	if	1	;There are 3 active tblptr bytes
 14319  011F0A  6AF8               	clrf	tblptru,c
 14320  011F0C  0E00               	movlw	low (__mediumconst shr (0+16))
 14321  011F0E  22F8               	addwfc	tblptru,f,c
 14322  011F10                     	endif
 14323  011F10  0008               	tblrd		*
 14324  011F12  50F5               	movf	tablat,w,c
 14325  011F14  1001               	iorwf	??_ledMatrixProcess,w,c
 14326  011F16  0AFF               	xorlw	255
 14327  011F18  6E02               	movwf	(??_ledMatrixProcess+1)& (0+255),c
 14328  011F1A  0E0F               	movlw	15
 14329  011F1C  1602               	andwf	??_ledMatrixProcess+1,f,c
 14330  011F1E  5085               	movf	3973,w,c	;volatile
 14331  011F20  0BF0               	andlw	240
 14332  011F22  1002               	iorwf	??_ledMatrixProcess+1,w,c
 14333  011F24  6E85               	movwf	3973,c	;volatile
 14334                           
 14335                           ;user.c: 50:  if (led[c])
 14336  011F26  5036               	movf	ledMatrixProcess@c,w,c
 14337  011F28  0D01               	mullw	1
 14338  011F2A  0E6C               	movlw	low _led
 14339  011F2C  24F3               	addwf	prodl,w,c
 14340  011F2E  6ED9               	movwf	fsr2l,c
 14341  011F30  0E00               	movlw	high _led
 14342  011F32  20F4               	addwfc	prodh,w,c
 14343  011F34  6EDA               	movwf	fsr2h,c
 14344  011F36  50DF               	movf	indf2,w,c
 14345  011F38  B4D8               	btfsc	status,2,c
 14346  011F3A  0012               	return	
 14347                           
 14348                           ;user.c: 51:  {;user.c: 52:   LATE |= ledAnodeTable[c] & 0x0f;
 14349  011F3C  5036               	movf	ledMatrixProcess@c,w,c
 14350  011F3E  0D01               	mullw	1
 14351  011F40  0E4F               	movlw	low _ledAnodeTable
 14352  011F42  24F3               	addwf	prodl,w,c
 14353  011F44  6EF6               	movwf	tblptrl,c
 14354  011F46  0EFB               	movlw	high _ledAnodeTable
 14355  011F48  20F4               	addwfc	prodh,w,c
 14356  011F4A  6EF7               	movwf	tblptrh,c
 14357  011F4C                     	if	1	;There are 3 active tblptr bytes
 14358  011F4C  6AF8               	clrf	tblptru,c
 14359  011F4E  0E00               	movlw	low (__mediumconst shr (0+16))
 14360  011F50  22F8               	addwfc	tblptru,f,c
 14361  011F52                     	endif
 14362  011F52  0008               	tblrd		*
 14363  011F54  50F5               	movf	tablat,w,c
 14364  011F56  0B0F               	andlw	15
 14365  011F58  127D               	iorwf	3965,f,c	;volatile
 14366  011F5A  0012               	return	
 14367  011F5C                     __end_of_ledMatrixProcess:
 14368                           	opt stack 0
 14369                           tblptru	equ	0xFF8
 14370                           tblptrh	equ	0xFF7
 14371                           tblptrl	equ	0xFF6
 14372                           tablat	equ	0xFF5
 14373                           prodh	equ	0xFF4
 14374                           prodl	equ	0xFF3
 14375                           intcon	equ	0xFF2
 14376                           postinc0	equ	0xFEE
 14377                           wreg	equ	0xFE8
 14378                           indf1	equ	0xFE7
 14379                           postdec1	equ	0xFE5
 14380                           fsr1h	equ	0xFE2
 14381                           fsr1l	equ	0xFE1
 14382                           bsr	equ	0xFE0
 14383                           indf2	equ	0xFDF
 14384                           postinc2	equ	0xFDE
 14385                           postdec2	equ	0xFDD
 14386                           fsr2h	equ	0xFDA
 14387                           fsr2l	equ	0xFD9
 14388                           status	equ	0xFD8
 14389                           
 14390 ;; *************** function _EUSART5_Read *****************
 14391 ;; Defined at:
 14392 ;;		line 75 in file "eusart5.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;		None
 14395 ;; Auto vars:     Size  Location     Type
 14396 ;;		None
 14397 ;; Return value:  Size  Location     Type
 14398 ;;                  1    wreg      unsigned char 
 14399 ;; Registers used:
 14400 ;;		wreg, status,2
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14410 ;;Total ram usage:        0 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; This function calls:
 14413 ;;		Nothing
 14414 ;; This function is called by:
 14415 ;;		_high_isr
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           	psect	text62
 14420  012A34                     __ptext62:
 14421                           	opt stack 0
 14422  012A34                     _EUSART5_Read:
 14423                           	opt stack 22
 14424                           
 14425                           ;eusart5.c: 77:  return RC5REG;
 14426                           
 14427                           ;incstack = 0
 14428  012A34  010E               	movlb	14	; () banked
 14429  012A36  51DC               	movf	220,w,b	;volatile
 14430  012A38  0012               	return	
 14431  012A3A                     __end_of_EUSART5_Read:
 14432                           	opt stack 0
 14433                           tblptru	equ	0xFF8
 14434                           tblptrh	equ	0xFF7
 14435                           tblptrl	equ	0xFF6
 14436                           tablat	equ	0xFF5
 14437                           prodh	equ	0xFF4
 14438                           prodl	equ	0xFF3
 14439                           intcon	equ	0xFF2
 14440                           postinc0	equ	0xFEE
 14441                           wreg	equ	0xFE8
 14442                           indf1	equ	0xFE7
 14443                           postdec1	equ	0xFE5
 14444                           fsr1h	equ	0xFE2
 14445                           fsr1l	equ	0xFE1
 14446                           bsr	equ	0xFE0
 14447                           indf2	equ	0xFDF
 14448                           postinc2	equ	0xFDE
 14449                           postdec2	equ	0xFDD
 14450                           fsr2h	equ	0xFDA
 14451                           fsr2l	equ	0xFD9
 14452                           status	equ	0xFD8
 14453                           
 14454 ;; *************** function _EUSART2_Read *****************
 14455 ;; Defined at:
 14456 ;;		line 74 in file "eusart2.c"
 14457 ;; Parameters:    Size  Location     Type
 14458 ;;		None
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;		None
 14461 ;; Return value:  Size  Location     Type
 14462 ;;                  1    wreg      unsigned char 
 14463 ;; Registers used:
 14464 ;;		wreg, status,2
 14465 ;; Tracked objects:
 14466 ;;		On entry : 0/0
 14467 ;;		On exit  : 0/0
 14468 ;;		Unchanged: 0/0
 14469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 14470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14474 ;;Total ram usage:        0 bytes
 14475 ;; Hardware stack levels used:    1
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		_high_isr
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	text63
 14484  012A3A                     __ptext63:
 14485                           	opt stack 0
 14486  012A3A                     _EUSART2_Read:
 14487                           	opt stack 22
 14488                           
 14489                           ;eusart2.c: 76:  return RC2REG;
 14490                           
 14491                           ; BSR set to: 14
 14492                           ;incstack = 0
 14493  012A3A  010E               	movlb	14	; () banked
 14494  012A3C  51F1               	movf	241,w,b	;volatile
 14495  012A3E  0012               	return	
 14496  012A40                     __end_of_EUSART2_Read:
 14497                           	opt stack 0
 14498                           tblptru	equ	0xFF8
 14499                           tblptrh	equ	0xFF7
 14500                           tblptrl	equ	0xFF6
 14501                           tablat	equ	0xFF5
 14502                           prodh	equ	0xFF4
 14503                           prodl	equ	0xFF3
 14504                           intcon	equ	0xFF2
 14505                           postinc0	equ	0xFEE
 14506                           wreg	equ	0xFE8
 14507                           indf1	equ	0xFE7
 14508                           postdec1	equ	0xFE5
 14509                           fsr1h	equ	0xFE2
 14510                           fsr1l	equ	0xFE1
 14511                           bsr	equ	0xFE0
 14512                           indf2	equ	0xFDF
 14513                           postinc2	equ	0xFDE
 14514                           postdec2	equ	0xFDD
 14515                           fsr2h	equ	0xFDA
 14516                           fsr2l	equ	0xFD9
 14517                           status	equ	0xFD8
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           intcon	equ	0xFF2
 14525                           postinc0	equ	0xFEE
 14526                           wreg	equ	0xFE8
 14527                           indf1	equ	0xFE7
 14528                           postdec1	equ	0xFE5
 14529                           fsr1h	equ	0xFE2
 14530                           fsr1l	equ	0xFE1
 14531                           bsr	equ	0xFE0
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           fsr2h	equ	0xFDA
 14536                           fsr2l	equ	0xFD9
 14537                           status	equ	0xFD8
 14538                           
 14539                           	psect	rparam
 14540  0000                     tblptru	equ	0xFF8
 14541                           tblptrh	equ	0xFF7
 14542                           tblptrl	equ	0xFF6
 14543                           tablat	equ	0xFF5
 14544                           prodh	equ	0xFF4
 14545                           prodl	equ	0xFF3
 14546                           intcon	equ	0xFF2
 14547                           postinc0	equ	0xFEE
 14548                           wreg	equ	0xFE8
 14549                           indf1	equ	0xFE7
 14550                           postdec1	equ	0xFE5
 14551                           fsr1h	equ	0xFE2
 14552                           fsr1l	equ	0xFE1
 14553                           bsr	equ	0xFE0
 14554                           indf2	equ	0xFDF
 14555                           postinc2	equ	0xFDE
 14556                           postdec2	equ	0xFDD
 14557                           fsr2h	equ	0xFDA
 14558                           fsr2l	equ	0xFD9
 14559                           status	equ	0xFD8
 14560                           
 14561                           	psect	temp
 14562  000048                     btemp:
 14563                           	opt stack 0
 14564  000048                     	ds	1
 14565  0000                     int$flags	set	btemp
 14566  0000                     wtemp8	set	btemp+1
 14567  0000                     ttemp5	set	btemp+1
 14568  0000                     ttemp6	set	btemp+4
 14569  0000                     ttemp7	set	btemp+8
 14570                           tblptru	equ	0xFF8
 14571                           tblptrh	equ	0xFF7
 14572                           tblptrl	equ	0xFF6
 14573                           tablat	equ	0xFF5
 14574                           prodh	equ	0xFF4
 14575                           prodl	equ	0xFF3
 14576                           intcon	equ	0xFF2
 14577                           postinc0	equ	0xFEE
 14578                           wreg	equ	0xFE8
 14579                           indf1	equ	0xFE7
 14580                           postdec1	equ	0xFE5
 14581                           fsr1h	equ	0xFE2
 14582                           fsr1l	equ	0xFE1
 14583                           bsr	equ	0xFE0
 14584                           indf2	equ	0xFDF
 14585                           postinc2	equ	0xFDE
 14586                           postdec2	equ	0xFDD
 14587                           fsr2h	equ	0xFDA
 14588                           fsr2l	equ	0xFD9
 14589                           status	equ	0xFD8


Data Sizes:
    Strings     18
    Constant    1722
    Data        17
    BSS         1176
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      71
    BANK0           160     24     157
    BANK1           256      0     256
    BANK2           256      0     256
    BANK3           256      0     256
    BANK4           256      0     256
    BANK5           256     15      15
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> connectedString(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 10
		 -> connectedString(CODE[10]), 

    keyMapList	PTR const unsigned short [6] size(2) Largest target is 192
		 -> keyMap3Fn(CODE[192]), keyMap3(CODE[192]), keyMap2Fn(CODE[192]), keyMap2(CODE[192]), 
		 -> keyMap1Fn(CODE[192]), keyMap1(CODE[192]), 

    bufInit@b.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufInit@buf	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufInit@b	PTR struct ringBuf size(2) Largest target is 5
		 -> bufU5_main(COMRAM[4]), bufU2_main(COMRAM[4]), bufU2_intH(BANK0[4]), bufU5_intH(COMRAM[4]), 

    bufClear@b.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufClear@b	PTR struct ringBuf size(2) Largest target is 5
		 -> bufU5_main(COMRAM[4]), bufU5_intH(COMRAM[4]), 

    bufRead@b.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufRead@b	PTR struct ringBuf size(2) Largest target is 5
		 -> bufU5_main(COMRAM[4]), bufU2_main(COMRAM[4]), bufU2_intH(BANK0[4]), bufU5_intH(COMRAM[4]), 

    bufWriteIntH@b.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufWriteIntH@b	PTR struct ringBuf size(2) Largest target is 5
		 -> bufU2_main(COMRAM[4]), bufU2_intH(BANK0[4]), bufU5_intH(COMRAM[4]), 

    bufWrite@b.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufWrite@b	PTR struct ringBuf size(2) Largest target is 5
		 -> bufU5_main(COMRAM[4]), bufU2_main(COMRAM[4]), 

    showText@text	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[6]), STR_1(CODE[12]), 

    bufU5_main.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufU2_main.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufU2_intH.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    S165ringBuf$buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 

    bufU5_intH.buffer	PTR unsigned char  size(2) Largest target is 256
		 -> b6(BANK4[256]), b4(BANK3[256]), b3(BANK2[256]), b1(BANK1[256]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_bufRead
    _SendCharUSB->_EUSART5_Write
    _SendCharBT->_EUSART2_Write

Critical Paths under _high_isr in COMRAM

    _high_isr->_strlen
    _high_isr->i2_bufWriteIntH

Critical Paths under _main in BANK0

    _main->_showBatteryState
    _swProcess->_swPush
    _swUnregister->_swRelease
    _showBatteryState->_showState
    _showState->_showText
    _showText->_bufWrite
    ___lwmod->___lwdiv
    _GetFuel->___wmul
    _setSleepDelay->___lmul
    _sendToggle->_bufWrite
    _sendMouse->_bufWrite
    _sendKey->_bufWrite
    _sendConsumerReport->_bufWrite
    _sendAltCode->_bufWrite
    _waitOutputReport->_bufWrite
    _bufWrite->___lwmod
    _enterCommand->_waitMs
    _disconnect->_waitMs
    _connect->_waitMs
    _InitApp2->_InitUiBoardIO

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0  176968
                                              0 BANK5     15    15      0
                        _GetChgState
                            _GetFuel
                            _InitApp
                           _InitApp2
                         _ReadEEPROM
                        _WriteEEPROM
                            _bufInit
                       _checkBtState
                            _connect
                      _connectToggle
                          _connected
                       _enterCommand
                        _sendAltCode
                 _sendConsumerReport
                            _sendKey
                          _sendMouse
                         _sendToggle
                       _setScanCodes
                      _setSleepDelay
                              _setXY
                   _showBatteryState
                           _showText
                         _sw1Process
                          _swProcess
                    _waitBootTrigger
                             _waitMs
 ---------------------------------------------------------------------------------
 (1) _waitBootTrigger                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _swProcess                                           11    11      0    3314
                                             12 BANK0     11    11      0
                             _swPush
                         _swRegister
                       _swUnregister
 ---------------------------------------------------------------------------------
 (2) _swUnregister                                         2     2      0     527
                                              6 BANK0      2     2      0
                          _swRelease
 ---------------------------------------------------------------------------------
 (3) _swRelease                                            6     6      0     155
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _swRegister                                           8     8      0    1158
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _swPush                                              12    12      0     756
                                              0 BANK0     12    12      0
 ---------------------------------------------------------------------------------
 (1) _sw1Process                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _showBatteryState                                     2     2      0   27765
                                             22 BANK0      2     2      0
                            _GetFuel
                          _showState
                             _waitMs
 ---------------------------------------------------------------------------------
 (2) _showState                                            2     0      2   25629
                                             20 BANK0      2     0      2
                            ___lwdiv
                            ___lwmod
                           _bufWrite
                           _showText
 ---------------------------------------------------------------------------------
 (1) _showText                                             2     0      2   12249
                                             18 BANK0      2     0      2
                           _bufWrite
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     592
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GetFuel                                              8     6      2     867
                                              6 BANK0      8     6      2
           _ADCC_GetSingleConversion
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     632
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ADCC_GetSingleConversion                             5     3      2      31
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _setXY                                               10    10      0     164
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _setSleepDelay                                        7     5      2    1666
                                             12 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     456
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _setScanCodes                                         6     6      0     520
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _sendToggle                                           0     0      0   24008
                           _bufWrite
                   _waitOutputReport
 ---------------------------------------------------------------------------------
 (1) _sendMouse                                            0     0      0   24008
                           _bufWrite
                   _waitOutputReport
 ---------------------------------------------------------------------------------
 (1) _sendKey                                              0     0      0   24008
                           _bufWrite
                   _waitOutputReport
 ---------------------------------------------------------------------------------
 (1) _sendConsumerReport                                   0     0      0   24008
                           _bufWrite
                   _waitOutputReport
 ---------------------------------------------------------------------------------
 (1) _sendAltCode                                          4     4      0   24215
                                             18 BANK0      4     4      0
                           _bufWrite
                   _waitOutputReport
 ---------------------------------------------------------------------------------
 (2) _waitOutputReport                                     0     0      0   12004
                           _bufWrite
 ---------------------------------------------------------------------------------
 (2) _bufWrite                                             6     3      3   12004
                                             12 BANK0      6     3      3
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _enterCommand                                         0     0      0    3216
                       _bufWriteIntH
                         _disconnect
                             _waitMs
 ---------------------------------------------------------------------------------
 (2) _bufWriteIntH                                         6     3      3     994
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _connected                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _connectToggle                                        0     0      0    2222
                            _connect
                         _disconnect
 ---------------------------------------------------------------------------------
 (2) _disconnect                                           0     0      0    1111
                             _waitMs
 ---------------------------------------------------------------------------------
 (2) _connect                                              0     0      0    1111
                             _waitMs
 ---------------------------------------------------------------------------------
 (1) _waitMs                                               8     4      4    1111
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _checkBtState                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bufInit                                              4     0      4     844
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _WriteEEPROM                                          4     1      3     456
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _ReadEEPROM                                           4     2      2     279
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _InitApp2                                             0     0      0     260
                    _ADCC_Initialize
                _ConfigureOscillator
                 _EUSART2_Initialize
                 _EUSART5_Initialize
                    _InitMainBoardIO
                      _InitUiBoardIO
                     _PMD_Initialize
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitUiBoardIO                                        1     1      0     260
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMainBoardIO                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART5_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                         _PMD_AllOff
                 _StandbyMainBoardIO
                   _StandbyUiBoardIO
 ---------------------------------------------------------------------------------
 (2) _StandbyUiBoardIO                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _StandbyMainBoardIO                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_AllOff                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetChgState                                          1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _low_isr                                              9     9      0     677
                                             26 COMRAM     9     9      0
                         _SendCharBT
                        _SendCharUSB
                           _bufClear
                            _bufRead
 ---------------------------------------------------------------------------------
 (6) _bufRead                                              6     4      2     393
                                             20 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _bufClear                                             2     0      2     196
                                             20 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _SendCharUSB                                          1     1      0      44
                                             21 COMRAM     1     1      0
                      _EUSART5_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART5_Write                                        1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SendCharBT                                           1     1      0      44
                                             21 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Write                                        1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _high_isr                                            14    14      0     676
                                              6 COMRAM    14    14      0
                       _EUSART2_Read
                       _EUSART5_Read
                   _ledMatrixProcess
                             _strlen
                     i2_bufWriteIntH
 ---------------------------------------------------------------------------------
 (9) i2_bufWriteIntH                                       6     3      3     244
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (9) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) _ledMatrixProcess                                     2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _EUSART5_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetChgState
   _GetFuel
     _ADCC_GetSingleConversion
     ___wmul
   _InitApp
     _PMD_AllOff
     _StandbyMainBoardIO
     _StandbyUiBoardIO
   _InitApp2
     _ADCC_Initialize
     _ConfigureOscillator
     _EUSART2_Initialize
     _EUSART5_Initialize
     _InitMainBoardIO
     _InitUiBoardIO
     _PMD_Initialize
   _ReadEEPROM
   _WriteEEPROM
   _bufInit
   _checkBtState
   _connect
     _waitMs
   _connectToggle
     _connect
       _waitMs
     _disconnect
       _waitMs
   _connected
   _enterCommand
     _bufWriteIntH
     _disconnect
       _waitMs
     _waitMs
   _sendAltCode
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     _waitOutputReport
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _sendConsumerReport
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     _waitOutputReport
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _sendKey
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     _waitOutputReport
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _sendMouse
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     _waitOutputReport
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _sendToggle
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
     _waitOutputReport
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
   _setScanCodes
   _setSleepDelay
     ___lmul
   _setXY
   _showBatteryState
     _GetFuel
       _ADCC_GetSingleConversion
       ___wmul
     _showState
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _bufWrite
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
       _showText
         _bufWrite
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
     _waitMs
   _showText
     _bufWrite
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
   _sw1Process
   _swProcess
     _swPush
     _swRegister
     _swUnregister
       _swRelease
   _waitBootTrigger
   _waitMs

 _low_isr (ROOT)
   _SendCharBT
     _EUSART2_Write
   _SendCharUSB
     _EUSART5_Write
   _bufClear
   _bufRead

 _high_isr (ROOT)
   _EUSART2_Read
   _EUSART5_Read
   _ledMatrixProcess
   _strlen
   i2_bufWriteIntH

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      F       F      16        5.9%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0     100      14      100.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0     100      12      100.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0     100      10      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      47       1       75.5%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4F3       8        0.0%
DATA                 0      0     4F3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Feb 23 14:31:29 2019

             __size_of_WriteEEPROM 0044                __end_of_GetChgState 2854  
                      __CFG_CP$OFF 000000                                 _b1 0100  
                               _b3 0200                                 _b4 0300  
                               _b6 0400                   ??i2_bufWriteIntH 0004  
                               _sw 0060                                 bsr 000FE0  
              ___wmul@multiplicand 00D9                     setSleepDelay@t 00E6  
                   ??_bufWriteIntH 00DA                                l250 071C  
                              l260 09A0                                l252 0758  
                              l510 21B2                                l270 0AB6  
                              l262 09D8                                l254 07AC  
                              l271 0ACE                                l263 0A3E  
                              l504 218E                                l264 0A62  
                              l256 0802                                l248 06E2  
                              l281 0BBC                                l273 0AFC  
                              l249 06FC                                l274 0B10  
                              l266 0A56                                l258 096A  
                              l283 0BF8                                l275 0B26  
                              l267 0A7A                                l508 2192  
                              l276 0B3E                                l509 21B8  
                              l277 0B56                                l269 0A9E  
                              l278 0B6E                                l279 0B86  
                              l544 268E                                l608 288A  
                              l552 20F8                                l554 211C  
                              l812 23B2                                l558 2296  
                              l902 1648                                l807 2354  
                              l751 267C                                l911 0F30  
                              l680 272A                                l904 1698  
                              l681 2704                                l921 0FE0  
                              l905 16F6                                l754 29AA  
                              l747 2662                                l931 1154  
                              l915 0F60                                l780 19A4  
                              l932 1116                                l924 101A  
                              l781 1A1A                                l933 114E  
                              l917 0FE4                                l941 0D9E  
                              l782 1A7A                                l918 0F96  
                              l942 0D84                                l927 1064  
                              l951 0EDE                                l943 0D94  
                              l928 1078                                l952 0EC8  
                              l936 0DAA                                l929 1084  
                              l937 0CB4                                l946 0DB6  
                              l939 0D66                                l892 1E50  
                              l956 0EFC                                l948 0DDE  
                              l957 0F10                                l894 1E78  
                              _RF0 007C70                                _RF1 007C71  
                              _RF2 007C72                                _RD6 007C66  
                              _RD7 007C67                                _RF3 007C73  
                              _RF5 007C75                                _RF6 007C76  
                              _RF7 007C77                       __CFG_CPD$OFF 000000  
                              _mSw 008D                                _led 006C  
                              _hex FB33            __size_of_PMD_Initialize 0018  
                              prod 000FF3                                wreg 000FE8  
             _connectedStringIndex 0037                         _TXSTA2bits 000EF6  
                       _TXSTA5bits 000EE1                        ReadEEPROM@d 00DA  
                     swProcess@col 00E9                       swProcess@sw2 00EA  
                     swProcess@row 00EC                       __CFG_LVP$OFF 000000  
                     __CFG_ZCD$OFF 000000                               l1001 05AE  
                             l1002 0096                               l1011 0152  
                             l1020 0238                               l1004 00A6  
                             l1021 0272                               l1013 017E  
                             l1005 00D0                               l1102 137C  
                             l1110 121C                               l1022 02AC  
                             l1111 1224                               l1103 116C  
                             l1031 0324                               l1015 01AA  
                             l1007 00FC                               l1104 1360  
                             l1120 12A2                               l1112 122E  
                             l1024 038E                               l1105 12E0  
                             l1121 12B4                               l1113 1238  
                             l1041 041E                               l1033 0336  
                             l1025 02EC                               l1017 01D6  
                             l1009 0126                               l1122 12C2  
                             l1114 1242                               l1106 1206  
                             l1050 040A                               l1042 03DE  
                             l1034 033C                               l1026 03D6  
                             l1123 12D6                               l1115 124A  
                             l1051 040E                               l1027 02F0  
                             l1019 0202                               l1140 2620  
                             l1124 12DC                               l1116 125A  
                             l1108 120E                               l1052 0412  
                             l1036 0370                               l1028 02F4  
                             l1117 1270                               l1109 1214  
                             l1053 0416                               l1045 03E4  
                             l1029 02F8                               l1118 1280  
                             l1054 041A                               l1038 0388  
                             l1070 17E2                               l1119 1294  
                             l1055 0492                               l1047 03F8  
                             l1039 03DA                               l1063 1876  
                             l1071 17D6                               l1056 057E  
                             l1048 03FE                               l1072 181E  
                             l1064 174E                               l1057 0538  
                             l1049 0404                               l1073 17DA  
                             l1090 1C5A                               l1082 1828  
                             l1074 17DE                               l1066 1752  
                             l1091 1C36                               l1059 057E  
                             l1092 1C1C                               l1076 182C  
                             l1068 178E                               l1157 2432  
                             l1077 1822                               l1086 1C76  
                             l1158 2446                               l1087 1BCA  
                             l1097 1C84                               l1640 24F0  
                             l1641 24E8                               l1650 25CC  
                             l1651 25C4                               l1644 2510  
                             l1645 251A                               l1654 25E4  
                             l1655 25EE                     ?_connectToggle 0001  
                             l6405 0F8E                               l6191 20F0  
                             l6503 0152                               l6423 1012  
                             l8031 18EE                               l8023 18D0  
                             l7215 07A4                               l8041 061C  
                             l6521 01D6                               l8033 18F8  
                             l8025 18DA                               l8051 064E  
                             l8043 0626                               l6515 01AA  
                             l8053 0658                               l8045 0630  
                             l6509 017E                               l8029 18E4  
                             l6287 1E48                               l8047 063A  
                             l8039 0612                               l6551 0370  
                             l6527 0202                               l6383 0F28  
                             l8049 0644                               l6449 107C  
                             l7409 0BF0                               l7185 0714  
                             l6299 1E70                               l6491 00FC  
                             l6485 00D0                               l6397 0F58  
                             l6815 21B2                               l7199 0750  
                             l6497 0126                               l6579 0538  
                             l6851 0D5E                               l6827 0CAC  
                             l7395 0BB4                               l6873 0DAE  
                             l6885 0DD6                               STR_1 FFED  
                             STR_2 FFF9                               _LATA 000F79  
                             _LATB 000F7A                               _LATC 000F7B  
                             _LATD 000F7C                               _LATE 000F7D  
                             _LATF 000F7E                               _LATG 000F7F  
                             _LATH 000F80                               u6200 04AA  
                             u7000 0788                               u6210 04B8  
                             u6114 022E                               u6115 022A  
                             u6220 04C6                               u6124 0264  
                             u7100 087C                               u7020 07DC  
                             _PMD0 000E4C                               u6125 0260  
                             _PMD1 000E4D                               u5510 24F4  
                             u6230 04D4                               u6150 031A  
                             u6134 029E                               u7110 0894  
                             u7030 080A                               _PMD2 000E4E  
                             u6135 029A                               _PMD3 000E4F  
                             u6400 2176                               u6240 04E0  
                             u6208 04AE                               u6160 0366  
                             u6144 02DA                               u7120 08A6  
                             _PMD4 000E50                               u6305 27EE  
                             u6145 02D4                               _PMD5 000E51  
                             u6330 2840                               u6306 27F0  
                             u6218 04BC                               u6170 03F2  
                             u7210 094E                               u7130 08B4  
                             u7106 087E                               u7050 0824  
                             u6340 2842                               u5620 2120  
                             u5540 25D0                               u6228 04CA  
                             u6180 03F4                               u7300 09BE  
                             u7220 0950                               u7140 08CC  
                             u7060 0836                               u6325 229E  
                             u7045 080C                               u6326 22A0  
                             u6350 2158                               u6246 04E2  
                             u6238 04D8                               u6190 049C  
                             u7150 08DE                               u7118 0898  
                             u7070 0844                               u6360 215A  
                             u7320 0A1E                               u7160 08F0  
                             u7136 08B6                               u7128 08AA  
                             u7080 085C                               u5650 1E6C  
                             u6530 0DD2                               u7330 0A20  
                             u7250 0984                               u7170 0902  
                             u7090 086E                               u7058 0828  
                             u5635 213C                               u5484 177E  
                             u7260 0986                               u7180 0914  
                             u7148 08D0                               u7076 0846  
                             u7068 083A                               u5485 177A  
                             u6390 2174                               u6198 04A0  
                             u5494 17BC                               u6470 0D56  
                             u7190 0922                               u7158 08E2  
                             u5495 17B6                               u5760 0F54  
                             u7168 08F4                               u7088 0860  
                             u7290 09BC                               u7178 0906  
                             u7098 0872                               i2l91 1470  
                             i2l83 1422                               i2l92 14BE  
                             u6820 2010                               u6564 0E64  
                             u7196 0924                               u7188 0918  
                             i2l93 14BA                               u6565 0E5E  
                             i2l86 14CC                               u6830 2012  
                             u5870 1068                               i2l95 14BE  
                             i2l87 1440                               i2l79 1426  
                             u6840 2024                               u5880 106C  
                             u7560 0BD4                               u7385 0A5E  
                             u6690 1C7C                               u6850 2026  
                             u7386 0A60                               i2l99 14E6  
                             u6860 2038                               u7580 0C28  
                             u6765 19FC                               u6870 203A  
                             u6880 204C                               u6945 2638  
                             u6946 263A                               u6890 204E  
                             u6980 0734                               _WPUA 000E91  
                             _WPUB 000E99                               _WPUC 000EA1  
                             _WPUD 000EA6                               _WPUE 000EAE  
                             _WPUF 000EB3                               _WPUG 000EBB  
                             _WPUH 000EC0                EUSART5_Write@txData 0015  
                    _EUSART2_Write 2A06                    sendAltCode@temp 00EC  
          __end_of_ledCathodeTable FB4F                       __CFG_WRTB$ON 000000  
                     __CFG_WRTC$ON 000000                               _main 0662  
                    _EUSART5_Write 29F8                      _InitUiBoardIO 1E28  
                             _time 0028                      ?_EUSART2_Read 0001  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             indf1 000FE7                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0048                               _volt 00FB  
          __end_of_connectedString FFED                      ?_EUSART5_Read 0001  
                             prodh 000FF4                               prodl 000FF3  
                             start 0922                        _BtConnected 0088  
                  __end_of_GetFuel 2150               __end_of_bitOrderSwap FA33  
                 setSleepDelay@gie 00E5                      __CFG_CSWEN$ON 000000  
                     ___param_bank 000000          __size_of_showBatteryState 0080  
                  __end_of_InitApp 299C                    _BtGPIO5LowCount 0086  
                      ?_PMD_AllOff 0001                      ?_enterCommand 0001  
                            _ADACQ 000F5C                              _ADCAP 000F5D  
                            _ADACT 000F56                              ?_main 0001  
                            _ADCLK 000F57                              _ADPCH 000F5F  
               _sendConsumerReport 22A2                              _ADREF 000F58  
                    __CFG_WDTE$OFF 000000                              _ADRPT 000F66  
                            _T1CON 000FCF                              _LATA1 007BC9  
                            _LATA4 007BCC                              _LATA5 007BCD  
                            _T3CON 000FC9                              _LATF0 007BF0  
                            _LATF3 007BF3                              _LATF4 007BF4  
                            _IOCBF 000E93                              _IOCEF 000EA8  
                            _IOCBN 000E94                              _IOCEN 000EA9  
                   __CFG_DEBUG$OFF 000000                    __end_of___lwdiv 2524  
                            i1l123 0850                              i1l133 08DE  
                            i1l125 0896                              i1l135 08C4  
                            i1l127 0874                              i1l129 0890  
                            i1l139 08FA                              i2l111 1538  
                            i2l103 1508                              i2l113 1544  
                            i2l105 1514                    __end_of___lwmod 25F8  
                            i2l115 155A                              i2l107 1520  
                            i2l116 1560                              i2l109 152C  
                 ?_waitBootTrigger 0001                              i2l812 240E  
                            i2l493 1EDA                              _OSCEN 000E47  
                            _TMR1H 000FCE                              _TMR3H 000FC8  
                            _PORTB 000F8A                              _PORTD 000F8C  
                            _PORTE 000F8D                              _TRISA 000F81  
                            _TRISB 000F82                              _TRISC 000F83  
                            _TRISD 000F84                              _TRISE 000F85  
                            _TRISF 000F86                              _TRISG 000F87  
                            _TRISH 000F88                              _WPUF3 00759B  
              _ConfigureOscillator 296E                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
              ___lmul@multiplicand 00DB                      __CFG_WRT3$OFF 000000  
                  __end_of_bufInit 282A                    __end_of_bufRead 25B4  
                    __CFG_WRT4$OFF 000000                      __CFG_WRT5$OFF 000000  
                    __CFG_WRT6$OFF 000000                      __CFG_WRT7$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                     __CFG_EBTR2$OFF 000000  
                   __CFG_EBTR3$OFF 000000                     __CFG_EBTR4$OFF 000000  
                   __CFG_EBTR5$OFF 000000                     __CFG_EBTR6$OFF 000000  
                   __CFG_EBTR7$OFF 000000                    __end_of_connect 2908  
                    __CFG_WRTD$OFF 000000                    __end_of_keyMap1 FFE3  
                  __end_of_keyMap2 FE63                    __end_of_keyMap3 FCE3  
              ?_sendConsumerReport 0001                     __CFG_EBTRB$OFF 000000  
        __size_of_waitOutputReport 0042                 __CFG_MCLRE$INTMCLR 000000  
                            _setXY 1158                              main@c 050A  
                  __end_of_sendKey 1D74                    __end_of_low_isr 0922  
                   __CFG_BOREN$OFF 000000                     ?_EUSART2_Write 0001  
                            tablat 000FF5                     ?_EUSART5_Write 0001  
                       _ReadEEPROM 27C0                     ?_InitUiBoardIO 0001  
                   ??_EUSART2_Read 0001                              nvmcon 000F77  
                            ttemp5 0049                              ttemp6 004C  
                            ttemp7 0050                     ??_EUSART5_Read 0001  
                            status 000FD8                              wtemp8 0049  
                      _GetChgState 282A               ?_ConfigureOscillator 0001  
                    ??_SendCharUSB 0016                      high_isr@c_389 0014  
                  __initialization 1D74               ??_sendConsumerReport 00E9  
            __end_of_popCount8bits FB33                       __end_of_main 0C42  
                     ?_sendAltCode 0001                   __end_of_InitApp2 20DC  
                   __CFG_SCANE$OFF 000000                     ??_enterCommand 00DF  
                  _InitMainBoardIO 29C4                  ?_ledMatrixProcess 0001  
            __end_of_setSleepDelay 22A2                             ??_main 0500  
               ??_ledMatrixProcess 0001                      __activetblptr 000003  
      __size_of_StandbyMainBoardIO 0072                         _SendCharBT 2A2A  
                  ??_connectToggle 00DF         __end_of_EUSART2_Initialize 296E  
                           _ADCON0 000F60                             _ADCON1 000F59  
                           _ADCON2 000F5A                             _ADCON3 000F5B  
                ReadEEPROM@address 00D7                             _ADLTHH 000F6B  
                           _ADLTHL 000F6A                             _ADRESH 000F64  
                           _ADRESL 000F63                             ?_setXY 0001  
                           _ADSTAT 000F65                             _ADUTHH 000F6D  
                           _ADUTHL 000F6C                             _ANSELA 000E92  
                           _ANSELB 000E9A                             _ANSELD 000EA7  
                           _ANSELE 000EAF                             _ANSELF 000EB4  
                           _ANSELG 000EBC              __size_of_checkBtState 0014  
                           _RC2REG 000EF1                             _RC5REG 000EDC  
                           _RC2STA 000EF5                             _RC5STA 000EE0  
                           _ODCONA 000E90                             _ODCONB 000E98  
                           _ODCONC 000EA0                             _ODCOND 000EA5  
                           _ODCONE 000EAD                             _ODCONF 000EB2  
                           _ODCONG 000EBA                             _ODCONH 000EBF  
                           i1l4151 2A08                             i1l4155 29FA  
                           _RG1PPS 000E83                             i1l5181 08F6  
                   __CFG_WDTCCS$SC 000000                             _RG3PPS 000E85  
                           i2l1822 26CE                             i2l1823 26CA  
                           _INLVLA 000E8E                             _INLVLB 000E96  
                           _INLVLC 000E9E                             _INLVLD 000EA3  
                           _INLVLE 000EAB                             _INLVLF 000EB0  
                           _INLVLG 000EB8                             _INLVLH 000EBD  
                           _FVRCON 000EC4                __size_of_PMD_AllOff 0012  
                           _OSCFRQ 000E49                          ??_GetFuel 00DF  
                           _NVMADR 000F74                             _NVMDAT 000F76  
                           _TX2REG 000EF2                             _TX5REG 000EDD  
                           _TX2STA 000EF6                             _TX5STA 000EE1  
                           _TRISF2 007C32                             _TRISF3 007C33  
                        ??_InitApp 00D7               __end_of_bufWriteIntH 23C4  
            ??_ConfigureOscillator 00D7                   __end_of_bufClear 2926  
                   __CFG_PWRTE$OFF 000000                     __CFG_XINST$OFF 000000  
                 __end_of_bufWrite 2366          __CFG_RSTOSC$HFINTOSC_1MHZ 000000  
                 __end_of_high_isr 1584                             ___lmul 2420  
                           ___wmul 2854                     __CFG_STVREN$ON 000000  
                        ??___lwdiv 00DB                      swUnregister@c 00DE  
                        ??___lwmod 00E2                __end_of_SendCharUSB 2A2A  
                           clear_0 1DBE                             clear_1 1DD2  
                           clear_2 1DE6                             clear_3 1DFA  
                           clear_4 1E0C                             clear_5 1E18  
                ?_StandbyUiBoardIO 0001                             _waitMs 267E  
                        ??_bufInit 00DB                          ??_bufRead 0017  
                           _swPush 0000                   swRegister@d_1749 00DD  
                           _strlen 26C0                          ??_connect 00DF  
                  _ADCC_Initialize 2524                 ??_StandbyUiBoardIO 00D7  
                   _PMD_Initialize 2926                       __pdataCOMRAM 0045  
                      SendCharBT@d 0016                       _checkBtState 29B0  
                           setXY@c 00E0                          ??_sendKey 00E9  
                     __mediumconst F932                   __end_of_showText 2742  
                        ??_low_isr 001B                   __end_of_rowTable FB63  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8  __size_of_ADCC_GetSingleConversion 0028  
        ?_ADCC_GetSingleConversion 00D7                    ??_EUSART2_Write 0015  
                     WriteEEPROM@d 00D9                    ??_EUSART5_Write 0015  
                  ??_InitUiBoardIO 00D7                        ?_ReadEEPROM 00D7  
                       __accesstop 0060            __end_of__initialization 1E1E  
                    ___rparam_used 000001            __end_of_InitMainBoardIO 29D8  
                 _showBatteryState 1FE6                     __pcstackCOMRAM 0001  
               sw1Process@sw1Count 0035                       __pidataBANK0 29EA  
       __end_of_EUSART5_Initialize 2956                 sw1Process@sw1State 0034  
            __end_of_ledAnodeTable FB5B                      __end_of_setXY 1384  
           __end_of_PMD_Initialize 293E               __end_of_EUSART2_Read 2A40  
             __end_of_EUSART5_Read 2A3A                        ?_SendCharBT 0001  
                  __CFG_LPBOREN$ON 000000                       _bitOrderSwap F933  
               __size_of_connected 000C                   _waitOutputReport 263C  
                          ??_setXY 00D7                         __pbssBANK0 0060  
                       __pbssBANK1 0100                         __pbssBANK2 0200  
                       __pbssBANK3 0300                         __pbssBANK4 0400  
                        ?_InitApp2 0001               __end_of_enterCommand 24D0  
                    ?_setScanCodes 0001                         _bufU2_main 003D  
                       _bufU2_intH 00D3                         _bufU5_main 0039  
                       _bufU5_intH 0041                      ??_WriteEEPROM 00DA  
                      _SendCharUSB 2A20                            ?___lmul 00D7  
                          ?___wmul 00D7            __end_of_ADCC_Initialize 256E  
               __size_of_sendMouse 008A                       ??_PMD_AllOff 00D7  
                   ___lmul@product 00DF               __size_of_sendAltCode 01B6  
                          _ADSTPTH 000F69                            _ADSTPTL 000F68  
                          ?_waitMs 00D7                    ?_PMD_Initialize 0001  
                          ?_swPush 0001                            ?_strlen 0001  
              __size_of_ReadEEPROM 0036                 __size_of_swRelease 01BA  
               __size_of_showState 00FE                 __size_of_swProcess 02D4  
                       _disconnect 28A4                            _SP2BRGH 000EF4  
                          _SP2BRGL 000EF3                            _SP5BRGH 000EDF  
                          _SP5BRGL 000EDE                            _OSCCON1 000E43  
                          _OSCCON3 000E45                          ?_bufClear 0015  
                          _OSCTUNE 000E48                            _NVMCON2 000F78  
                          _TMR1CLK 000FD2                            _TMR3CLK 000FCC  
                          _SLRCONA 000E8F                            _SLRCONB 000E97  
                          _SLRCONC 000E9F                            _SLRCOND 000EA4  
                          _SLRCONE 000EAC                            _SLRCONF 000EB1  
                          _SLRCONG 000EB9                            _SLRCONH 000EBE  
                        ?_bufWrite 00E3                          ?_high_isr 0001  
            __size_of_bufWriteIntH 005E                     ??_setScanCodes 00D7  
                       ??_InitApp2 00D8                         _keyMapList 00EF  
                          _GetFuel 20DC                 __end_of_PMD_AllOff 29EA  
                     ?_GetChgState 0001                         _sw1Process 2150  
                          _InitApp 2986                    i2bufWriteIntH@b 0001  
                  i2bufWriteIntH@d 0003                  showBatteryState@v 00ED  
                          __Hparam 0000                            __Lparam 0000  
                 ?_InitMainBoardIO 0001                __size_of_SendCharBT 000A  
                        ?_showText 00E9                    __size_of___lmul 0058  
                __end_of_connected 2A20                      setScanCodes@c 00DB  
                    setScanCodes@d 00DC                      setScanCodes@e 00D8  
                  __size_of___wmul 0028                __end_of_WriteEEPROM 263C  
                __end_of_keyMap1Fn FF23                  __end_of_keyMap2Fn FDA3  
                __end_of_keyMap3Fn FC23                            ___lwdiv 24D0  
                          ___lwmod 25B4                            _altCode 002E  
                          __pcinit 1D74                 WriteEEPROM@address 00D7  
                          __ramtop 0E00                            _bufInit 27F6  
                          _bufRead 256E                            __ptext0 0662  
                          __ptext1 2782                            __ptext2 0C42  
                          __ptext3 1584                            __ptext4 1748  
                          __ptext5 0F16                    __size_of_waitMs 0042  
                          __ptext6 0000                            __ptext7 2150  
                          __ptext8 1FE6                            __ptext9 1AB8  
                  __size_of_swPush 0662                            _connect 28EA  
                          _keyMap1 FF23                            _keyMap2 FDA3  
                          _keyMap3 FC23                    __size_of_strlen 0042  
                          _keyMode 008B                       _bufWriteIntH 2366  
                    _fnEnableLatch 008A                            _sendKey 1C9C  
                       ??_bufClear 0017                            _low_isr 0818  
          __size_ofi2_bufWriteIntH 005C                         ??_bufWrite 00E6  
                       ??_high_isr 0007                     __pintcode_body 1384  
             end_of_initialization 1E1E           __size_of_waitBootTrigger 003E  
                __end_of_sendMouse 1FE6          __size_of_ledMatrixProcess 0090  
                   _sleepCountDown 0024                         _sendToggle 28CC  
                          int_func 1384                       SendCharUSB@d 0016  
                          setXY@kc 00DE                  __end_of_swRelease 1902  
                       bufInit@buf 00D9                  __end_of_showState 1BB6  
                          waitMs@t 00D7                 _EUSART2_Initialize 2956  
                __end_of_swProcess 0F16                            swPush@c 00E2  
      __size_of_sendConsumerReport 0066                         ??_showText 00EB  
                          postdec1 000FE5                            postdec2 000FDD  
                   GetChgState@ret 00D7                            postinc0 000FEE  
                          postinc2 000FDE                         _mouseSpeed 0047  
            __size_of_EUSART2_Read 0006              __size_of_EUSART5_Read 0006  
                      swRegister@c 00DE                        swRegister@d 00DC  
                 ?_ADCC_Initialize 0001                        swRegister@n 00DB  
                       _swRegister 0F16   __end_of_ADCC_GetSingleConversion 28A4  
            __CFG_WDTCPS$WDTCPS_31 000000                ?_EUSART2_Initialize 0001  
                          strlen@a 0005                            strlen@s 0001  
                swRegister@sameCol 00D9                  swRegister@sameRow 00DA  
       __end_of_StandbyMainBoardIO 2234                        ?_disconnect 0001  
            __size_of_enterCommand 0058           __end_of_showBatteryState 2066  
                 __CFG_FEXTOSC$OFF 000000              __end_of_connectToggle 29B0  
      __end_of_ConfigureOscillator 2986               ??_EUSART2_Initialize 00D7  
        __size_of_StandbyUiBoardIO 0040                       ??_ReadEEPROM 00D9  
                    ?_swUnregister 0001             __size_of_setSleepDelay 006E  
                     _EUSART2_Read 2A3A                        ?_sw1Process 0001  
                     _EUSART5_Read 2A34                        _WriteEEPROM 25F8  
              setSleepDelay@second 00E3                    ReadEEPROM@GIE_t 00D9  
         __end_of_waitOutputReport 267E                sw1Process@sw1Count2 0030  
                   __end_of___lmul 2478                     __end_of___wmul 287C  
                    __pidataCOMRAM 2A40               __end_of_setScanCodes 1C9C  
                     _enterCommand 2478                     __end_of_waitMs 26C0  
               __end_of_ReadEEPROM 27F6                     __end_of_swPush 0662  
                   __end_of_strlen 2702                start_initialization 1D74  
                     ??_SendCharBT 0016                 _EUSART5_Initialize 293E  
                      __end_of_hex FB43              __end_of_EUSART2_Write 2A14  
                   ??_swUnregister 00DD                        ?_sendToggle 0001  
              ?_EUSART5_Initialize 0001              __end_of_EUSART5_Write 2A06  
            __end_of_InitUiBoardIO 1ECC                  __size_of_InitApp2 0076  
                ??_waitBootTrigger 00D7               __size_of_GetChgState 002A  
                     ?_SendCharUSB 0001                __size_of_disconnect 0028  
                 ??_PMD_Initialize 00D7                           ??___lmul 00DF  
                         ??___wmul 00DB                 __end_of_SendCharBT 2A34  
                    _popCount8bits FA33                        ?_swRegister 0001  
                      __pdataBANK0 00EF               ??_EUSART5_Initialize 00D7  
                         ??_waitMs 00DB                           ??_swPush 00D7  
                    _setSleepDelay 2234                           ??_strlen 0003  
         _ADCC_GetSingleConversion 287C                __size_of_sw1Process 0072  
                      __pbssCOMRAM 0024                      __pcstackBANK0 00D7  
                    __pcstackBANK5 0500                     i2_bufWriteIntH 23C4  
                __size_of_bufClear 001E                EUSART2_Write@txData 0015  
                 _ledMatrixProcess 1ECC                  __size_of_bufWrite 005E  
                         ?_GetFuel 00DD                  __size_of_high_isr 0D7C  
                         ?_InitApp 0001                   ___lwdiv@dividend 00D7  
                        __pintcode 0808                      __pmediumconst F932  
                    ??_sendAltCode 00E9    ADCC_GetSingleConversion@channel 00DB  
                         ?___lwdiv 00D7                           ?___lwmod 00DE  
                 __CFG_PPS1WAY$OFF 000000                  __size_of_showText 0040  
                      __pintcodelo 0818                     ?_setSleepDelay 00E3  
                         ?_bufInit 00D7                           ?_bufRead 0015  
                        _mainFlags 0032                __size_of_sendToggle 001E  
                        _connected 2A14               _outputReportReceived 0038  
                         ?_connect 0001                          _keyMap1Fn FE63  
                        _keyMap2Fn FCE3                          _keyMap3Fn FB63  
                         _BAUD2CON 000EF7                           _BAUD5CON 000EE2  
           __end_ofi2_bufWriteIntH 2420                          _firstPush 0046  
                         ?_sendKey 0001                          _keyReport 0078  
                         ?_low_isr 0001                   ___lwdiv@quotient 00DC  
                   __size_of_setXY 022C                   _StandbyUiBoardIO 2742  
              __size_of_swRegister 0242                     ___wmul@product 00DB  
                        bufClear@b 0015                           _LATHbits 000F80  
                        _sendMouse 1F5C                           _IPR0bits 000E1F  
                         _PIE0bits 000E29                           _IPR3bits 000E22  
                         _IPR4bits 000E23                           _PIE3bits 000E2C  
                         _IPR5bits 000E24                           _PIE4bits 000E2D  
                         _PIE5bits 000E2E                           _PMD0bits 000E4C  
                         GetFuel@c 00E4                           GetFuel@r 00E0  
                         _PIR0bits 000E33                           i2u442_40 14C8  
                         i2u453_40 155E                           i2u445_40 14DA  
                         _PIR3bits 000E36                           i2u438_40 1434  
                         _PIR4bits 000E37                           _PIR5bits 000E38  
                       swRelease@c 00DC              __size_of_setScanCodes 00E6  
                        _swRelease 1748                          _showState 1AB8  
                        _swProcess 0C42                          bufWrite@b 00E3  
                        bufWrite@d 00E5                      _ledAnodeTable FB4F  
                      _INT2PPSbits 000DF2               __end_of_swUnregister 1748  
                       showState@v 00EB                          main@c_700 050B  
                        main@c_701 050C                          main@c_731 050D  
                        main@c_732 050E           __size_of_InitMainBoardIO 0014  
                       _ADCON0bits 000F60                         ?_connected 0001  
                ___wmul@multiplier 00D7                     InitUiBoardIO@c 00D7  
              __end_of_sendAltCode 1AB8                      ?_checkBtState 0001  
                       swProcess@c 00ED                          high_isr@c 0013  
                     ??_disconnect 00DF                    ?i2_bufWriteIntH 0001  
                ?_showBatteryState 0001                  ___lmul@multiplier 00D7  
                        copy_data0 1D8C                        _consumerKey 002C  
               ??_showBatteryState 00ED                 _StandbyMainBoardIO 21C2  
                         _InitApp2 2066                       _setScanCodes 1BB6  
                 __size_of_GetFuel 0074                       ??_sw1Process 00D7  
                       ?_sendMouse 0001                       ?_WriteEEPROM 00D7  
       __end_of_sendConsumerReport 2308                   __size_of_InitApp 0016  
                         __Hrparam 0000                ?_StandbyMainBoardIO 0001  
                     _sawToothWave 008C                           __Lrparam 0000  
               __end_of_disconnect 28CC                         ?_swRelease 0001  
             __size_of_SendCharUSB 000A                    ??_setSleepDelay 00E5  
                       ?_showState 00EB                  ?_waitOutputReport 0001  
                       ?_swProcess 0001                   __size_of___lwdiv 0054  
                 __size_of___lwmod 0044                     setScanCodes@kc 00D9  
               ??_waitOutputReport 00E9                     ??_checkBtState 00D7  
                 __size_of_bufInit 0034                   __size_of_bufRead 0046  
                         _fnEnable 0089                   __size_of_connect 001E  
             ??_StandbyMainBoardIO 00D7           __size_of_ADCC_Initialize 004A  
               __end_of_sw1Process 21C2                           _main$730 0509  
                         _main$727 0506                           _main$728 0507  
                         _bufClear 2908                           _main$729 0508  
                  ___lwdiv@divisor 00D9                   __size_of_sendKey 00D8  
                  ___lwdiv@counter 00DB                   __size_of_low_isr 010A  
                         __ptext10 2702                           __ptext11 25B4  
                         __ptext20 28CC                           __ptext12 24D0  
                         __ptext21 1F5C                           __ptext13 20DC  
                         __ptext30 299C                           __ptext22 1C9C  
                         __ptext14 2854                           __ptext31 28A4  
                         __ptext23 22A2                           __ptext15 287C  
                         __ptext40 1E28                           __ptext32 28EA  
                         __ptext24 1902                           __ptext16 1158  
                         __ptext41 29C4                           __ptext33 267E  
                         __ptext25 263C                           __ptext17 2234  
                         __ptext50 282A                           __ptext42 293E  
                         __ptext34 29B0                           __ptext26 2308  
                         __ptext18 2420                           __ptext43 2956  
                         __ptext35 27F6                           __ptext27 2478  
                         __ptext19 1BB6                           __ptext60 26C0  
                         __ptext52 256E                           __ptext44 296E  
                         __ptext36 25F8                           __ptext28 2366  
                         __ptext61 1ECC                           __ptext53 2908  
                         __ptext45 2524                           __ptext37 27C0  
                         __ptext29 2A14                           __ptext62 2A34  
                         __ptext54 2A20                           __ptext46 2986  
                         __ptext38 2066                           __ptext63 2A3A  
                         __ptext55 29F8                           __ptext47 2742  
                         __ptext39 2926                           __ptext56 2A2A  
                         __ptext48 21C2                           __ptext57 2A06  
                         __ptext49 29D8                           __ptext59 23C4  
                  _waitBootTrigger 2782                           _bufWrite 2308  
                 WriteEEPROM@GIE_t 00DA                           _high_isr 0808  
                     ??_sendToggle 00E9        __size_of_EUSART2_Initialize 0018  
                         _lastPush 0045                      __size_of_main 05E0  
             __CFG_WDTCWS$WDTCWS_7 000000       __size_of_ConfigureOscillator 0018  
               __CFG_BORV$VBOR_285 000000                           bufInit@b 00D7  
                         bufRead@b 0015                           bufRead@d 001A  
                       _RC2STAbits 000EF5                           _showText 2702  
       ??_ADCC_GetSingleConversion 00D9                           _rowTable FB5B  
                         int$flags 0048                        _sendAltCode 1902  
                       _RC5STAbits 000EE0                       ??_swRegister 00D7  
         __end_of_ledMatrixProcess 1F5C             __size_of_connectToggle 0014  
                      ??_connected 00D7                 __end_of_sendToggle 28EA  
                       _INTCONbits 000FF2                  ledMatrixProcess@c 0036  
                      _NVMCON1bits 000F77                  ??_InitMainBoardIO 00D7  
                         intlevel1 0000                           intlevel2 0000  
                    ??_GetChgState 00D7                   ___lwmod@dividend 00DE  
               __end_of_swRegister 1158                  __CFG_CLKOUTEN$OFF 000000  
                      ??_sendMouse 00E9                         GetFuel@ret 00E2  
                  _ledCathodeTable FB43              __size_of_swUnregister 01C4  
                      ??_swRelease 00D7                    _connectedString FFE3  
                      ??_showState 00ED                        ??_swProcess 00E3  
                       _PMD_AllOff 29D8                        _mouseReport 0082  
         __end_of_StandbyUiBoardIO 2782        __size_of_EUSART5_Initialize 0018  
           __size_of_EUSART2_Write 000E             __size_of_EUSART5_Write 000E  
           __size_of_InitUiBoardIO 00A4            __end_of_waitBootTrigger 27C0  
                       _RX2PPSbits 000E11                        _swPush$1888 00DE  
                      _swPush$1889 00E0                      ?_bufWriteIntH 00D7  
                  ___lwmod@divisor 00E0                    ___lwmod@counter 00E2  
                       _RX5PPSbits 000E17                      bufWriteIntH@b 00D7  
                    bufWriteIntH@d 00D9                      _connectToggle 299C  
                ??_ADCC_Initialize 00D7                       _swUnregister 1584  
             __end_of_checkBtState 29C4                       showText@text 00E9  
